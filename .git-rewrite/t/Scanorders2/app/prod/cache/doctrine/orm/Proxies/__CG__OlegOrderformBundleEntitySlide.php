<?php

namespace Proxies\__CG__\Oleg\OrderformBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Slide extends \Oleg\OrderformBundle\Entity\Slide implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getDiagnosis()
    {
        $this->__load();
        return parent::getDiagnosis();
    }

    public function setDiagnosis($diagnosis)
    {
        $this->__load();
        return parent::setDiagnosis($diagnosis);
    }

    public function getMicroscopicdescr()
    {
        $this->__load();
        return parent::getMicroscopicdescr();
    }

    public function setMicroscopicdescr($microscopicdescr)
    {
        $this->__load();
        return parent::setMicroscopicdescr($microscopicdescr);
    }

    public function getSpecialstain()
    {
        $this->__load();
        return parent::getSpecialstain();
    }

    public function setSpecialstain($specialstain)
    {
        $this->__load();
        return parent::setSpecialstain($specialstain);
    }

    public function getRelevantscan()
    {
        $this->__load();
        return parent::getRelevantscan();
    }

    public function setRelevantscan($relevantscan)
    {
        $this->__load();
        return parent::setRelevantscan($relevantscan);
    }

    public function setBlock(\Oleg\OrderformBundle\Entity\Block $block = NULL)
    {
        $this->__load();
        return parent::setBlock($block);
    }

    public function getBlock()
    {
        $this->__load();
        return parent::getBlock();
    }

    public function setStain(\Oleg\OrderformBundle\Entity\Stain $stain = NULL)
    {
        $this->__load();
        return parent::setStain($stain);
    }

    public function getStain()
    {
        $this->__load();
        return parent::getStain();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function setScan(\Oleg\OrderformBundle\Entity\Scan $scan = NULL)
    {
        $this->__load();
        return parent::setScan($scan);
    }

    public function getScan()
    {
        $this->__load();
        return parent::getScan();
    }

    public function setBarcode($barcode)
    {
        $this->__load();
        return parent::setBarcode($barcode);
    }

    public function getBarcode()
    {
        $this->__load();
        return parent::getBarcode();
    }

    public function setOrderinfo(\Oleg\OrderformBundle\Entity\OrderInfo $orderinfo = NULL)
    {
        $this->__load();
        return parent::setOrderinfo($orderinfo);
    }

    public function getOrderinfo()
    {
        $this->__load();
        return parent::getOrderinfo();
    }

    public function setAccession(\Oleg\OrderformBundle\Entity\Accession $accession = NULL)
    {
        $this->__load();
        return parent::setAccession($accession);
    }

    public function getAccession()
    {
        $this->__load();
        return parent::getAccession();
    }

    public function setPart(\Oleg\OrderformBundle\Entity\Part $part = NULL)
    {
        $this->__load();
        return parent::setPart($part);
    }

    public function getPart()
    {
        $this->__load();
        return parent::getPart();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'diagnosis', 'microscopicdescr', 'specialstain', 'relevantscan', 'barcode', 'part', 'block', 'orderinfo', 'accession', 'stain', 'scan');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}