Convert classic sites to new sites:
https://support.google.com/sites/answer/7035197#zippy=%2Cconvert-your-site%2Ccopy-your-classic-site-to-new-sites%2Cconvert-your-site-in-classic-sites-manager

https://sites.google.com/classicsitesmanager

sites.google.com/a/pathologysystems.org/wcmc
https://sites.google.com/a/pathologysystems.org/wcmc/fellowship-application

This site is also viewable at 
https://wcmc.pathologysystems.org
https://wcmc.pathologysystems.org/fellowship-application

All sites saved on google drive

New site: Edit page "FELLOWSHIP APPLICATION" to show google script fellapp application "ApplicationWithUploadNew"

Add GitHub to Google script

Google Script App saved on google drive as a json file

Google auth:
https://console.cloud.google.com/apis/credentials?project=quickstart-1563304352237

Google New Sites API is not available yet
https://support.google.com/sites/thread/3363462?hl=en
https://developers.google.com/sites

################## JS ##################
<div id="welcome-note">Please wait for this page to load ...</div>

<script>

var delayInMilliseconds = 12000; //1000; //1 second

setTimeout(function() {
  document.getElementById("welcome-note").remove();
}, delayInMilliseconds);

</script>


<iframe
width="100%" height="5000"
andbox="allow-scripts allow-popups allow-forms allow-same-origin allow-popups-to-escape-sandbox allow-downloads allow-modals"
aria-label="Apps Script"
src="https://script.google.com/macros/s/AKfycbzT040qN6Yv0Z7nK2d7ZDpLudFCPJDsIJwHd1L9DuldVBg_g21duVfjLvYuaA8DsvxW/exec"
allowfullscreen="" frameborder="0">
</iframe>
################## ##################

Remote repository on github:
https://github.com/cinava/fellowship-application
https://github.com/cinava/fellowship-rec-letter-submission


https://sites.google.com/pathologysystems.org/recletter
<iframe src="https://script.google.com/macros/s/AKfycbyM-ZAwmp6ncIwjk1q1gFD9stsJ-o7shc-beAgiwED_Pe-mBxTfJcm1-3SpFXITS97L/exec" 
height="2000" width="800" title="Iframe Example">
</iframe>


https://stackoverflow.com/questions/64705749/google-apps-script-cannot-get-url-parameter-from-page-on-new-google-site
https://script.google.com/a/macros/pathologysystems.org/s/AKfycbyM-ZAwmp6ncIwjk1q1gFD9stsJ-o7shc-beAgiwED_Pe-mBxTfJcm1-3SpFXITS97L/exec
https://script.google.com/a/pathologysystems.org/macros/s/1JwVzCKlR3be-Y7lHw6BKD2X2XWspB6bOSmCKP3geCsiP31JoHea-tFkq/exec

### Note for recommendation letter url to referee ###
Add new parameter - fellapp-letter-url
In order to access recommendation letter url's parameters,
the url send by email in inviteSingleReferenceToSubmitLetter must be the web app url from deployment GAS
Something similar to https://script.google.com/macros/s/AKfycbyM-ZAwmp6ncIwjk1q1gFD9stsJ-o7shc-beAgiwED_Pe-mBxTfJcm1-3SpFXITS97L/exec
####################################


### JSON config file ###
Use the unique config file name "config-fellapp.json" in GAS and in PHP
####################################


### Site Settings (user bundle) ###
(removed) configFileFolderIdFellApp (will not used) - Google Drive Folder ID where config file is located (must be present locally and in google app script (gas))
(removed) -codeGoogleFormFellApp (not used) - Path to the local copy of the fellowship application form Code.gs file
(moved to fellapp setting) confirmationEmailFellApp - Email address for confirmation of application submission
(moved to fellapp setting) -applicationPageLinkFellApp (not used) - Link to the Application Page. Used for reference only
(removed) -clientEmailFellApp (not used) - used in old pk12 auth
(moved to fellapp setting as authPathFellApp) p12KeyPathFellApp - auth credential json file
(moved to fellapp setting) googleDriveApiUrlFellApp - scopes: used in old authenticationP12Key getClient2 and in current authGoogleServiceAccount
(removed) -userImpersonateEmailFellApp (not used) - Impersonate the following user email address for accessing the Google Drive API
(removed) -templateIdFellApp (not used) - Template Google Spreadsheet ID, the same as in gas _templateSSKey
(removed) folderIdFellApp - Application Google Drive Folder ID (where the response spreadsheets are saved)
(moved to fellapp setting, TODO: remove traces) localInstitutionFellApp - Local Organizational Group for imported fellowship applications (i.e. "Pathology Fellowship Programs (WCM)")
(moved to fellapp setting) identificationUploadLetterFellApp (wcmpath on live) - Fellowship identification string to download recommendation letters
(moved to fellapp setting) recLetterSaltFellApp (pepper, peppertest, pepperdev) - Recommendation Letter Salt

(removed) backupFileIdFellApp - Backup Google Spreadsheet ID
(moved to fellapp setting) allowPopulateFellApp - Periodically import fellowship applications and reference letters submitted via the Google form
(moved to fellapp setting) sendEmailUploadLetterFellApp - Automatically send invitation emails to upload recommendation letters

confirmationSubjectFellApp - Email subject for confirmation of application submission
***
Your WCM/NYP fellowship application has been successfully received
***

confirmationBodyFellApp - Email body for confirmation of application submission
***
Thank You for submitting the fellowship application to Weill Cornell Medicine/NewYork Presbyterian Hospital.

Once we receive the associated recommendation letters, your application will be reviewed and considered.

If You have any questions, please do not hesitate to contact me by phone or via email.


Sincerely,
Jessica Misner
Training Coordinator
Weill Cornell Medicine
Pathology and Laboratory Medicine
1300 York Avenue, Room C-302
T 212.746.6464
F 212.746.8192
WCMPathPrgm@med.cornell.edu
***

deleteImportedAplicationsFellApp - Delete successfully imported applications from Google Drive
deleteOldAplicationsFellApp - Delete downloaded spreadsheets with fellowship applications after successful import into the database
yearsOldAplicationsFellApp - Number of years to keep downloaded spreadsheets with fellowship applications as backup (2)
spreadsheetsPathFellApp - Path to the downloaded spreadsheets with fellowship applications (fellapp/Spreadsheets)
applicantsUploadPathFellApp - Path to the downloaded attached documents (fellapp/FellowshipApplicantUploads)
reportsUploadPathFellApp - Path to the generated fellowship applications in PDF format (fellapp/Reports)
####################################


### FellappSiteParameter ###
fellappRecLetterUrl - the web app url from deployment GAS, send by email in inviteSingleReferenceToSubmitLetter

####################################


### GoogleFormConfig and config.json (find by _configFolderId in gas, find by configFileFolderIdFellApp by php) ###
acceptingSubmission - Accepting Submission
fellappAdminEmail - Fellowship Form Admin Email
adminEmail - Admin Email
exceptionAccount - Exception Account for the Fellowship Application (in maintenance, the application is still shown to this google user for testing purposes)
letterAcceptingSubmission - Accepting Submission of the Recommendation Letters
####################################

TODO:
1) configFileFolderIdFellApp - used in RecLetterUtil (importSheetsFromGoogleDriveFolder, importLetterFromGoogleDriveFolder)
and TestController(googleDriveAction)
replaced by $folderIdRecSpreadsheet and $folderIdRecUploads

2a) new $recSpreadsheetFolderId (in GoogleFormConfig) - Google folder ID for recommendation letters Spreadsheet
2b) new $recUploadsFolderId (in GoogleFormConfig) - Google folder ID for recommendation letters upload

3) new $fellappRecLetterUrl (GoogleFormConfig) - the web app url from deployment GAS, send by email in inviteSingleReferenceToSubmitLetter
add to html edit

4) felSpreadsheetFolderId, felUploadsFolderId, felTemplateFileId, felBackupTemplateFileId
backupFileIdFellApp => felBackupTemplateFileId
templateIdFellApp => felTemplateFileId (nothing to do)
folderIdFellApp => felSpreadsheetFolderId (nothing to do)


<script>
     const query = new URLSearchParams(window.location.search);
     console.log("query="+query);
     location.href = "https://script.google.com/macros/s/AKfycbzQeo29i4BVGbSHXnwAZ3DQsXs6jd9eCUhJ59Gj8dmRQ06QuRhArPVZ9ZGdXugAmF9X/exec?" + query.toString();
</script>

<script>
    var loc1 = window.location.toString();
     console.log("loc1="+loc1);
     var loc2 = window.parent.location.toString();
     console.log("loc2="+loc2);
</script>

<script>
var url = getParentUrl();
console.log("url="+url);
function getParentUrl() {
    var isInIframe = (parent !== window),
        parentUrl = null;

    if (isInIframe) {
        parentUrl = document.referrer;
    }

    return parentUrl;
}
</script>

