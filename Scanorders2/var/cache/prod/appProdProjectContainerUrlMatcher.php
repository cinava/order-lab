<?php

use Symfony\Component\Routing\Exception\MethodNotAllowedException;
use Symfony\Component\Routing\Exception\ResourceNotFoundException;
use Symfony\Component\Routing\RequestContext;

/**
 * appProdProjectContainerUrlMatcher.
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appProdProjectContainerUrlMatcher extends Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher
{
    /**
     * Constructor.
     */
    public function __construct(RequestContext $context)
    {
        $this->context = $context;
    }

    public function match($pathinfo)
    {
        $allow = array();
        $pathinfo = rawurldecode($pathinfo);
        $trimmedPathinfo = rtrim($pathinfo, '/');
        $context = $this->context;
        $request = $this->request;
        $requestMethod = $canonicalMethod = $context->getMethod();
        $scheme = $context->getScheme();

        if ('HEAD' === $requestMethod) {
            $canonicalMethod = 'GET';
        }


        // main_common_home
        if ('' === $trimmedPathinfo) {
            if (substr($pathinfo, -1) !== '/') {
                return $this->redirect($pathinfo.'/', 'main_common_home');
            }

            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\HomeController::mainCommonHomeAction',  '_route' => 'main_common_home',);
        }

        // main_under_construction
        if ('/under-construction' === $pathinfo) {
            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\HomeController::underConstructionAction',  '_route' => 'main_under_construction',);
        }

        if (0 === strpos($pathinfo, '/deidentifier')) {
            // deidentifier_about_page
            if ('/deidentifier/about' === $pathinfo) {
                return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DefaultController::aboutAction',  '_route' => 'deidentifier_about_page',);
            }

            // deidentifier_navbar
            if (0 === strpos($pathinfo, '/deidentifier/navbar') && preg_match('#^/deidentifier/navbar/(?P<accessionTypeStr>[^/]++)/(?P<accessionTypeId>[^/]++)/(?P<accessionNumber>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_navbar;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_navbar')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DefaultController::deidentifierNavbarAction',));
            }
            not_deidentifier_navbar:

            // deidentifier_home
            if ('/deidentifier' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_home;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'deidentifier_home');
                }

                return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DefaultController::indexAction',  '_route' => 'deidentifier_home',);
            }
            not_deidentifier_home:

            // deidentifier_search
            if ('/deidentifier/re-identify' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_search;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'deidentifier_search');
                }

                return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DefaultController::searchAction',  '_route' => 'deidentifier_search',);
            }
            not_deidentifier_search:

            // deidentifier_authorization_remove
            if (0 === strpos($pathinfo, '/deidentifier/revoke-access-authorization') && preg_match('#^/deidentifier/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_authorization_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_authorization_remove')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::authorizationRemoveAction',));
            }
            not_deidentifier_authorization_remove:

            // deidentifier_generate
            if ('/deidentifier/generate' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_generate;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'deidentifier_generate');
                }

                return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DefaultController::generateAction',  '_route' => 'deidentifier_generate',);
            }
            not_deidentifier_generate:

            if (0 === strpos($pathinfo, '/deidentifier/a')) {
                if (0 === strpos($pathinfo, '/deidentifier/access-requests')) {
                    if (0 === strpos($pathinfo, '/deidentifier/access-requests/new')) {
                        // deidentifier_access_request_new_plain
                        if ('/deidentifier/access-requests/new/create' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_deidentifier_access_request_new_plain;
                            }

                            return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestCreatePlainAction',  '_route' => 'deidentifier_access_request_new_plain',);
                        }
                        not_deidentifier_access_request_new_plain:

                        // deidentifier_access_request_new
                        if ('/deidentifier/access-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_deidentifier_access_request_new;
                            }

                            return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestCreateAction',  '_route' => 'deidentifier_access_request_new',);
                        }
                        not_deidentifier_access_request_new:

                        // deidentifier_access_request_create
                        if ('/deidentifier/access-requests/new/pending' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_deidentifier_access_request_create;
                            }

                            return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestAction',  '_route' => 'deidentifier_access_request_create',);
                        }
                        not_deidentifier_access_request_create:

                    }

                    // deidentifier_accessrequest_list
                    if ('/deidentifier/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_deidentifier_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestIndexAction',  '_route' => 'deidentifier_accessrequest_list',);
                    }
                    not_deidentifier_accessrequest_list:

                    // deidentifier_accessrequest_change
                    if (0 === strpos($pathinfo, '/deidentifier/access-requests/change-status') && preg_match('#^/deidentifier/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_deidentifier_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_accessrequest_change')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestChangeAction',));
                    }
                    not_deidentifier_accessrequest_change:

                    // deidentifier_accessrequest_management
                    if (preg_match('#^/deidentifier/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_deidentifier_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_accessrequest_management')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestManagementAction',));
                    }
                    not_deidentifier_accessrequest_management:

                    // deidentifier_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/deidentifier/access-requests/submit') && preg_match('#^/deidentifier/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_deidentifier_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_deidentifier_accessrequest_management_submit:

                }

                elseif (0 === strpos($pathinfo, '/deidentifier/account-requests')) {
                    if (0 === strpos($pathinfo, '/deidentifier/account-requests/new')) {
                        // deidentifier_accountrequest_new
                        if ('/deidentifier/account-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_deidentifier_accountrequest_new;
                            }

                            return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserRequestController::newAction',  '_route' => 'deidentifier_accountrequest_new',);
                        }
                        not_deidentifier_accountrequest_new:

                        // deidentifier_accountrequest_create
                        if ('/deidentifier/account-requests/new' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_deidentifier_accountrequest_create;
                            }

                            return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserRequestController::createAction',  '_route' => 'deidentifier_accountrequest_create',);
                        }
                        not_deidentifier_accountrequest_create:

                    }

                    // deidentifier_accountrequest
                    if ('/deidentifier/account-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_deidentifier_accountrequest;
                        }

                        return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserRequestController::indexAction',  '_route' => 'deidentifier_accountrequest',);
                    }
                    not_deidentifier_accountrequest:

                    // deidentifier_accountrequest_status
                    if (preg_match('#^/deidentifier/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_deidentifier_accountrequest_status;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_accountrequest_status')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserRequestController::statusAction',));
                    }
                    not_deidentifier_accountrequest_status:

                    // deidentifier_accountrequest_approve
                    if ('/deidentifier/account-requests-approve' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_deidentifier_accountrequest_approve;
                        }

                        return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserRequestController::approveUserAccountRequestAction',  '_route' => 'deidentifier_accountrequest_approve',);
                    }
                    not_deidentifier_accountrequest_approve:

                }

                // deidentifier_authorized_users
                if ('/deidentifier/authorized-users' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_authorized_users;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'deidentifier_authorized_users');
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::authorizedUsersAction',  '_route' => 'deidentifier_authorized_users',);
                }
                not_deidentifier_authorized_users:

                if (0 === strpos($pathinfo, '/deidentifier/authorization-user-manager')) {
                    // deidentifier_authorization_user_management
                    if (preg_match('#^/deidentifier/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_deidentifier_authorization_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_authorization_user_management')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::authorizationManagementAction',));
                    }
                    not_deidentifier_authorization_user_management:

                    // deidentifier_authorization_user_management_submit
                    if (0 === strpos($pathinfo, '/deidentifier/authorization-user-manager/submit') && preg_match('#^/deidentifier/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_deidentifier_authorization_user_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::authorizationManagementSubmitAction',));
                    }
                    not_deidentifier_authorization_user_management_submit:

                }

                // deidentifier_add_authorized_user
                if ('/deidentifier/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'deidentifier_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::addAuthorizedUserAction',  '_route' => 'deidentifier_add_authorized_user',);
                }
                not_deidentifier_add_authorized_user:

            }

            // deidentifier_accessrequest_remove
            if (0 === strpos($pathinfo, '/deidentifier/deny-access-request') && preg_match('#^/deidentifier/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_accessrequest_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_accessrequest_remove')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierAccessRequestController::accessRequestRemoveAction',));
            }
            not_deidentifier_accessrequest_remove:

            if (0 === strpos($pathinfo, '/deidentifier/event-log')) {
                // deidentifier_logger
                if ('/deidentifier/event-log' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_logger;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'deidentifier_logger');
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierLoggerController::indexAction',  '_route' => 'deidentifier_logger',);
                }
                not_deidentifier_logger:

                // deidentifier_logger_user_all
                if (0 === strpos($pathinfo, '/deidentifier/event-log/user') && preg_match('#^/deidentifier/event\\-log/user/(?P<id>[^/]++)/all$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_logger_user_all;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_logger_user_all')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierLoggerController::getAuditLogAllAction',));
                }
                not_deidentifier_logger_user_all:

                // deidentifier_generation_log
                if ('/deidentifier/event-log/generation-log' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_generation_log;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'deidentifier_generation_log');
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierLoggerController::generationLogAction',  '_route' => 'deidentifier_generation_log',);
                }
                not_deidentifier_generation_log:

                // deidentifier_my_generation_log
                if ('/deidentifier/event-log/event-log-per-user-per-event-type' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_my_generation_log;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'deidentifier_my_generation_log');
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierLoggerController::myGenerationLogAction',  '_route' => 'deidentifier_my_generation_log',);
                }
                not_deidentifier_my_generation_log:

            }

            elseif (0 === strpos($pathinfo, '/deidentifier/edit-user-profile')) {
                // deidentifier_user_edit
                if (preg_match('#^/deidentifier/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_user_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_user_edit')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserController::editUserAction',));
                }
                not_deidentifier_user_edit:

                // deidentifier_user_update
                if (preg_match('#^/deidentifier/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_deidentifier_user_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_user_update')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserController::updateUserAction',));
                }
                not_deidentifier_user_update:

            }

            elseif (0 === strpos($pathinfo, '/deidentifier/login')) {
                // deidentifier_login
                if ('/deidentifier/login' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_login;
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSecurityController::loginAction',  '_route' => 'deidentifier_login',);
                }
                not_deidentifier_login:

                // deidentifier_login_check
                if ('/deidentifier/login_check' === $pathinfo) {
                    return array('_route' => 'deidentifier_login_check');
                }

            }

            // deidentifier_logout
            if ('/deidentifier/logout' === $pathinfo) {
                return array('_route' => 'deidentifier_logout');
            }

            // deidentifier_setloginvisit
            if ('/deidentifier/setloginvisit' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_setloginvisit;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'deidentifier_setloginvisit');
                }

                return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSecurityController::setAjaxLoginVisit',  '_route' => 'deidentifier_setloginvisit',);
            }
            not_deidentifier_setloginvisit:

            if (0 === strpos($pathinfo, '/deidentifier/settings')) {
                // deidentifier_siteparameters
                if ('/deidentifier/settings' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_siteparameters;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'deidentifier_siteparameters');
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSiteParametersController::indexAction',  '_route' => 'deidentifier_siteparameters',);
                }
                not_deidentifier_siteparameters:

                // deidentifier_siteparameters_edit
                if (preg_match('#^/deidentifier/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_siteparameters_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_siteparameters_edit')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSiteParametersController::editAction',));
                }
                not_deidentifier_siteparameters_edit:

                // deidentifier_siteparameters_update
                if (preg_match('#^/deidentifier/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_deidentifier_siteparameters_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_siteparameters_update')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSiteParametersController::updateAction',));
                }
                not_deidentifier_siteparameters_update:

            }

            // deidentifier-nopermission
            if ('/deidentifier/no-permission' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifiernopermission;
                }

                return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSecurityController::actionNoPermission',  '_route' => 'deidentifier-nopermission',);
            }
            not_deidentifiernopermission:

            if (0 === strpos($pathinfo, '/deidentifier/idlelogout')) {
                // deidentifier_idlelogout
                if ('/deidentifier/idlelogout' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSecurityController::idlelogoutAction',  '_route' => 'deidentifier_idlelogout',);
                }

                // deidentifier_idlelogout-saveorder
                if (preg_match('#^/deidentifier/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierSecurityController::idlelogoutAction',));
                }

            }

            elseif (0 === strpos($pathinfo, '/deidentifier/file-')) {
                // deidentifier_file_delete
                if ('/deidentifier/file-delete' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'DELETE'));
                        goto not_deidentifier_file_delete;
                    }

                    return array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUploadController::deleteFileAction',  '_route' => 'deidentifier_file_delete',);
                }
                not_deidentifier_file_delete:

                // deidentifier_file_download
                if (0 === strpos($pathinfo, '/deidentifier/file-download') && preg_match('#^/deidentifier/file\\-download/(?P<id>\\d+)(?:/(?P<eventtype>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_file_download;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_file_download')), array (  'eventtype' => NULL,  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUploadController::downloadFileAction',));
                }
                not_deidentifier_file_download:

                // deidentifier_file_view
                if (0 === strpos($pathinfo, '/deidentifier/file-view') && preg_match('#^/deidentifier/file\\-view/(?P<id>\\d+)(?:/(?P<viewType>[^/]++)(?:/(?P<eventtype>[^/]++))?)?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_deidentifier_file_view;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_file_view')), array (  'eventtype' => NULL,  'viewType' => NULL,  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUploadController::viewFileAction',));
                }
                not_deidentifier_file_view:

            }

            // deidentifier_showuser
            if (0 === strpos($pathinfo, '/deidentifier/user') && preg_match('#^/deidentifier/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_deidentifier_showuser;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'deidentifier_showuser')), array (  '_controller' => 'Oleg\\DeidentifierBundle\\Controller\\DeidentifierUserController::showUserOptimizedAction',));
            }
            not_deidentifier_showuser:

        }

        elseif (0 === strpos($pathinfo, '/directory')) {
            if (0 === strpos($pathinfo, '/directory/a')) {
                if (0 === strpos($pathinfo, '/directory/access-requests')) {
                    if (0 === strpos($pathinfo, '/directory/access-requests/new')) {
                        // employees_access_request_new_plain
                        if ('/directory/access-requests/new/create' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_access_request_new_plain;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestCreatePlainAction',  '_route' => 'employees_access_request_new_plain',);
                        }
                        not_employees_access_request_new_plain:

                        // employees_access_request_new
                        if ('/directory/access-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_access_request_new;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestCreateAction',  '_route' => 'employees_access_request_new',);
                        }
                        not_employees_access_request_new:

                        // employees_access_request_create
                        if ('/directory/access-requests/new/pending' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_employees_access_request_create;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestAction',  '_route' => 'employees_access_request_create',);
                        }
                        not_employees_access_request_create:

                    }

                    // employees_accessrequest_list
                    if ('/directory/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestIndexAction',  '_route' => 'employees_accessrequest_list',);
                    }
                    not_employees_accessrequest_list:

                    // employees_accessrequest_change
                    if (0 === strpos($pathinfo, '/directory/access-requests/change-status') && preg_match('#^/directory/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accessrequest_change')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestChangeAction',));
                    }
                    not_employees_accessrequest_change:

                    // employees_accessrequest_management
                    if (preg_match('#^/directory/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accessrequest_management')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestManagementAction',));
                    }
                    not_employees_accessrequest_management:

                    // employees_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/directory/access-requests/submit') && preg_match('#^/directory/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_employees_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_employees_accessrequest_management_submit:

                }

                elseif (0 === strpos($pathinfo, '/directory/auth')) {
                    if (0 === strpos($pathinfo, '/directory/authorization-user-manager')) {
                        // employees_authorization_user_management
                        if (preg_match('#^/directory/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_authorization_user_management;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_authorization_user_management')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::authorizationManagementAction',));
                        }
                        not_employees_authorization_user_management:

                        // employees_authorization_user_management_submit
                        if (0 === strpos($pathinfo, '/directory/authorization-user-manager/submit') && preg_match('#^/directory/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_employees_authorization_user_management_submit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::authorizationManagementSubmitAction',));
                        }
                        not_employees_authorization_user_management_submit:

                    }

                    // employees_authorized_users
                    if ('/directory/authorized-users' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_authorized_users;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_authorized_users');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::authorizedUsersAction',  '_route' => 'employees_authorized_users',);
                    }
                    not_employees_authorized_users:

                    // employees_authenticate_user
                    if ('/directory/authenticate-user' === $trimmedPathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_employees_authenticate_user;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_authenticate_user');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::authenticateUserAction',  '_route' => 'employees_authenticate_user',);
                    }
                    not_employees_authenticate_user:

                }

                // employees_add_authorized_user
                if ('/directory/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::addAuthorizedUserAction',  '_route' => 'employees_add_authorized_user',);
                }
                not_employees_add_authorized_user:

                if (0 === strpos($pathinfo, '/directory/admin')) {
                    // first-time-login-generation-init
                    if ('/directory/admin/first-time-login-generation-init' === $trimmedPathinfo) {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'first-time-login-generation-init');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::firstTimeLoginGenerationAction',  '_route' => 'first-time-login-generation-init',);
                    }

                    // user_update_system_cache_assets
                    if ('/directory/admin/update-system-cache-assets' === $trimmedPathinfo) {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'user_update_system_cache_assets');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::updateSystemAction',  '_route' => 'user_update_system_cache_assets',);
                    }

                    if (0 === strpos($pathinfo, '/directory/admin/list')) {
                        // user_admin_index
                        if ('/directory/admin/lists' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_user_admin_index;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'user_admin_index');
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::indexAction',  '_route' => 'user_admin_index',);
                        }
                        not_user_admin_index:

                        if (0 === strpos($pathinfo, '/directory/admin/list-manager')) {
                            // user_populate_platform_list_manager
                            if ('/directory/admin/list-manager-populate' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_user_populate_platform_list_manager;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'user_populate_platform_list_manager');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generatePlatformListManagerList',  '_route' => 'user_populate_platform_list_manager',);
                            }
                            not_user_populate_platform_list_manager:

                            // platformlistmanager-list
                            if ('/directory/admin/list-manager' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_platformlistmanagerlist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'platformlistmanager-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'platformlistmanager-list',);
                            }
                            not_platformlistmanagerlist:

                            // platformlistmanager_show
                            if (preg_match('#^/directory/admin/list\\-manager/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_platformlistmanager_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'platformlistmanager_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_platformlistmanager_show:

                            // platformlistmanager_edit
                            if (preg_match('#^/directory/admin/list\\-manager/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_platformlistmanager_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'platformlistmanager_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_platformlistmanager_edit:

                            // platformlistmanager_update
                            if (preg_match('#^/directory/admin/list\\-manager/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_platformlistmanager_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'platformlistmanager_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_platformlistmanager_update:

                            // platformlistmanager_delete
                            if (preg_match('#^/directory/admin/list\\-manager/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_platformlistmanager_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'platformlistmanager_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_platformlistmanager_delete:

                            if (0 === strpos($pathinfo, '/directory/admin/list-manager/id')) {
                                // platform_list_manager
                                if (preg_match('#^/directory/admin/list\\-manager/id/(?P<listId>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_platform_list_manager;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_list_manager')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::platformListManagerAction',));
                                }
                                not_platform_list_manager:

                                // platform_list_manager_element
                                if (preg_match('#^/directory/admin/list\\-manager/id/(?P<linkToListId>[^/]++)/(?P<entityId>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_platform_list_manager_element;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'platform_list_manager_element')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::platformElementManagerRootElementAction',));
                                }
                                not_platform_list_manager_element:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/institution')) {
                            // employees_tree_institutiontree_list
                            if ('/directory/admin/list/institutional-tree' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_tree_institutiontree_list;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_tree_institutiontree_list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::institutionTreeAction',  '_route' => 'employees_tree_institutiontree_list',);
                            }
                            not_employees_tree_institutiontree_list:

                            if (0 === strpos($pathinfo, '/directory/admin/list/institutions')) {
                                // institutions-list
                                if ('/directory/admin/list/institutions' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutionslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'institutions-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'institutions-list',);
                                }
                                not_institutionslist:

                                // institutions_create
                                if ('/directory/admin/list/institutions/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_institutions_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'institutions_create',);
                                }
                                not_institutions_create:

                                // institutions_new
                                if ('/directory/admin/list/institutions/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutions_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'institutions_new',);
                                }
                                not_institutions_new:

                                // institutions_show
                                if (preg_match('#^/directory/admin/list/institutions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutions_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutions_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_institutions_show:

                                // institutions_edit
                                if (preg_match('#^/directory/admin/list/institutions/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutions_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutions_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_institutions_edit:

                                // institutions_update
                                if (preg_match('#^/directory/admin/list/institutions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_institutions_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutions_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_institutions_update:

                                // institutions_delete
                                if (preg_match('#^/directory/admin/list/institutions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_institutions_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutions_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_institutions_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/institution-types')) {
                                // institutiontypes-list
                                if ('/directory/admin/list/institution-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutiontypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'institutiontypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'institutiontypes-list',);
                                }
                                not_institutiontypeslist:

                                // institutiontypes_create
                                if ('/directory/admin/list/institution-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_institutiontypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'institutiontypes_create',);
                                }
                                not_institutiontypes_create:

                                // institutiontypes_new
                                if ('/directory/admin/list/institution-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutiontypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'institutiontypes_new',);
                                }
                                not_institutiontypes_new:

                                // institutiontypes_show
                                if (preg_match('#^/directory/admin/list/institution\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutiontypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutiontypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_institutiontypes_show:

                                // institutiontypes_edit
                                if (preg_match('#^/directory/admin/list/institution\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_institutiontypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutiontypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_institutiontypes_edit:

                                // institutiontypes_update
                                if (preg_match('#^/directory/admin/list/institution\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_institutiontypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutiontypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_institutiontypes_update:

                                // institutiontypes_delete
                                if (preg_match('#^/directory/admin/list/institution\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_institutiontypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'institutiontypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_institutiontypes_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/identifier-types')) {
                            // identifiers-list
                            if ('/directory/admin/list/identifier-types' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_identifierslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'identifiers-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'identifiers-list',);
                            }
                            not_identifierslist:

                            // identifiers_create
                            if ('/directory/admin/list/identifier-types/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_identifiers_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'identifiers_create',);
                            }
                            not_identifiers_create:

                            // identifiers_new
                            if ('/directory/admin/list/identifier-types/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_identifiers_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'identifiers_new',);
                            }
                            not_identifiers_new:

                            // identifiers_show
                            if (preg_match('#^/directory/admin/list/identifier\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_identifiers_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'identifiers_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_identifiers_show:

                            // identifiers_edit
                            if (preg_match('#^/directory/admin/list/identifier\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_identifiers_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'identifiers_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_identifiers_edit:

                            // identifiers_update
                            if (preg_match('#^/directory/admin/list/identifier\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_identifiers_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'identifiers_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_identifiers_update:

                            // identifiers_delete
                            if (preg_match('#^/directory/admin/list/identifier\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_identifiers_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'identifiers_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_identifiers_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/c')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/co')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/com')) {
                                    // employees_tree_commenttree_list
                                    if ('/directory/admin/list/comment-tree' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_employees_tree_commenttree_list;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'employees_tree_commenttree_list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::institutionTreeAction',  '_route' => 'employees_tree_commenttree_list',);
                                    }
                                    not_employees_tree_commenttree_list:

                                    if (0 === strpos($pathinfo, '/directory/admin/list/comment-types')) {
                                        // commenttypes-list
                                        if ('/directory/admin/list/comment-types' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_commenttypeslist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'commenttypes-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'commenttypes-list',);
                                        }
                                        not_commenttypeslist:

                                        // commenttypes_createt
                                        if ('/directory/admin/list/comment-types/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_commenttypes_createt;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'commenttypes_createt',);
                                        }
                                        not_commenttypes_createt:

                                        // commenttypes_new
                                        if ('/directory/admin/list/comment-types/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_commenttypes_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'commenttypes_new',);
                                        }
                                        not_commenttypes_new:

                                        // commenttypes_show
                                        if (preg_match('#^/directory/admin/list/comment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_commenttypes_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'commenttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                        }
                                        not_commenttypes_show:

                                        // commenttypes_edit
                                        if (preg_match('#^/directory/admin/list/comment\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_commenttypes_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'commenttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                        }
                                        not_commenttypes_edit:

                                        // commenttypes_update
                                        if (preg_match('#^/directory/admin/list/comment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_commenttypes_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'commenttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                        }
                                        not_commenttypes_update:

                                        // commenttypes_delete
                                        if (preg_match('#^/directory/admin/list/comment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_commenttypes_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'commenttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                        }
                                        not_commenttypes_delete:

                                    }

                                    elseif (0 === strpos($pathinfo, '/directory/admin/list/complex-platelet-summary-antibodies')) {
                                        // complexplateletsummaryantibodies-list
                                        if ('/directory/admin/list/complex-platelet-summary-antibodies' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_complexplateletsummaryantibodieslist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'complexplateletsummaryantibodies-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'complexplateletsummaryantibodies-list',);
                                        }
                                        not_complexplateletsummaryantibodieslist:

                                        // complexplateletsummaryantibodies_create
                                        if ('/directory/admin/list/complex-platelet-summary-antibodies/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_complexplateletsummaryantibodies_create;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'complexplateletsummaryantibodies_create',);
                                        }
                                        not_complexplateletsummaryantibodies_create:

                                        // complexplateletsummaryantibodies_new
                                        if ('/directory/admin/list/complex-platelet-summary-antibodies/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_complexplateletsummaryantibodies_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'complexplateletsummaryantibodies_new',);
                                        }
                                        not_complexplateletsummaryantibodies_new:

                                        // complexplateletsummaryantibodies_show
                                        if (preg_match('#^/directory/admin/list/complex\\-platelet\\-summary\\-antibodies/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_complexplateletsummaryantibodies_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'complexplateletsummaryantibodies_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                        }
                                        not_complexplateletsummaryantibodies_show:

                                        // complexplateletsummaryantibodies_edit
                                        if (preg_match('#^/directory/admin/list/complex\\-platelet\\-summary\\-antibodies/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_complexplateletsummaryantibodies_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'complexplateletsummaryantibodies_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                        }
                                        not_complexplateletsummaryantibodies_edit:

                                        // complexplateletsummaryantibodies_update
                                        if (preg_match('#^/directory/admin/list/complex\\-platelet\\-summary\\-antibodies/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_complexplateletsummaryantibodies_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'complexplateletsummaryantibodies_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                        }
                                        not_complexplateletsummaryantibodies_update:

                                        // complexplateletsummaryantibodies_delete
                                        if (preg_match('#^/directory/admin/list/complex\\-platelet\\-summary\\-antibodies/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_complexplateletsummaryantibodies_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'complexplateletsummaryantibodies_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                        }
                                        not_complexplateletsummaryantibodies_delete:

                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/countries')) {
                                    // countries-list
                                    if ('/directory/admin/list/countries' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_countrieslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'countries-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'countries-list',);
                                    }
                                    not_countrieslist:

                                    // countries_create
                                    if ('/directory/admin/list/countries/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_countries_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'countries_create',);
                                    }
                                    not_countries_create:

                                    // countries_new
                                    if ('/directory/admin/list/countries/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_countries_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'countries_new',);
                                    }
                                    not_countries_new:

                                    // countries_show
                                    if (preg_match('#^/directory/admin/list/countries/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_countries_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'countries_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_countries_show:

                                    // countries_edit
                                    if (preg_match('#^/directory/admin/list/countries/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_countries_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'countries_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_countries_edit:

                                    // countries_update
                                    if (preg_match('#^/directory/admin/list/countries/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_countries_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'countries_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_countries_update:

                                    // countries_delete
                                    if (preg_match('#^/directory/admin/list/countries/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_countries_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'countries_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_countries_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/collaborations')) {
                                    // collaborations-list
                                    if ('/directory/admin/list/collaborations' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborationslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'collaborations-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'collaborations-list',);
                                    }
                                    not_collaborationslist:

                                    // collaborations_create
                                    if ('/directory/admin/list/collaborations/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_collaborations_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'collaborations_create',);
                                    }
                                    not_collaborations_create:

                                    // collaborations_new
                                    if ('/directory/admin/list/collaborations/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborations_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'collaborations_new',);
                                    }
                                    not_collaborations_new:

                                    // collaborations_show
                                    if (preg_match('#^/directory/admin/list/collaborations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborations_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborations_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_collaborations_show:

                                    // collaborations_edit
                                    if (preg_match('#^/directory/admin/list/collaborations/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborations_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborations_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_collaborations_edit:

                                    // collaborations_update
                                    if (preg_match('#^/directory/admin/list/collaborations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_collaborations_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborations_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_collaborations_update:

                                    // collaborations_delete
                                    if (preg_match('#^/directory/admin/list/collaborations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_collaborations_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborations_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_collaborations_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/collaboration-types')) {
                                    // collaborationtypes-list
                                    if ('/directory/admin/list/collaboration-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborationtypeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'collaborationtypes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'collaborationtypes-list',);
                                    }
                                    not_collaborationtypeslist:

                                    // collaborationtypes_create
                                    if ('/directory/admin/list/collaboration-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_collaborationtypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'collaborationtypes_create',);
                                    }
                                    not_collaborationtypes_create:

                                    // collaborationtypes_new
                                    if ('/directory/admin/list/collaboration-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborationtypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'collaborationtypes_new',);
                                    }
                                    not_collaborationtypes_new:

                                    // collaborationtypes_show
                                    if (preg_match('#^/directory/admin/list/collaboration\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborationtypes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborationtypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_collaborationtypes_show:

                                    // collaborationtypes_edit
                                    if (preg_match('#^/directory/admin/list/collaboration\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_collaborationtypes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborationtypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_collaborationtypes_edit:

                                    // collaborationtypes_update
                                    if (preg_match('#^/directory/admin/list/collaboration\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_collaborationtypes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborationtypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_collaborationtypes_update:

                                    // collaborationtypes_delete
                                    if (preg_match('#^/directory/admin/list/collaboration\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_collaborationtypes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'collaborationtypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_collaborationtypes_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/cities')) {
                                // cities-list
                                if ('/directory/admin/list/cities' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_citieslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'cities-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'cities-list',);
                                }
                                not_citieslist:

                                // cities_create
                                if ('/directory/admin/list/cities/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_cities_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'cities_create',);
                                }
                                not_cities_create:

                                // cities_new
                                if ('/directory/admin/list/cities/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cities_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'cities_new',);
                                }
                                not_cities_new:

                                // cities_show
                                if (preg_match('#^/directory/admin/list/cities/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cities_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cities_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_cities_show:

                                // cities_edit
                                if (preg_match('#^/directory/admin/list/cities/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cities_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cities_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_cities_edit:

                                // cities_update
                                if (preg_match('#^/directory/admin/list/cities/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_cities_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cities_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_cities_update:

                                // cities_delete
                                if (preg_match('#^/directory/admin/list/cities/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_cities_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cities_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_cities_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/certifying-board-organizations')) {
                                // certifyingboardorganizations-list
                                if ('/directory/admin/list/certifying-board-organizations' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_certifyingboardorganizationslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'certifyingboardorganizations-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'certifyingboardorganizations-list',);
                                }
                                not_certifyingboardorganizationslist:

                                // certifyingboardorganizations_create
                                if ('/directory/admin/list/certifying-board-organizations/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_certifyingboardorganizations_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'certifyingboardorganizations_create',);
                                }
                                not_certifyingboardorganizations_create:

                                // certifyingboardorganizations_new
                                if ('/directory/admin/list/certifying-board-organizations/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_certifyingboardorganizations_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'certifyingboardorganizations_new',);
                                }
                                not_certifyingboardorganizations_new:

                                // certifyingboardorganizations_show
                                if (preg_match('#^/directory/admin/list/certifying\\-board\\-organizations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_certifyingboardorganizations_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'certifyingboardorganizations_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_certifyingboardorganizations_show:

                                // certifyingboardorganizations_edit
                                if (preg_match('#^/directory/admin/list/certifying\\-board\\-organizations/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_certifyingboardorganizations_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'certifyingboardorganizations_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_certifyingboardorganizations_edit:

                                // certifyingboardorganizations_update
                                if (preg_match('#^/directory/admin/list/certifying\\-board\\-organizations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_certifyingboardorganizations_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'certifyingboardorganizations_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_certifyingboardorganizations_update:

                                // certifyingboardorganizations_delete
                                if (preg_match('#^/directory/admin/list/certifying\\-board\\-organizations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_certifyingboardorganizations_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'certifyingboardorganizations_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_certifyingboardorganizations_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/cci-unit-platelet-count-default-values')) {
                                // cciunitplateletcountdefaultvalues-list
                                if ('/directory/admin/list/cci-unit-platelet-count-default-values' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciunitplateletcountdefaultvalueslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'cciunitplateletcountdefaultvalues-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'cciunitplateletcountdefaultvalues-list',);
                                }
                                not_cciunitplateletcountdefaultvalueslist:

                                // cciunitplateletcountdefaultvalues_create
                                if ('/directory/admin/list/cci-unit-platelet-count-default-values/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_cciunitplateletcountdefaultvalues_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'cciunitplateletcountdefaultvalues_create',);
                                }
                                not_cciunitplateletcountdefaultvalues_create:

                                // cciunitplateletcountdefaultvalues_new
                                if ('/directory/admin/list/cci-unit-platelet-count-default-values/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciunitplateletcountdefaultvalues_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'cciunitplateletcountdefaultvalues_new',);
                                }
                                not_cciunitplateletcountdefaultvalues_new:

                                // cciunitplateletcountdefaultvalues_show
                                if (preg_match('#^/directory/admin/list/cci\\-unit\\-platelet\\-count\\-default\\-values/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciunitplateletcountdefaultvalues_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciunitplateletcountdefaultvalues_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_cciunitplateletcountdefaultvalues_show:

                                // cciunitplateletcountdefaultvalues_edit
                                if (preg_match('#^/directory/admin/list/cci\\-unit\\-platelet\\-count\\-default\\-values/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciunitplateletcountdefaultvalues_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciunitplateletcountdefaultvalues_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_cciunitplateletcountdefaultvalues_edit:

                                // cciunitplateletcountdefaultvalues_update
                                if (preg_match('#^/directory/admin/list/cci\\-unit\\-platelet\\-count\\-default\\-values/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_cciunitplateletcountdefaultvalues_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciunitplateletcountdefaultvalues_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_cciunitplateletcountdefaultvalues_update:

                                // cciunitplateletcountdefaultvalues_delete
                                if (preg_match('#^/directory/admin/list/cci\\-unit\\-platelet\\-count\\-default\\-values/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_cciunitplateletcountdefaultvalues_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciunitplateletcountdefaultvalues_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_cciunitplateletcountdefaultvalues_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/cci-platelet-type-transfused')) {
                                // cciplatelettypetransfuseds-list
                                if ('/directory/admin/list/cci-platelet-type-transfused' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciplatelettypetransfusedslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'cciplatelettypetransfuseds-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'cciplatelettypetransfuseds-list',);
                                }
                                not_cciplatelettypetransfusedslist:

                                // cciplatelettypetransfuseds_create
                                if ('/directory/admin/list/cci-platelet-type-transfused/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_cciplatelettypetransfuseds_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'cciplatelettypetransfuseds_create',);
                                }
                                not_cciplatelettypetransfuseds_create:

                                // cciplatelettypetransfuseds_new
                                if ('/directory/admin/list/cci-platelet-type-transfused/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciplatelettypetransfuseds_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'cciplatelettypetransfuseds_new',);
                                }
                                not_cciplatelettypetransfuseds_new:

                                // cciplatelettypetransfuseds_show
                                if (preg_match('#^/directory/admin/list/cci\\-platelet\\-type\\-transfused/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciplatelettypetransfuseds_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciplatelettypetransfuseds_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_cciplatelettypetransfuseds_show:

                                // cciplatelettypetransfuseds_edit
                                if (preg_match('#^/directory/admin/list/cci\\-platelet\\-type\\-transfused/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_cciplatelettypetransfuseds_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciplatelettypetransfuseds_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_cciplatelettypetransfuseds_edit:

                                // cciplatelettypetransfuseds_update
                                if (preg_match('#^/directory/admin/list/cci\\-platelet\\-type\\-transfused/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_cciplatelettypetransfuseds_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciplatelettypetransfuseds_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_cciplatelettypetransfuseds_update:

                                // cciplatelettypetransfuseds_delete
                                if (preg_match('#^/directory/admin/list/cci\\-platelet\\-type\\-transfused/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_cciplatelettypetransfuseds_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'cciplatelettypetransfuseds_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_cciplatelettypetransfuseds_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/clerical-errors')) {
                                // clericalerrors-list
                                if ('/directory/admin/list/clerical-errors' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_clericalerrorslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'clericalerrors-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'clericalerrors-list',);
                                }
                                not_clericalerrorslist:

                                // clericalerrors_create
                                if ('/directory/admin/list/clerical-errors/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_clericalerrors_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'clericalerrors_create',);
                                }
                                not_clericalerrors_create:

                                // clericalerrors_new
                                if ('/directory/admin/list/clerical-errors/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_clericalerrors_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'clericalerrors_new',);
                                }
                                not_clericalerrors_new:

                                // clericalerrors_show
                                if (preg_match('#^/directory/admin/list/clerical\\-errors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_clericalerrors_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'clericalerrors_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_clericalerrors_show:

                                // clericalerrors_edit
                                if (preg_match('#^/directory/admin/list/clerical\\-errors/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_clericalerrors_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'clericalerrors_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_clericalerrors_edit:

                                // clericalerrors_update
                                if (preg_match('#^/directory/admin/list/clerical\\-errors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_clericalerrors_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'clericalerrors_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_clericalerrors_update:

                                // clericalerrors_delete
                                if (preg_match('#^/directory/admin/list/clerical\\-errors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_clericalerrors_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'clericalerrors_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_clericalerrors_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/f')) {
                            // employees_tree_formnode_list
                            if ('/directory/admin/list/form-tree' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_tree_formnode_list;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_tree_formnode_list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::institutionTreeAction',  '_route' => 'employees_tree_formnode_list',);
                            }
                            not_employees_tree_formnode_list:

                            if (0 === strpos($pathinfo, '/directory/admin/list/form-nodes')) {
                                // formnodes-list
                                if ('/directory/admin/list/form-nodes' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_formnodeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'formnodes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'formnodes-list',);
                                }
                                not_formnodeslist:

                                // formnodes_create
                                if ('/directory/admin/list/form-nodes/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_formnodes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'formnodes_create',);
                                }
                                not_formnodes_create:

                                // formnodes_new
                                if ('/directory/admin/list/form-nodes/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_formnodes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'formnodes_new',);
                                }
                                not_formnodes_new:

                                // formnodes_show
                                if (preg_match('#^/directory/admin/list/form\\-nodes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_formnodes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formnodes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_formnodes_show:

                                // formnodes_edit
                                if (preg_match('#^/directory/admin/list/form\\-nodes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_formnodes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formnodes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_formnodes_edit:

                                // formnodes_update
                                if (preg_match('#^/directory/admin/list/form\\-nodes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_formnodes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formnodes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_formnodes_update:

                                // formnodes_delete
                                if (preg_match('#^/directory/admin/list/form\\-nodes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_formnodes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'formnodes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_formnodes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/fellowship-')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/fellowship-types')) {
                                    // fellowshiptypes-list
                                    if ('/directory/admin/list/fellowship-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptypeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'fellowshiptypes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'fellowshiptypes-list',);
                                    }
                                    not_fellowshiptypeslist:

                                    // fellowshiptypes_create
                                    if ('/directory/admin/list/fellowship-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_fellowshiptypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'fellowshiptypes_create',);
                                    }
                                    not_fellowshiptypes_create:

                                    // fellowshiptypes_new
                                    if ('/directory/admin/list/fellowship-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'fellowshiptypes_new',);
                                    }
                                    not_fellowshiptypes_new:

                                    // fellowshiptypes_show
                                    if (preg_match('#^/directory/admin/list/fellowship\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptypes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_fellowshiptypes_show:

                                    // fellowshiptypes_edit
                                    if (preg_match('#^/directory/admin/list/fellowship\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptypes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_fellowshiptypes_edit:

                                    // fellowshiptypes_update
                                    if (preg_match('#^/directory/admin/list/fellowship\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_fellowshiptypes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_fellowshiptypes_update:

                                    // fellowshiptypes_delete
                                    if (preg_match('#^/directory/admin/list/fellowship\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_fellowshiptypes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_fellowshiptypes_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/fellowship-titles')) {
                                    // fellowshiptitles-list
                                    if ('/directory/admin/list/fellowship-titles' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptitleslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'fellowshiptitles-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'fellowshiptitles-list',);
                                    }
                                    not_fellowshiptitleslist:

                                    // fellowshiptitles_create
                                    if ('/directory/admin/list/fellowship-titles/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_fellowshiptitles_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'fellowshiptitles_create',);
                                    }
                                    not_fellowshiptitles_create:

                                    // fellowshiptitles_new
                                    if ('/directory/admin/list/fellowship-titles/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptitles_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'fellowshiptitles_new',);
                                    }
                                    not_fellowshiptitles_new:

                                    // fellowshiptitles_show
                                    if (preg_match('#^/directory/admin/list/fellowship\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptitles_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptitles_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_fellowshiptitles_show:

                                    // fellowshiptitles_edit
                                    if (preg_match('#^/directory/admin/list/fellowship\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshiptitles_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptitles_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_fellowshiptitles_edit:

                                    // fellowshiptitles_update
                                    if (preg_match('#^/directory/admin/list/fellowship\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_fellowshiptitles_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptitles_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_fellowshiptitles_update:

                                    // fellowshiptitles_delete
                                    if (preg_match('#^/directory/admin/list/fellowship\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_fellowshiptitles_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshiptitles_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_fellowshiptitles_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/fellowship-subspecialties')) {
                                    // fellowshipsubspecialtys-list
                                    if ('/directory/admin/list/fellowship-subspecialties' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshipsubspecialtyslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'fellowshipsubspecialtys-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'fellowshipsubspecialtys-list',);
                                    }
                                    not_fellowshipsubspecialtyslist:

                                    // fellowshipsubspecialtys_create
                                    if ('/directory/admin/list/fellowship-subspecialties/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_fellowshipsubspecialtys_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'fellowshipsubspecialtys_create',);
                                    }
                                    not_fellowshipsubspecialtys_create:

                                    // fellowshipsubspecialtys_new
                                    if ('/directory/admin/list/fellowship-subspecialties/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshipsubspecialtys_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'fellowshipsubspecialtys_new',);
                                    }
                                    not_fellowshipsubspecialtys_new:

                                    // fellowshipsubspecialtys_show
                                    if (preg_match('#^/directory/admin/list/fellowship\\-subspecialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshipsubspecialtys_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshipsubspecialtys_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_fellowshipsubspecialtys_show:

                                    // fellowshipsubspecialtys_edit
                                    if (preg_match('#^/directory/admin/list/fellowship\\-subspecialties/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_fellowshipsubspecialtys_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshipsubspecialtys_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_fellowshipsubspecialtys_edit:

                                    // fellowshipsubspecialtys_update
                                    if (preg_match('#^/directory/admin/list/fellowship\\-subspecialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_fellowshipsubspecialtys_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshipsubspecialtys_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_fellowshipsubspecialtys_update:

                                    // fellowshipsubspecialtys_delete
                                    if (preg_match('#^/directory/admin/list/fellowship\\-subspecialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_fellowshipsubspecialtys_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellowshipsubspecialtys_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_fellowshipsubspecialtys_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/fellowship-application-')) {
                                    if (0 === strpos($pathinfo, '/directory/admin/list/fellowship-application-statuses')) {
                                        // fellappstatuses-list
                                        if ('/directory/admin/list/fellowship-application-statuses' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappstatuseslist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'fellappstatuses-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'fellappstatuses-list',);
                                        }
                                        not_fellappstatuseslist:

                                        // fellappstatuses_create
                                        if ('/directory/admin/list/fellowship-application-statuses/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_fellappstatuses_create;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'fellappstatuses_create',);
                                        }
                                        not_fellappstatuses_create:

                                        // fellappstatuses_new
                                        if ('/directory/admin/list/fellowship-application-statuses/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappstatuses_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'fellappstatuses_new',);
                                        }
                                        not_fellappstatuses_new:

                                        // fellappstatuses_show
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappstatuses_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappstatuses_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                        }
                                        not_fellappstatuses_show:

                                        // fellappstatuses_edit
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-statuses/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappstatuses_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappstatuses_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                        }
                                        not_fellappstatuses_edit:

                                        // fellappstatuses_update
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_fellappstatuses_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappstatuses_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                        }
                                        not_fellappstatuses_update:

                                        // fellappstatuses_delete
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_fellappstatuses_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappstatuses_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                        }
                                        not_fellappstatuses_delete:

                                    }

                                    elseif (0 === strpos($pathinfo, '/directory/admin/list/fellowship-application-ranks')) {
                                        // fellappranks-list
                                        if ('/directory/admin/list/fellowship-application-ranks' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellapprankslist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'fellappranks-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'fellappranks-list',);
                                        }
                                        not_fellapprankslist:

                                        // fellappranks_create
                                        if ('/directory/admin/list/fellowship-application-ranks/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_fellappranks_create;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'fellappranks_create',);
                                        }
                                        not_fellappranks_create:

                                        // fellappranks_new
                                        if ('/directory/admin/list/fellowship-application-ranks/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappranks_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'fellappranks_new',);
                                        }
                                        not_fellappranks_new:

                                        // fellappranks_show
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-ranks/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappranks_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappranks_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                        }
                                        not_fellappranks_show:

                                        // fellappranks_edit
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-ranks/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellappranks_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappranks_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                        }
                                        not_fellappranks_edit:

                                        // fellappranks_update
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-ranks/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_fellappranks_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappranks_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                        }
                                        not_fellappranks_update:

                                        // fellappranks_delete
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-ranks/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_fellappranks_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellappranks_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                        }
                                        not_fellappranks_delete:

                                    }

                                    elseif (0 === strpos($pathinfo, '/directory/admin/list/fellowship-application-language-proficiencies')) {
                                        // fellapplanguageproficiency-list
                                        if ('/directory/admin/list/fellowship-application-language-proficiencies' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellapplanguageproficiencylist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'fellapplanguageproficiency-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'fellapplanguageproficiency-list',);
                                        }
                                        not_fellapplanguageproficiencylist:

                                        // fellapplanguageproficiency_create
                                        if ('/directory/admin/list/fellowship-application-language-proficiencies/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_fellapplanguageproficiency_create;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'fellapplanguageproficiency_create',);
                                        }
                                        not_fellapplanguageproficiency_create:

                                        // fellapplanguageproficiency_new
                                        if ('/directory/admin/list/fellowship-application-language-proficiencies/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellapplanguageproficiency_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'fellapplanguageproficiency_new',);
                                        }
                                        not_fellapplanguageproficiency_new:

                                        // fellapplanguageproficiency_show
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-language\\-proficiencies/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellapplanguageproficiency_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapplanguageproficiency_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                        }
                                        not_fellapplanguageproficiency_show:

                                        // fellapplanguageproficiency_edit
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-language\\-proficiencies/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_fellapplanguageproficiency_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapplanguageproficiency_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                        }
                                        not_fellapplanguageproficiency_edit:

                                        // fellapplanguageproficiency_update
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-language\\-proficiencies/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_fellapplanguageproficiency_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapplanguageproficiency_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                        }
                                        not_fellapplanguageproficiency_update:

                                        // fellapplanguageproficiency_delete
                                        if (preg_match('#^/directory/admin/list/fellowship\\-application\\-language\\-proficiencies/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_fellapplanguageproficiency_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapplanguageproficiency_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                        }
                                        not_fellapplanguageproficiency_delete:

                                    }

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/floors')) {
                                // floors-list
                                if ('/directory/admin/list/floors' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_floorslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'floors-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'floors-list',);
                                }
                                not_floorslist:

                                // floors_create
                                if ('/directory/admin/list/floors/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_floors_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'floors_create',);
                                }
                                not_floors_create:

                                // floors_new
                                if ('/directory/admin/list/floors/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_floors_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'floors_new',);
                                }
                                not_floors_new:

                                // floors_show
                                if (preg_match('#^/directory/admin/list/floors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_floors_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'floors_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_floors_show:

                                // floors_edit
                                if (preg_match('#^/directory/admin/list/floors/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_floors_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'floors_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_floors_edit:

                                // floors_update
                                if (preg_match('#^/directory/admin/list/floors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_floors_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'floors_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_floors_update:

                                // floors_delete
                                if (preg_match('#^/directory/admin/list/floors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_floors_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'floors_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_floors_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/m')) {
                            // employees_tree_messagecategories_list
                            if ('/directory/admin/list/message-categories-tree' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_tree_messagecategories_list;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_tree_messagecategories_list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::institutionTreeAction',  '_route' => 'employees_tree_messagecategories_list',);
                            }
                            not_employees_tree_messagecategories_list:

                            if (0 === strpos($pathinfo, '/directory/admin/list/medical-')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/medical-titles')) {
                                    // medicaltitles-list
                                    if ('/directory/admin/list/medical-titles' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicaltitleslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'medicaltitles-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'medicaltitles-list',);
                                    }
                                    not_medicaltitleslist:

                                    // medicaltitles_create
                                    if ('/directory/admin/list/medical-titles/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_medicaltitles_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'medicaltitles_create',);
                                    }
                                    not_medicaltitles_create:

                                    // medicaltitles_new
                                    if ('/directory/admin/list/medical-titles/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicaltitles_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'medicaltitles_new',);
                                    }
                                    not_medicaltitles_new:

                                    // medicaltitles_show
                                    if (preg_match('#^/directory/admin/list/medical\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicaltitles_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicaltitles_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_medicaltitles_show:

                                    // medicaltitles_edit
                                    if (preg_match('#^/directory/admin/list/medical\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicaltitles_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicaltitles_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_medicaltitles_edit:

                                    // medicaltitles_update
                                    if (preg_match('#^/directory/admin/list/medical\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_medicaltitles_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicaltitles_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_medicaltitles_update:

                                    // medicaltitles_delete
                                    if (preg_match('#^/directory/admin/list/medical\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_medicaltitles_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicaltitles_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_medicaltitles_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/medical-specialties')) {
                                    // medicalspecialties-list
                                    if ('/directory/admin/list/medical-specialties' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalspecialtieslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'medicalspecialties-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'medicalspecialties-list',);
                                    }
                                    not_medicalspecialtieslist:

                                    // medicalspecialties_create
                                    if ('/directory/admin/list/medical-specialties/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_medicalspecialties_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'medicalspecialties_create',);
                                    }
                                    not_medicalspecialties_create:

                                    // medicalspecialties_new
                                    if ('/directory/admin/list/medical-specialties/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalspecialties_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'medicalspecialties_new',);
                                    }
                                    not_medicalspecialties_new:

                                    // medicalspecialties_show
                                    if (preg_match('#^/directory/admin/list/medical\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalspecialties_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalspecialties_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_medicalspecialties_show:

                                    // medicalspecialties_edit
                                    if (preg_match('#^/directory/admin/list/medical\\-specialties/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalspecialties_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalspecialties_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_medicalspecialties_edit:

                                    // medicalspecialties_update
                                    if (preg_match('#^/directory/admin/list/medical\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_medicalspecialties_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalspecialties_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_medicalspecialties_update:

                                    // medicalspecialties_delete
                                    if (preg_match('#^/directory/admin/list/medical\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_medicalspecialties_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalspecialties_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_medicalspecialties_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/medical-license-statuses')) {
                                    // medicalstatuses-list
                                    if ('/directory/admin/list/medical-license-statuses' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalstatuseslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'medicalstatuses-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'medicalstatuses-list',);
                                    }
                                    not_medicalstatuseslist:

                                    // medicalstatuses_create
                                    if ('/directory/admin/list/medical-license-statuses/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_medicalstatuses_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'medicalstatuses_create',);
                                    }
                                    not_medicalstatuses_create:

                                    // medicalstatuses_new
                                    if ('/directory/admin/list/medical-license-statuses/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalstatuses_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'medicalstatuses_new',);
                                    }
                                    not_medicalstatuses_new:

                                    // medicalstatuses_show
                                    if (preg_match('#^/directory/admin/list/medical\\-license\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalstatuses_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalstatuses_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_medicalstatuses_show:

                                    // medicalstatuses_edit
                                    if (preg_match('#^/directory/admin/list/medical\\-license\\-statuses/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_medicalstatuses_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalstatuses_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_medicalstatuses_edit:

                                    // medicalstatuses_update
                                    if (preg_match('#^/directory/admin/list/medical\\-license\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_medicalstatuses_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalstatuses_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_medicalstatuses_update:

                                    // medicalstatuses_delete
                                    if (preg_match('#^/directory/admin/list/medical\\-license\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_medicalstatuses_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'medicalstatuses_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_medicalstatuses_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/mailboxes')) {
                                // mailboxes-list
                                if ('/directory/admin/list/mailboxes' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mailboxeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'mailboxes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'mailboxes-list',);
                                }
                                not_mailboxeslist:

                                // mailboxes_create
                                if ('/directory/admin/list/mailboxes/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_mailboxes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'mailboxes_create',);
                                }
                                not_mailboxes_create:

                                // mailboxes_new
                                if ('/directory/admin/list/mailboxes/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mailboxes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'mailboxes_new',);
                                }
                                not_mailboxes_new:

                                // mailboxes_show
                                if (preg_match('#^/directory/admin/list/mailboxes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mailboxes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mailboxes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_mailboxes_show:

                                // mailboxes_edit
                                if (preg_match('#^/directory/admin/list/mailboxes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mailboxes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mailboxes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_mailboxes_edit:

                                // mailboxes_update
                                if (preg_match('#^/directory/admin/list/mailboxes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_mailboxes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mailboxes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_mailboxes_update:

                                // mailboxes_delete
                                if (preg_match('#^/directory/admin/list/mailboxes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_mailboxes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mailboxes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_mailboxes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/months')) {
                                // months-list
                                if ('/directory/admin/list/months' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_monthslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'months-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'months-list',);
                                }
                                not_monthslist:

                                // months_create
                                if ('/directory/admin/list/months/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_months_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'months_create',);
                                }
                                not_months_create:

                                // months_new
                                if ('/directory/admin/list/months/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_months_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'months_new',);
                                }
                                not_months_new:

                                // months_show
                                if (preg_match('#^/directory/admin/list/months/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_months_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'months_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_months_show:

                                // months_edit
                                if (preg_match('#^/directory/admin/list/months/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_months_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'months_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_months_edit:

                                // months_update
                                if (preg_match('#^/directory/admin/list/months/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_months_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'months_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_months_update:

                                // months_delete
                                if (preg_match('#^/directory/admin/list/months/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_months_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'months_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_months_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/g')) {
                            // employees_generate_form_node_tree
                            if ('/directory/admin/list/generate-form-node-tree' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_generate_form_node_tree;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_generate_form_node_tree');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generateFormNodeAction',  '_route' => 'employees_generate_form_node_tree',);
                            }
                            not_employees_generate_form_node_tree:

                            // employees_generate_test_form_node_tree
                            if ('/directory/admin/list/generate-test-form-node-tree' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_generate_test_form_node_tree;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_generate_test_form_node_tree');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generateTestFormNodeAction',  '_route' => 'employees_generate_test_form_node_tree',);
                            }
                            not_employees_generate_test_form_node_tree:

                            if (0 === strpos($pathinfo, '/directory/admin/list/grant-source-organizations')) {
                                // sourceorganizations-list
                                if ('/directory/admin/list/grant-source-organizations' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourceorganizationslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'sourceorganizations-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'sourceorganizations-list',);
                                }
                                not_sourceorganizationslist:

                                // sourceorganizations_create
                                if ('/directory/admin/list/grant-source-organizations/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_sourceorganizations_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'sourceorganizations_create',);
                                }
                                not_sourceorganizations_create:

                                // sourceorganizations_new
                                if ('/directory/admin/list/grant-source-organizations/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourceorganizations_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'sourceorganizations_new',);
                                }
                                not_sourceorganizations_new:

                                // sourceorganizations_show
                                if (preg_match('#^/directory/admin/list/grant\\-source\\-organizations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourceorganizations_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourceorganizations_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_sourceorganizations_show:

                                // sourceorganizations_edit
                                if (preg_match('#^/directory/admin/list/grant\\-source\\-organizations/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourceorganizations_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourceorganizations_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_sourceorganizations_edit:

                                // sourceorganizations_update
                                if (preg_match('#^/directory/admin/list/grant\\-source\\-organizations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_sourceorganizations_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourceorganizations_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_sourceorganizations_update:

                                // sourceorganizations_delete
                                if (preg_match('#^/directory/admin/list/grant\\-source\\-organizations/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_sourceorganizations_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourceorganizations_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_sourceorganizations_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/a')) {
                            // employees_add-mdusers-to-pathology-result-signatories
                            if ('/directory/admin/list/add-mdusers-to-pathology-result-signatories' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_addmduserstopathologyresultsignatories;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_add-mdusers-to-pathology-result-signatories');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::addMDUsersToPathologyResultSignatoriesList',  '_route' => 'employees_add-mdusers-to-pathology-result-signatories',);
                            }
                            not_employees_addmduserstopathologyresultsignatories:

                            if (0 === strpos($pathinfo, '/directory/admin/list/administrative-titles')) {
                                // admintitles-list
                                if ('/directory/admin/list/administrative-titles' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_admintitleslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'admintitles-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'admintitles-list',);
                                }
                                not_admintitleslist:

                                // admintitles_create
                                if ('/directory/admin/list/administrative-titles/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_admintitles_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'admintitles_create',);
                                }
                                not_admintitles_create:

                                // admintitles_new
                                if ('/directory/admin/list/administrative-titles/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_admintitles_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'admintitles_new',);
                                }
                                not_admintitles_new:

                                // admintitles_show
                                if (preg_match('#^/directory/admin/list/administrative\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_admintitles_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'admintitles_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_admintitles_show:

                                // admintitles_edit
                                if (preg_match('#^/directory/admin/list/administrative\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_admintitles_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'admintitles_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_admintitles_edit:

                                // admintitles_update
                                if (preg_match('#^/directory/admin/list/administrative\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_admintitles_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'admintitles_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_admintitles_update:

                                // admintitles_delete
                                if (preg_match('#^/directory/admin/list/administrative\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_admintitles_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'admintitles_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_admintitles_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/academic-appointment-titles')) {
                                // apptitles-list
                                if ('/directory/admin/list/academic-appointment-titles' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_apptitleslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'apptitles-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'apptitles-list',);
                                }
                                not_apptitleslist:

                                // apptitles_create
                                if ('/directory/admin/list/academic-appointment-titles/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_apptitles_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'apptitles_create',);
                                }
                                not_apptitles_create:

                                // apptitles_new
                                if ('/directory/admin/list/academic-appointment-titles/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_apptitles_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'apptitles_new',);
                                }
                                not_apptitles_new:

                                // apptitles_show
                                if (preg_match('#^/directory/admin/list/academic\\-appointment\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_apptitles_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'apptitles_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_apptitles_show:

                                // apptitles_edit
                                if (preg_match('#^/directory/admin/list/academic\\-appointment\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_apptitles_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'apptitles_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_apptitles_edit:

                                // apptitles_update
                                if (preg_match('#^/directory/admin/list/academic\\-appointment\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_apptitles_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'apptitles_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_apptitles_update:

                                // apptitles_delete
                                if (preg_match('#^/directory/admin/list/academic\\-appointment\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_apptitles_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'apptitles_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_apptitles_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/authorship-roles')) {
                                // authorshiproles-list
                                if ('/directory/admin/list/authorship-roles' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_authorshiproleslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'authorshiproles-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'authorshiproles-list',);
                                }
                                not_authorshiproleslist:

                                // authorshiproles_create
                                if ('/directory/admin/list/authorship-roles/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_authorshiproles_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'authorshiproles_create',);
                                }
                                not_authorshiproles_create:

                                // authorshiproles_new
                                if ('/directory/admin/list/authorship-roles/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_authorshiproles_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'authorshiproles_new',);
                                }
                                not_authorshiproles_new:

                                // authorshiproles_show
                                if (preg_match('#^/directory/admin/list/authorship\\-roles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_authorshiproles_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'authorshiproles_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_authorshiproles_show:

                                // authorshiproles_edit
                                if (preg_match('#^/directory/admin/list/authorship\\-roles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_authorshiproles_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'authorshiproles_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_authorshiproles_edit:

                                // authorshiproles_update
                                if (preg_match('#^/directory/admin/list/authorship\\-roles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_authorshiproles_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'authorshiproles_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_authorshiproles_update:

                                // authorshiproles_delete
                                if (preg_match('#^/directory/admin/list/authorship\\-roles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_authorshiproles_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'authorshiproles_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_authorshiproles_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/r')) {
                            // employees_remove-fellapp-mdusers-to-pathology-result-signatories
                            if ('/directory/admin/list/remove-fellapp-mdusers-to-pathology-result-signatories' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_removefellappmduserstopathologyresultsignatories;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'employees_remove-fellapp-mdusers-to-pathology-result-signatories');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::removeFellappMDUsersToPathologyResultSignatoriesList',  '_route' => 'employees_remove-fellapp-mdusers-to-pathology-result-signatories',);
                            }
                            not_employees_removefellappmduserstopathologyresultsignatories:

                            if (0 === strpos($pathinfo, '/directory/admin/list/res')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/residency-tracks')) {
                                    // residencytracks-list
                                    if ('/directory/admin/list/residency-tracks' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencytrackslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'residencytracks-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'residencytracks-list',);
                                    }
                                    not_residencytrackslist:

                                    // residencytracks_create
                                    if ('/directory/admin/list/residency-tracks/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_residencytracks_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'residencytracks_create',);
                                    }
                                    not_residencytracks_create:

                                    // residencytracks_new
                                    if ('/directory/admin/list/residency-tracks/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencytracks_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'residencytracks_new',);
                                    }
                                    not_residencytracks_new:

                                    // residencytracks_show
                                    if (preg_match('#^/directory/admin/list/residency\\-tracks/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencytracks_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencytracks_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_residencytracks_show:

                                    // residencytracks_edit
                                    if (preg_match('#^/directory/admin/list/residency\\-tracks/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencytracks_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencytracks_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_residencytracks_edit:

                                    // residencytracks_update
                                    if (preg_match('#^/directory/admin/list/residency\\-tracks/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_residencytracks_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencytracks_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_residencytracks_update:

                                    // residencytracks_delete
                                    if (preg_match('#^/directory/admin/list/residency\\-tracks/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_residencytracks_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencytracks_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_residencytracks_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/residency-specialties')) {
                                    // residencyspecialtys-list
                                    if ('/directory/admin/list/residency-specialties' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencyspecialtyslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'residencyspecialtys-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'residencyspecialtys-list',);
                                    }
                                    not_residencyspecialtyslist:

                                    // residencyspecialtys_create
                                    if ('/directory/admin/list/residency-specialties/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_residencyspecialtys_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'residencyspecialtys_create',);
                                    }
                                    not_residencyspecialtys_create:

                                    // residencyspecialtys_new
                                    if ('/directory/admin/list/residency-specialties/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencyspecialtys_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'residencyspecialtys_new',);
                                    }
                                    not_residencyspecialtys_new:

                                    // residencyspecialtys_show
                                    if (preg_match('#^/directory/admin/list/residency\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencyspecialtys_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencyspecialtys_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_residencyspecialtys_show:

                                    // residencyspecialtys_edit
                                    if (preg_match('#^/directory/admin/list/residency\\-specialties/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_residencyspecialtys_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencyspecialtys_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_residencyspecialtys_edit:

                                    // residencyspecialtys_update
                                    if (preg_match('#^/directory/admin/list/residency\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_residencyspecialtys_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencyspecialtys_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_residencyspecialtys_update:

                                    // residencyspecialtys_delete
                                    if (preg_match('#^/directory/admin/list/residency\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_residencyspecialtys_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'residencyspecialtys_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_residencyspecialtys_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/research-labs')) {
                                    // researchlabs-list
                                    if ('/directory/admin/list/research-labs' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_researchlabslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'researchlabs-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'researchlabs-list',);
                                    }
                                    not_researchlabslist:

                                    // researchlabs_create
                                    if ('/directory/admin/list/research-labs/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_researchlabs_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'researchlabs_create',);
                                    }
                                    not_researchlabs_create:

                                    // researchlabs_new
                                    if ('/directory/admin/list/research-labs/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_researchlabs_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'researchlabs_new',);
                                    }
                                    not_researchlabs_new:

                                    // researchlabs_show
                                    if (preg_match('#^/directory/admin/list/research\\-labs/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_researchlabs_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchlabs_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_researchlabs_show:

                                    // researchlabs_edit
                                    if (preg_match('#^/directory/admin/list/research\\-labs/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_researchlabs_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchlabs_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_researchlabs_edit:

                                    // researchlabs_update
                                    if (preg_match('#^/directory/admin/list/research\\-labs/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_researchlabs_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchlabs_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_researchlabs_update:

                                    // researchlabs_delete
                                    if (preg_match('#^/directory/admin/list/research\\-labs/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_researchlabs_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchlabs_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_researchlabs_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/ro')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/roles')) {
                                    // role-list
                                    if ('/directory/admin/list/roles' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_rolelist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'role-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'role-list',);
                                    }
                                    not_rolelist:

                                    // role_create
                                    if ('/directory/admin/list/roles/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_role_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'role_create',);
                                    }
                                    not_role_create:

                                    // role_new
                                    if ('/directory/admin/list/roles/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_role_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'role_new',);
                                    }
                                    not_role_new:

                                    // role_show
                                    if (preg_match('#^/directory/admin/list/roles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_role_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'role_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_role_show:

                                    // role_edit
                                    if (preg_match('#^/directory/admin/list/roles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_role_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'role_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_role_edit:

                                    // role_update
                                    if (preg_match('#^/directory/admin/list/roles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_role_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'role_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_role_update:

                                    // role_delete
                                    if (preg_match('#^/directory/admin/list/roles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_role_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'role_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_role_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/role-attributes')) {
                                    // roleattributes-list
                                    if ('/directory/admin/list/role-attributes' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_roleattributeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'roleattributes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'roleattributes-list',);
                                    }
                                    not_roleattributeslist:

                                    // roleattributes_create
                                    if ('/directory/admin/list/role-attributes/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_roleattributes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'roleattributes_create',);
                                    }
                                    not_roleattributes_create:

                                    // roleattributes_new
                                    if ('/directory/admin/list/role-attributes/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_roleattributes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'roleattributes_new',);
                                    }
                                    not_roleattributes_new:

                                    // roleattributes_show
                                    if (preg_match('#^/directory/admin/list/role\\-attributes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_roleattributes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'roleattributes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_roleattributes_show:

                                    // roleattributes_edit
                                    if (preg_match('#^/directory/admin/list/role\\-attributes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_roleattributes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'roleattributes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_roleattributes_edit:

                                    // roleattributes_update
                                    if (preg_match('#^/directory/admin/list/role\\-attributes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_roleattributes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'roleattributes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_roleattributes_update:

                                    // roleattributes_delete
                                    if (preg_match('#^/directory/admin/list/role\\-attributes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_roleattributes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'roleattributes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_roleattributes_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/rooms')) {
                                    // rooms-list
                                    if ('/directory/admin/list/rooms' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_roomslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'rooms-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'rooms-list',);
                                    }
                                    not_roomslist:

                                    // rooms_create
                                    if ('/directory/admin/list/rooms/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_rooms_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'rooms_create',);
                                    }
                                    not_rooms_create:

                                    // rooms_new
                                    if ('/directory/admin/list/rooms/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_rooms_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'rooms_new',);
                                    }
                                    not_rooms_new:

                                    // rooms_show
                                    if (preg_match('#^/directory/admin/list/rooms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_rooms_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rooms_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_rooms_show:

                                    // rooms_edit
                                    if (preg_match('#^/directory/admin/list/rooms/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_rooms_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rooms_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_rooms_edit:

                                    // rooms_update
                                    if (preg_match('#^/directory/admin/list/rooms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_rooms_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rooms_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_rooms_update:

                                    // rooms_delete
                                    if (preg_match('#^/directory/admin/list/rooms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_rooms_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'rooms_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_rooms_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/ranks-of-importance')) {
                                // importances-list
                                if ('/directory/admin/list/ranks-of-importance' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_importanceslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'importances-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'importances-list',);
                                }
                                not_importanceslist:

                                // importances_create
                                if ('/directory/admin/list/ranks-of-importance/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_importances_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'importances_create',);
                                }
                                not_importances_create:

                                // importances_new
                                if ('/directory/admin/list/ranks-of-importance/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_importances_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'importances_new',);
                                }
                                not_importances_new:

                                // importances_show
                                if (preg_match('#^/directory/admin/list/ranks\\-of\\-importance/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_importances_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'importances_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_importances_show:

                                // importances_edit
                                if (preg_match('#^/directory/admin/list/ranks\\-of\\-importance/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_importances_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'importances_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_importances_edit:

                                // importances_update
                                if (preg_match('#^/directory/admin/list/ranks\\-of\\-importance/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_importances_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'importances_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_importances_update:

                                // importances_delete
                                if (preg_match('#^/directory/admin/list/ranks\\-of\\-importance/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_importances_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'importances_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_importances_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/s')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/source-systems')) {
                                // sourcesystems-list
                                if ('/directory/admin/list/source-systems' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourcesystemslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'sourcesystems-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'sourcesystems-list',);
                                }
                                not_sourcesystemslist:

                                // sourcesystems_create
                                if ('/directory/admin/list/source-systems/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_sourcesystems_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'sourcesystems_create',);
                                }
                                not_sourcesystems_create:

                                // sourcesystems_new
                                if ('/directory/admin/list/source-systems/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourcesystems_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'sourcesystems_new',);
                                }
                                not_sourcesystems_new:

                                // sourcesystems_show
                                if (preg_match('#^/directory/admin/list/source\\-systems/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourcesystems_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourcesystems_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_sourcesystems_show:

                                // sourcesystems_edit
                                if (preg_match('#^/directory/admin/list/source\\-systems/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sourcesystems_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourcesystems_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_sourcesystems_edit:

                                // sourcesystems_update
                                if (preg_match('#^/directory/admin/list/source\\-systems/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_sourcesystems_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourcesystems_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_sourcesystems_update:

                                // sourcesystems_delete
                                if (preg_match('#^/directory/admin/list/source\\-systems/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_sourcesystems_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sourcesystems_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_sourcesystems_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/states')) {
                                // states-list
                                if ('/directory/admin/list/states' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stateslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'states-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'states-list',);
                                }
                                not_stateslist:

                                // states_create
                                if ('/directory/admin/list/states/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_states_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'states_create',);
                                }
                                not_states_create:

                                // states_new
                                if ('/directory/admin/list/states/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_states_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'states_new',);
                                }
                                not_states_new:

                                // states_show
                                if (preg_match('#^/directory/admin/list/states/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_states_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'states_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_states_show:

                                // states_edit
                                if (preg_match('#^/directory/admin/list/states/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_states_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'states_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_states_edit:

                                // states_update
                                if (preg_match('#^/directory/admin/list/states/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_states_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'states_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_states_update:

                                // states_delete
                                if (preg_match('#^/directory/admin/list/states/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_states_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'states_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_states_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/suites')) {
                                // suites-list
                                if ('/directory/admin/list/suites' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suiteslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'suites-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'suites-list',);
                                }
                                not_suiteslist:

                                // suites_create
                                if ('/directory/admin/list/suites/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_suites_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'suites_create',);
                                }
                                not_suites_create:

                                // suites_new
                                if ('/directory/admin/list/suites/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suites_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'suites_new',);
                                }
                                not_suites_new:

                                // suites_show
                                if (preg_match('#^/directory/admin/list/suites/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suites_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suites_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_suites_show:

                                // suites_edit
                                if (preg_match('#^/directory/admin/list/suites/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suites_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suites_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_suites_edit:

                                // suites_update
                                if (preg_match('#^/directory/admin/list/suites/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_suites_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suites_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_suites_update:

                                // suites_delete
                                if (preg_match('#^/directory/admin/list/suites/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_suites_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suites_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_suites_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/sexes')) {
                                // sexes-list
                                if ('/directory/admin/list/sexes' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sexeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'sexes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'sexes-list',);
                                }
                                not_sexeslist:

                                // sexes_create
                                if ('/directory/admin/list/sexes/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_sexes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'sexes_create',);
                                }
                                not_sexes_create:

                                // sexes_new
                                if ('/directory/admin/list/sexes/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sexes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'sexes_new',);
                                }
                                not_sexes_new:

                                // sexes_show
                                if (preg_match('#^/directory/admin/list/sexes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sexes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sexes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_sexes_show:

                                // sexes_edit
                                if (preg_match('#^/directory/admin/list/sexes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sexes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sexes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_sexes_edit:

                                // sexes_update
                                if (preg_match('#^/directory/admin/list/sexes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_sexes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sexes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_sexes_update:

                                // sexes_delete
                                if (preg_match('#^/directory/admin/list/sexes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_sexes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sexes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_sexes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/spot-purposes')) {
                                // spotpurposes-list
                                if ('/directory/admin/list/spot-purposes' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_spotpurposeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'spotpurposes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'spotpurposes-list',);
                                }
                                not_spotpurposeslist:

                                // spotpurposes_create
                                if ('/directory/admin/list/spot-purposes/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_spotpurposes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'spotpurposes_create',);
                                }
                                not_spotpurposes_create:

                                // spotpurposes_new
                                if ('/directory/admin/list/spot-purposes/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_spotpurposes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'spotpurposes_new',);
                                }
                                not_spotpurposes_new:

                                // spotpurposes_show
                                if (preg_match('#^/directory/admin/list/spot\\-purposes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_spotpurposes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'spotpurposes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_spotpurposes_show:

                                // spotpurposes_edit
                                if (preg_match('#^/directory/admin/list/spot\\-purposes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_spotpurposes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'spotpurposes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_spotpurposes_edit:

                                // spotpurposes_update
                                if (preg_match('#^/directory/admin/list/spot\\-purposes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_spotpurposes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'spotpurposes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_spotpurposes_update:

                                // spotpurposes_delete
                                if (preg_match('#^/directory/admin/list/spot\\-purposes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_spotpurposes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'spotpurposes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_spotpurposes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/sites')) {
                                // sites-list
                                if ('/directory/admin/list/sites' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_siteslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'sites-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'sites-list',);
                                }
                                not_siteslist:

                                // sites_create
                                if ('/directory/admin/list/sites/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_sites_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'sites_create',);
                                }
                                not_sites_create:

                                // sites_new
                                if ('/directory/admin/list/sites/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sites_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'sites_new',);
                                }
                                not_sites_new:

                                // sites_show
                                if (preg_match('#^/directory/admin/list/sites/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sites_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sites_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_sites_show:

                                // sites_edit
                                if (preg_match('#^/directory/admin/list/sites/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_sites_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sites_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_sites_edit:

                                // sites_update
                                if (preg_match('#^/directory/admin/list/sites/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_sites_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sites_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_sites_update:

                                // sites_delete
                                if (preg_match('#^/directory/admin/list/sites/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_sites_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'sites_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_sites_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/b')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/board-certifications')) {
                                // boardcertifications-list
                                if ('/directory/admin/list/board-certifications' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_boardcertificationslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'boardcertifications-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'boardcertifications-list',);
                                }
                                not_boardcertificationslist:

                                // boardcertifications_create
                                if ('/directory/admin/list/board-certifications/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_boardcertifications_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'boardcertifications_create',);
                                }
                                not_boardcertifications_create:

                                // boardcertifications_new
                                if ('/directory/admin/list/board-certifications/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_boardcertifications_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'boardcertifications_new',);
                                }
                                not_boardcertifications_new:

                                // boardcertifications_show
                                if (preg_match('#^/directory/admin/list/board\\-certifications/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_boardcertifications_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'boardcertifications_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_boardcertifications_show:

                                // boardcertifications_edit
                                if (preg_match('#^/directory/admin/list/board\\-certifications/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_boardcertifications_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'boardcertifications_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_boardcertifications_edit:

                                // boardcertifications_update
                                if (preg_match('#^/directory/admin/list/board\\-certifications/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_boardcertifications_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'boardcertifications_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_boardcertifications_update:

                                // boardcertifications_delete
                                if (preg_match('#^/directory/admin/list/board\\-certifications/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_boardcertifications_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'boardcertifications_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_boardcertifications_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/buidlings')) {
                                // buildings-list
                                if ('/directory/admin/list/buidlings' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_buildingslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'buildings-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'buildings-list',);
                                }
                                not_buildingslist:

                                // buildings_create
                                if ('/directory/admin/list/buidlings/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_buildings_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'buildings_create',);
                                }
                                not_buildings_create:

                                // buildings_new
                                if ('/directory/admin/list/buidlings/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_buildings_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'buildings_new',);
                                }
                                not_buildings_new:

                                // buildings_show
                                if (preg_match('#^/directory/admin/list/buidlings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_buildings_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'buildings_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_buildings_show:

                                // buildings_edit
                                if (preg_match('#^/directory/admin/list/buidlings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_buildings_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'buildings_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_buildings_edit:

                                // buildings_update
                                if (preg_match('#^/directory/admin/list/buidlings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_buildings_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'buildings_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_buildings_update:

                                // buildings_delete
                                if (preg_match('#^/directory/admin/list/buidlings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_buildings_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'buildings_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_buildings_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/blood-product-transfusions')) {
                                // bloodproducttransfusions-list
                                if ('/directory/admin/list/blood-product-transfusions' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodproducttransfusionslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'bloodproducttransfusions-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'bloodproducttransfusions-list',);
                                }
                                not_bloodproducttransfusionslist:

                                // bloodproducttransfusions_create
                                if ('/directory/admin/list/blood-product-transfusions/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_bloodproducttransfusions_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'bloodproducttransfusions_create',);
                                }
                                not_bloodproducttransfusions_create:

                                // bloodproducttransfusions_new
                                if ('/directory/admin/list/blood-product-transfusions/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodproducttransfusions_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'bloodproducttransfusions_new',);
                                }
                                not_bloodproducttransfusions_new:

                                // bloodproducttransfusions_show
                                if (preg_match('#^/directory/admin/list/blood\\-product\\-transfusions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodproducttransfusions_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodproducttransfusions_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_bloodproducttransfusions_show:

                                // bloodproducttransfusions_edit
                                if (preg_match('#^/directory/admin/list/blood\\-product\\-transfusions/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodproducttransfusions_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodproducttransfusions_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_bloodproducttransfusions_edit:

                                // bloodproducttransfusions_update
                                if (preg_match('#^/directory/admin/list/blood\\-product\\-transfusions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_bloodproducttransfusions_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodproducttransfusions_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_bloodproducttransfusions_update:

                                // bloodproducttransfusions_delete
                                if (preg_match('#^/directory/admin/list/blood\\-product\\-transfusions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_bloodproducttransfusions_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodproducttransfusions_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_bloodproducttransfusions_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/blood-types')) {
                                // bloodtypes-list
                                if ('/directory/admin/list/blood-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodtypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'bloodtypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'bloodtypes-list',);
                                }
                                not_bloodtypeslist:

                                // bloodtypes_creste
                                if ('/directory/admin/list/blood-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_bloodtypes_creste;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'bloodtypes_creste',);
                                }
                                not_bloodtypes_creste:

                                // bloodtypes_new
                                if ('/directory/admin/list/blood-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodtypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'bloodtypes_new',);
                                }
                                not_bloodtypes_new:

                                // bloodtypes_show
                                if (preg_match('#^/directory/admin/list/blood\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodtypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodtypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_bloodtypes_show:

                                // bloodtypes_edit
                                if (preg_match('#^/directory/admin/list/blood\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_bloodtypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodtypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_bloodtypes_edit:

                                // bloodtypes_update
                                if (preg_match('#^/directory/admin/list/blood\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_bloodtypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodtypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_bloodtypes_update:

                                // bloodtypes_delete
                                if (preg_match('#^/directory/admin/list/blood\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_bloodtypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'bloodtypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_bloodtypes_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/e')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/employment-termination-reasons')) {
                                // employmentterminations-list
                                if ('/directory/admin/list/employment-termination-reasons' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmentterminationslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'employmentterminations-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'employmentterminations-list',);
                                }
                                not_employmentterminationslist:

                                // employmentterminations_create
                                if ('/directory/admin/list/employment-termination-reasons/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_employmentterminations_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'employmentterminations_create',);
                                }
                                not_employmentterminations_create:

                                // employmentterminations_new
                                if ('/directory/admin/list/employment-termination-reasons/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmentterminations_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'employmentterminations_new',);
                                }
                                not_employmentterminations_new:

                                // employmentterminations_show
                                if (preg_match('#^/directory/admin/list/employment\\-termination\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmentterminations_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmentterminations_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_employmentterminations_show:

                                // employmentterminations_edit
                                if (preg_match('#^/directory/admin/list/employment\\-termination\\-reasons/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmentterminations_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmentterminations_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_employmentterminations_edit:

                                // employmentterminations_update
                                if (preg_match('#^/directory/admin/list/employment\\-termination\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_employmentterminations_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmentterminations_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_employmentterminations_update:

                                // employmentterminations_delete
                                if (preg_match('#^/directory/admin/list/employment\\-termination\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_employmentterminations_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmentterminations_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_employmentterminations_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/employment-types')) {
                                // employmenttypes-list
                                if ('/directory/admin/list/employment-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmenttypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'employmenttypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'employmenttypes-list',);
                                }
                                not_employmenttypeslist:

                                // employmenttypes_create
                                if ('/directory/admin/list/employment-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_employmenttypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'employmenttypes_create',);
                                }
                                not_employmenttypes_create:

                                // employmenttypes_new
                                if ('/directory/admin/list/employment-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmenttypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'employmenttypes_new',);
                                }
                                not_employmenttypes_new:

                                // employmenttypes_show
                                if (preg_match('#^/directory/admin/list/employment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmenttypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmenttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_employmenttypes_show:

                                // employmenttypes_edit
                                if (preg_match('#^/directory/admin/list/employment\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_employmenttypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmenttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_employmenttypes_edit:

                                // employmenttypes_update
                                if (preg_match('#^/directory/admin/list/employment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_employmenttypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmenttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_employmenttypes_update:

                                // employmenttypes_delete
                                if (preg_match('#^/directory/admin/list/employment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_employmenttypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employmenttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_employmenttypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/event-log-event-types')) {
                                // loggereventtypes-list
                                if ('/directory/admin/list/event-log-event-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_loggereventtypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'loggereventtypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'loggereventtypes-list',);
                                }
                                not_loggereventtypeslist:

                                // loggereventtypes_create
                                if ('/directory/admin/list/event-log-event-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_loggereventtypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'loggereventtypes_create',);
                                }
                                not_loggereventtypes_create:

                                // loggereventtypes_new
                                if ('/directory/admin/list/event-log-event-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_loggereventtypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'loggereventtypes_new',);
                                }
                                not_loggereventtypes_new:

                                // loggereventtypes_show
                                if (preg_match('#^/directory/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_loggereventtypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'loggereventtypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_loggereventtypes_show:

                                // loggereventtypes_edit
                                if (preg_match('#^/directory/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_loggereventtypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'loggereventtypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_loggereventtypes_edit:

                                // loggereventtypes_update
                                if (preg_match('#^/directory/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_loggereventtypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'loggereventtypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_loggereventtypes_update:

                                // loggereventtypes_delete
                                if (preg_match('#^/directory/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_loggereventtypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'loggereventtypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_loggereventtypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/event-object-types')) {
                                // eventobjecttypes-list
                                if ('/directory/admin/list/event-object-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_eventobjecttypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'eventobjecttypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'eventobjecttypes-list',);
                                }
                                not_eventobjecttypeslist:

                                // eventobjecttypes_create
                                if ('/directory/admin/list/event-object-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_eventobjecttypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'eventobjecttypes_create',);
                                }
                                not_eventobjecttypes_create:

                                // eventobjecttypes_new
                                if ('/directory/admin/list/event-object-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_eventobjecttypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'eventobjecttypes_new',);
                                }
                                not_eventobjecttypes_new:

                                // eventobjecttypes_show
                                if (preg_match('#^/directory/admin/list/event\\-object\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_eventobjecttypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'eventobjecttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_eventobjecttypes_show:

                                // eventobjecttypes_edit
                                if (preg_match('#^/directory/admin/list/event\\-object\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_eventobjecttypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'eventobjecttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_eventobjecttypes_edit:

                                // eventobjecttypes_update
                                if (preg_match('#^/directory/admin/list/event\\-object\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_eventobjecttypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'eventobjecttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_eventobjecttypes_update:

                                // eventobjecttypes_delete
                                if (preg_match('#^/directory/admin/list/event\\-object\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_eventobjecttypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'eventobjecttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_eventobjecttypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/equipment')) {
                                // equipments-list
                                if ('/directory/admin/list/equipment' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipmentslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'equipments-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'equipments-list',);
                                }
                                not_equipmentslist:

                                // equipmenttypes-list
                                if ('/directory/admin/list/equipment-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipmenttypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'equipmenttypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'equipmenttypes-list',);
                                }
                                not_equipmenttypeslist:

                                // equipments_create
                                if ('/directory/admin/list/equipment/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_equipments_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'equipments_create',);
                                }
                                not_equipments_create:

                                if (0 === strpos($pathinfo, '/directory/admin/list/equipment-types')) {
                                    // equipmenttypes_create
                                    if ('/directory/admin/list/equipment-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_equipmenttypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'equipmenttypes_create',);
                                    }
                                    not_equipmenttypes_create:

                                    // equipmenttypes_new
                                    if ('/directory/admin/list/equipment-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_equipmenttypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'equipmenttypes_new',);
                                    }
                                    not_equipmenttypes_new:

                                }

                                // equipments_new
                                if ('/directory/admin/list/equipment/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipments_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'equipments_new',);
                                }
                                not_equipments_new:

                                // equipments_show
                                if (preg_match('#^/directory/admin/list/equipment/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipments_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipments_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_equipments_show:

                                // equipmenttypes_show
                                if (0 === strpos($pathinfo, '/directory/admin/list/equipment-types') && preg_match('#^/directory/admin/list/equipment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipmenttypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipmenttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_equipmenttypes_show:

                                // equipments_edit
                                if (preg_match('#^/directory/admin/list/equipment/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipments_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipments_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_equipments_edit:

                                // equipmenttypes_edit
                                if (0 === strpos($pathinfo, '/directory/admin/list/equipment-types') && preg_match('#^/directory/admin/list/equipment\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_equipmenttypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipmenttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_equipmenttypes_edit:

                                // equipments_update
                                if (preg_match('#^/directory/admin/list/equipment/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_equipments_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipments_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_equipments_update:

                                // equipmenttypes_update
                                if (0 === strpos($pathinfo, '/directory/admin/list/equipment-types') && preg_match('#^/directory/admin/list/equipment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_equipmenttypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipmenttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_equipmenttypes_update:

                                // equipments_delete
                                if (preg_match('#^/directory/admin/list/equipment/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_equipments_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipments_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_equipments_delete:

                                // equipmenttypes_delete
                                if (0 === strpos($pathinfo, '/directory/admin/list/equipment-types') && preg_match('#^/directory/admin/list/equipment\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_equipmenttypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'equipmenttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_equipmenttypes_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/p')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/primary-public-user-id-types')) {
                                // usernametypes-list
                                if ('/directory/admin/list/primary-public-user-id-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_usernametypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'usernametypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'usernametypes-list',);
                                }
                                not_usernametypeslist:

                                // usernametypes_create
                                if ('/directory/admin/list/primary-public-user-id-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_usernametypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'usernametypes_create',);
                                }
                                not_usernametypes_create:

                                // usernametypes_new
                                if ('/directory/admin/list/primary-public-user-id-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_usernametypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'usernametypes_new',);
                                }
                                not_usernametypes_new:

                                // usernametypes_show
                                if (preg_match('#^/directory/admin/list/primary\\-public\\-user\\-id\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_usernametypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'usernametypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_usernametypes_show:

                                // usernametypes_edit
                                if (preg_match('#^/directory/admin/list/primary\\-public\\-user\\-id\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_usernametypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'usernametypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_usernametypes_edit:

                                // usernametypes_update
                                if (preg_match('#^/directory/admin/list/primary\\-public\\-user\\-id\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_usernametypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'usernametypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_usernametypes_update:

                                // usernametypes_delete
                                if (preg_match('#^/directory/admin/list/primary\\-public\\-user\\-id\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_usernametypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'usernametypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_usernametypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/profile-comment-group-types')) {
                                // commentgrouptypes-list
                                if ('/directory/admin/list/profile-comment-group-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_commentgrouptypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'commentgrouptypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'commentgrouptypes-list',);
                                }
                                not_commentgrouptypeslist:

                                // commentgrouptypes_create
                                if ('/directory/admin/list/profile-comment-group-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_commentgrouptypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'commentgrouptypes_create',);
                                }
                                not_commentgrouptypes_create:

                                // commentgrouptypes_new
                                if ('/directory/admin/list/profile-comment-group-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_commentgrouptypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'commentgrouptypes_new',);
                                }
                                not_commentgrouptypes_new:

                                // commentgrouptypes_show
                                if (preg_match('#^/directory/admin/list/profile\\-comment\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_commentgrouptypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'commentgrouptypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_commentgrouptypes_show:

                                // commentgrouptypes_edit
                                if (preg_match('#^/directory/admin/list/profile\\-comment\\-group\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_commentgrouptypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'commentgrouptypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_commentgrouptypes_edit:

                                // commentgrouptypes_update
                                if (preg_match('#^/directory/admin/list/profile\\-comment\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_commentgrouptypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'commentgrouptypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_commentgrouptypes_update:

                                // commentgrouptypes_delete
                                if (preg_match('#^/directory/admin/list/profile\\-comment\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_commentgrouptypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'commentgrouptypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_commentgrouptypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/percent-effort')) {
                                // efforts-list
                                if ('/directory/admin/list/percent-effort' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_effortslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'efforts-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'efforts-list',);
                                }
                                not_effortslist:

                                // efforts_create
                                if ('/directory/admin/list/percent-effort/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_efforts_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'efforts_create',);
                                }
                                not_efforts_create:

                                // efforts_new
                                if ('/directory/admin/list/percent-effort/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_efforts_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'efforts_new',);
                                }
                                not_efforts_new:

                                // efforts_show
                                if (preg_match('#^/directory/admin/list/percent\\-effort/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_efforts_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'efforts_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_efforts_show:

                                // efforts_edit
                                if (preg_match('#^/directory/admin/list/percent\\-effort/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_efforts_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'efforts_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_efforts_edit:

                                // efforts_update
                                if (preg_match('#^/directory/admin/list/percent\\-effort/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_efforts_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'efforts_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_efforts_update:

                                // efforts_delete
                                if (preg_match('#^/directory/admin/list/percent\\-effort/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_efforts_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'efforts_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_efforts_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/permission')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/permissions')) {
                                    // permission-list
                                    if ('/directory/admin/list/permissions' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionlist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'permission-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'permission-list',);
                                    }
                                    not_permissionlist:

                                    // permission_create
                                    if ('/directory/admin/list/permissions/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_permission_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'permission_create',);
                                    }
                                    not_permission_create:

                                    // permission_new
                                    if ('/directory/admin/list/permissions/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permission_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'permission_new',);
                                    }
                                    not_permission_new:

                                    // permission_show
                                    if (preg_match('#^/directory/admin/list/permissions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permission_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permission_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_permission_show:

                                    // permission_edit
                                    if (preg_match('#^/directory/admin/list/permissions/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permission_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permission_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_permission_edit:

                                    // permission_update
                                    if (preg_match('#^/directory/admin/list/permissions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_permission_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permission_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_permission_update:

                                    // permission_delete
                                    if (preg_match('#^/directory/admin/list/permissions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_permission_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permission_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_permission_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/permission-objects')) {
                                    // permissionobject-list
                                    if ('/directory/admin/list/permission-objects' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionobjectlist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'permissionobject-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'permissionobject-list',);
                                    }
                                    not_permissionobjectlist:

                                    // permissionobject_create
                                    if ('/directory/admin/list/permission-objects/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_permissionobject_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'permissionobject_create',);
                                    }
                                    not_permissionobject_create:

                                    // permissionobject_new
                                    if ('/directory/admin/list/permission-objects/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionobject_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'permissionobject_new',);
                                    }
                                    not_permissionobject_new:

                                    // permissionobject_show
                                    if (preg_match('#^/directory/admin/list/permission\\-objects/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionobject_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionobject_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_permissionobject_show:

                                    // permissionobject_edit
                                    if (preg_match('#^/directory/admin/list/permission\\-objects/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionobject_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionobject_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_permissionobject_edit:

                                    // permissionobject_update
                                    if (preg_match('#^/directory/admin/list/permission\\-objects/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_permissionobject_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionobject_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_permissionobject_update:

                                    // permissionobject_delete
                                    if (preg_match('#^/directory/admin/list/permission\\-objects/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_permissionobject_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionobject_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_permissionobject_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/permission-actions')) {
                                    // permissionaction-list
                                    if ('/directory/admin/list/permission-actions' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionactionlist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'permissionaction-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'permissionaction-list',);
                                    }
                                    not_permissionactionlist:

                                    // permissionaction_create
                                    if ('/directory/admin/list/permission-actions/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_permissionaction_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'permissionaction_create',);
                                    }
                                    not_permissionaction_create:

                                    // permissionaction_new
                                    if ('/directory/admin/list/permission-actions/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionaction_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'permissionaction_new',);
                                    }
                                    not_permissionaction_new:

                                    // permissionaction_show
                                    if (preg_match('#^/directory/admin/list/permission\\-actions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionaction_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionaction_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_permissionaction_show:

                                    // permissionaction_edit
                                    if (preg_match('#^/directory/admin/list/permission\\-actions/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_permissionaction_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionaction_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_permissionaction_edit:

                                    // permissionaction_update
                                    if (preg_match('#^/directory/admin/list/permission\\-actions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_permissionaction_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionaction_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_permissionaction_update:

                                    // permissionaction_delete
                                    if (preg_match('#^/directory/admin/list/permission\\-actions/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_permissionaction_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'permissionaction_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_permissionaction_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/position-types')) {
                                // positiontypes-list
                                if ('/directory/admin/list/position-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'positiontypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'positiontypes-list',);
                                }
                                not_positiontypeslist:

                                // positiontypes_create
                                if ('/directory/admin/list/position-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_positiontypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'positiontypes_create',);
                                }
                                not_positiontypes_create:

                                // positiontypes_new
                                if ('/directory/admin/list/position-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'positiontypes_new',);
                                }
                                not_positiontypes_new:

                                // positiontypes_show
                                if (preg_match('#^/directory/admin/list/position\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_positiontypes_show:

                                // positiontypes_edit
                                if (preg_match('#^/directory/admin/list/position\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_positiontypes_edit:

                                // positiontypes_update
                                if (preg_match('#^/directory/admin/list/position\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_positiontypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_positiontypes_update:

                                // positiontypes_delete
                                if (preg_match('#^/directory/admin/list/position\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_positiontypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_positiontypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/position-track-types')) {
                                // positiontracktypes-list
                                if ('/directory/admin/list/position-track-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontracktypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'positiontracktypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'positiontracktypes-list',);
                                }
                                not_positiontracktypeslist:

                                // positiontracktypes_create
                                if ('/directory/admin/list/position-track-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_positiontracktypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'positiontracktypes_create',);
                                }
                                not_positiontracktypes_create:

                                // positiontracktypes_new
                                if ('/directory/admin/list/position-track-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontracktypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'positiontracktypes_new',);
                                }
                                not_positiontracktypes_new:

                                // positiontracktypes_show
                                if (preg_match('#^/directory/admin/list/position\\-track\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontracktypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontracktypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_positiontracktypes_show:

                                // positiontracktypes_edit
                                if (preg_match('#^/directory/admin/list/position\\-track\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_positiontracktypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontracktypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_positiontracktypes_edit:

                                // positiontracktypes_update
                                if (preg_match('#^/directory/admin/list/position\\-track\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_positiontracktypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontracktypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_positiontracktypes_update:

                                // positiontracktypes_delete
                                if (preg_match('#^/directory/admin/list/position\\-track\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_positiontracktypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'positiontracktypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_positiontracktypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/platelet-transfusion-product-receiving')) {
                                // platelettransfusionproductreceivings-list
                                if ('/directory/admin/list/platelet-transfusion-product-receiving' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_platelettransfusionproductreceivingslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'platelettransfusionproductreceivings-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'platelettransfusionproductreceivings-list',);
                                }
                                not_platelettransfusionproductreceivingslist:

                                // platelettransfusionproductreceivings_create
                                if ('/directory/admin/list/platelet-transfusion-product-receiving/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_platelettransfusionproductreceivings_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'platelettransfusionproductreceivings_create',);
                                }
                                not_platelettransfusionproductreceivings_create:

                                // platelettransfusionproductreceivings_new
                                if ('/directory/admin/list/platelet-transfusion-product-receiving/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_platelettransfusionproductreceivings_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'platelettransfusionproductreceivings_new',);
                                }
                                not_platelettransfusionproductreceivings_new:

                                // platelettransfusionproductreceivings_show
                                if (preg_match('#^/directory/admin/list/platelet\\-transfusion\\-product\\-receiving/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_platelettransfusionproductreceivings_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'platelettransfusionproductreceivings_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_platelettransfusionproductreceivings_show:

                                // platelettransfusionproductreceivings_edit
                                if (preg_match('#^/directory/admin/list/platelet\\-transfusion\\-product\\-receiving/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_platelettransfusionproductreceivings_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'platelettransfusionproductreceivings_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_platelettransfusionproductreceivings_edit:

                                // platelettransfusionproductreceivings_update
                                if (preg_match('#^/directory/admin/list/platelet\\-transfusion\\-product\\-receiving/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_platelettransfusionproductreceivings_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'platelettransfusionproductreceivings_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_platelettransfusionproductreceivings_update:

                                // platelettransfusionproductreceivings_delete
                                if (preg_match('#^/directory/admin/list/platelet\\-transfusion\\-product\\-receiving/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_platelettransfusionproductreceivings_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'platelettransfusionproductreceivings_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_platelettransfusionproductreceivings_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/pathology-result-signatories')) {
                                // pathologyresultsignatories-list
                                if ('/directory/admin/list/pathology-result-signatories' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_pathologyresultsignatorieslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'pathologyresultsignatories-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'pathologyresultsignatories-list',);
                                }
                                not_pathologyresultsignatorieslist:

                                // pathologyresultsignatories_create
                                if ('/directory/admin/list/pathology-result-signatories/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_pathologyresultsignatories_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'pathologyresultsignatories_create',);
                                }
                                not_pathologyresultsignatories_create:

                                // pathologyresultsignatories_new
                                if ('/directory/admin/list/pathology-result-signatories/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_pathologyresultsignatories_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'pathologyresultsignatories_new',);
                                }
                                not_pathologyresultsignatories_new:

                                // pathologyresultsignatories_show
                                if (preg_match('#^/directory/admin/list/pathology\\-result\\-signatories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_pathologyresultsignatories_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologyresultsignatories_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_pathologyresultsignatories_show:

                                // pathologyresultsignatories_edit
                                if (preg_match('#^/directory/admin/list/pathology\\-result\\-signatories/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_pathologyresultsignatories_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologyresultsignatories_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_pathologyresultsignatories_edit:

                                // pathologyresultsignatories_update
                                if (preg_match('#^/directory/admin/list/pathology\\-result\\-signatories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_pathologyresultsignatories_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologyresultsignatories_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_pathologyresultsignatories_update:

                                // pathologyresultsignatories_delete
                                if (preg_match('#^/directory/admin/list/pathology\\-result\\-signatories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_pathologyresultsignatories_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologyresultsignatories_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_pathologyresultsignatories_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/l')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/loca')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/location-types')) {
                                    // locationtypes-list
                                    if ('/directory/admin/list/location-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationtypeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'locationtypes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'locationtypes-list',);
                                    }
                                    not_locationtypeslist:

                                    // locationtypes_create
                                    if ('/directory/admin/list/location-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_locationtypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'locationtypes_create',);
                                    }
                                    not_locationtypes_create:

                                    // locationtypes_new
                                    if ('/directory/admin/list/location-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationtypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'locationtypes_new',);
                                    }
                                    not_locationtypes_new:

                                    // locationtypes_show
                                    if (preg_match('#^/directory/admin/list/location\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationtypes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationtypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_locationtypes_show:

                                    // locationtypes_edit
                                    if (preg_match('#^/directory/admin/list/location\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationtypes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationtypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_locationtypes_edit:

                                    // locationtypes_update
                                    if (preg_match('#^/directory/admin/list/location\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_locationtypes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationtypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_locationtypes_update:

                                    // locationtypes_delete
                                    if (preg_match('#^/directory/admin/list/location\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_locationtypes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationtypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_locationtypes_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/location-privacy-types')) {
                                    // locationprivacy-list
                                    if ('/directory/admin/list/location-privacy-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationprivacylist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'locationprivacy-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'locationprivacy-list',);
                                    }
                                    not_locationprivacylist:

                                    // locationprivacy_create
                                    if ('/directory/admin/list/location-privacy-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_locationprivacy_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'locationprivacy_create',);
                                    }
                                    not_locationprivacy_create:

                                    // locationprivacy_new
                                    if ('/directory/admin/list/location-privacy-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationprivacy_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'locationprivacy_new',);
                                    }
                                    not_locationprivacy_new:

                                    // locationprivacy_show
                                    if (preg_match('#^/directory/admin/list/location\\-privacy\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationprivacy_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationprivacy_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_locationprivacy_show:

                                    // locationprivacy_edit
                                    if (preg_match('#^/directory/admin/list/location\\-privacy\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locationprivacy_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationprivacy_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_locationprivacy_edit:

                                    // locationprivacy_update
                                    if (preg_match('#^/directory/admin/list/location\\-privacy\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_locationprivacy_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationprivacy_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_locationprivacy_update:

                                    // locationprivacy_delete
                                    if (preg_match('#^/directory/admin/list/location\\-privacy\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_locationprivacy_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locationprivacy_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_locationprivacy_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/locales')) {
                                    // locales-list
                                    if ('/directory/admin/list/locales' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_localeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'locales-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'locales-list',);
                                    }
                                    not_localeslist:

                                    // locales_create
                                    if ('/directory/admin/list/locales/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_locales_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'locales_create',);
                                    }
                                    not_locales_create:

                                    // locales_new
                                    if ('/directory/admin/list/locales/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locales_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'locales_new',);
                                    }
                                    not_locales_new:

                                    // locales_show
                                    if (preg_match('#^/directory/admin/list/locales/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locales_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locales_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_locales_show:

                                    // locales_edit
                                    if (preg_match('#^/directory/admin/list/locales/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_locales_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locales_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_locales_edit:

                                    // locales_update
                                    if (preg_match('#^/directory/admin/list/locales/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_locales_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locales_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_locales_update:

                                    // locales_delete
                                    if (preg_match('#^/directory/admin/list/locales/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_locales_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'locales_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_locales_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/languages')) {
                                // languages-list
                                if ('/directory/admin/list/languages' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_languageslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'languages-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'languages-list',);
                                }
                                not_languageslist:

                                // languages_create
                                if ('/directory/admin/list/languages/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_languages_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'languages_create',);
                                }
                                not_languages_create:

                                // languages_new
                                if ('/directory/admin/list/languages/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_languages_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'languages_new',);
                                }
                                not_languages_new:

                                // languages_show
                                if (preg_match('#^/directory/admin/list/languages/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_languages_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'languages_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_languages_show:

                                // languages_edit
                                if (preg_match('#^/directory/admin/list/languages/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_languages_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'languages_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_languages_edit:

                                // languages_update
                                if (preg_match('#^/directory/admin/list/languages/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_languages_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'languages_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_languages_update:

                                // languages_delete
                                if (preg_match('#^/directory/admin/list/languages/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_languages_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'languages_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_languages_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/lab-result-')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/lab-result-names')) {
                                    // labresultnames-list
                                    if ('/directory/admin/list/lab-result-names' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultnameslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'labresultnames-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'labresultnames-list',);
                                    }
                                    not_labresultnameslist:

                                    // labresultnames_create
                                    if ('/directory/admin/list/lab-result-names/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_labresultnames_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'labresultnames_create',);
                                    }
                                    not_labresultnames_create:

                                    // labresultnames_new
                                    if ('/directory/admin/list/lab-result-names/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultnames_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'labresultnames_new',);
                                    }
                                    not_labresultnames_new:

                                    // labresultnames_show
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-names/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultnames_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultnames_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_labresultnames_show:

                                    // labresultnames_edit
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-names/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultnames_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultnames_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_labresultnames_edit:

                                    // labresultnames_update
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-names/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_labresultnames_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultnames_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_labresultnames_update:

                                    // labresultnames_delete
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-names/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_labresultnames_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultnames_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_labresultnames_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/lab-result-units-measures')) {
                                    // labresultunitsmeasures-list
                                    if ('/directory/admin/list/lab-result-units-measures' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultunitsmeasureslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'labresultunitsmeasures-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'labresultunitsmeasures-list',);
                                    }
                                    not_labresultunitsmeasureslist:

                                    // labresultunitsmeasures_create
                                    if ('/directory/admin/list/lab-result-units-measures/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_labresultunitsmeasures_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'labresultunitsmeasures_create',);
                                    }
                                    not_labresultunitsmeasures_create:

                                    // labresultunitsmeasures_new
                                    if ('/directory/admin/list/lab-result-units-measures/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultunitsmeasures_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'labresultunitsmeasures_new',);
                                    }
                                    not_labresultunitsmeasures_new:

                                    // labresultunitsmeasures_show
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-units\\-measures/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultunitsmeasures_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultunitsmeasures_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_labresultunitsmeasures_show:

                                    // labresultunitsmeasures_edit
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-units\\-measures/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultunitsmeasures_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultunitsmeasures_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_labresultunitsmeasures_edit:

                                    // labresultunitsmeasures_update
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-units\\-measures/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_labresultunitsmeasures_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultunitsmeasures_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_labresultunitsmeasures_update:

                                    // labresultunitsmeasures_delete
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-units\\-measures/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_labresultunitsmeasures_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultunitsmeasures_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_labresultunitsmeasures_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/lab-result-flags')) {
                                    // labresultflags-list
                                    if ('/directory/admin/list/lab-result-flags' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultflagslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'labresultflags-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'labresultflags-list',);
                                    }
                                    not_labresultflagslist:

                                    // labresultflags_create
                                    if ('/directory/admin/list/lab-result-flags/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_labresultflags_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'labresultflags_create',);
                                    }
                                    not_labresultflags_create:

                                    // labresultflags_new
                                    if ('/directory/admin/list/lab-result-flags/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultflags_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'labresultflags_new',);
                                    }
                                    not_labresultflags_new:

                                    // labresultflags_show
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-flags/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultflags_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultflags_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_labresultflags_show:

                                    // labresultflags_edit
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-flags/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_labresultflags_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultflags_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_labresultflags_edit:

                                    // labresultflags_update
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-flags/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_labresultflags_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultflags_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_labresultflags_update:

                                    // labresultflags_delete
                                    if (preg_match('#^/directory/admin/list/lab\\-result\\-flags/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_labresultflags_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'labresultflags_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_labresultflags_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/lecture-venues')) {
                                // organizations-list
                                if ('/directory/admin/list/lecture-venues' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizationslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'organizations-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'organizations-list',);
                                }
                                not_organizationslist:

                                // organizations_create
                                if ('/directory/admin/list/lecture-venues/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_organizations_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'organizations_create',);
                                }
                                not_organizations_create:

                                // organizations_new
                                if ('/directory/admin/list/lecture-venues/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizations_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'organizations_new',);
                                }
                                not_organizations_new:

                                // organizations_show
                                if (preg_match('#^/directory/admin/list/lecture\\-venues/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizations_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizations_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_organizations_show:

                                // organizations_edit
                                if (preg_match('#^/directory/admin/list/lecture\\-venues/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizations_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizations_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_organizations_edit:

                                // organizations_update
                                if (preg_match('#^/directory/admin/list/lecture\\-venues/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_organizations_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizations_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_organizations_update:

                                // organizations_delete
                                if (preg_match('#^/directory/admin/list/lecture\\-venues/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_organizations_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizations_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_organizations_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/li')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/link-types')) {
                                    // linktypes-list
                                    if ('/directory/admin/list/link-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_linktypeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'linktypes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'linktypes-list',);
                                    }
                                    not_linktypeslist:

                                    // linktypes_create
                                    if ('/directory/admin/list/link-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_linktypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'linktypes_create',);
                                    }
                                    not_linktypes_create:

                                    // linktypes_new
                                    if ('/directory/admin/list/link-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_linktypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'linktypes_new',);
                                    }
                                    not_linktypes_new:

                                    // linktypes_show
                                    if (preg_match('#^/directory/admin/list/link\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_linktypes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'linktypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_linktypes_show:

                                    // linktypes_edit
                                    if (preg_match('#^/directory/admin/list/link\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_linktypes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'linktypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_linktypes_edit:

                                    // linktypes_update
                                    if (preg_match('#^/directory/admin/list/link\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_linktypes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'linktypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_linktypes_update:

                                    // linktypes_delete
                                    if (preg_match('#^/directory/admin/list/link\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_linktypes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'linktypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_linktypes_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/life-forms')) {
                                    // lifeforms-list
                                    if ('/directory/admin/list/life-forms' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_lifeformslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'lifeforms-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'lifeforms-list',);
                                    }
                                    not_lifeformslist:

                                    // lifeforms_create
                                    if ('/directory/admin/list/life-forms/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_lifeforms_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'lifeforms_create',);
                                    }
                                    not_lifeforms_create:

                                    // lifeforms_new
                                    if ('/directory/admin/list/life-forms/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_lifeforms_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'lifeforms_new',);
                                    }
                                    not_lifeforms_new:

                                    // lifeforms_show
                                    if (preg_match('#^/directory/admin/list/life\\-forms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_lifeforms_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'lifeforms_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_lifeforms_show:

                                    // lifeforms_edit
                                    if (preg_match('#^/directory/admin/list/life\\-forms/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_lifeforms_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'lifeforms_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_lifeforms_edit:

                                    // lifeforms_update
                                    if (preg_match('#^/directory/admin/list/life\\-forms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_lifeforms_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'lifeforms_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_lifeforms_update:

                                    // lifeforms_delete
                                    if (preg_match('#^/directory/admin/list/life\\-forms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_lifeforms_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'lifeforms_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_lifeforms_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/list-manager')) {
                                    // platformlistmanager_create
                                    if ('/directory/admin/list/list-manager/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_platformlistmanager_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'platformlistmanager_create',);
                                    }
                                    not_platformlistmanager_create:

                                    // platformlistmanager_new
                                    if ('/directory/admin/list/list-manager/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_platformlistmanager_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'platformlistmanager_new',);
                                    }
                                    not_platformlistmanager_new:

                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/training-')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/training-completion-reasons')) {
                                // completionreasons-list
                                if ('/directory/admin/list/training-completion-reasons' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_completionreasonslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'completionreasons-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'completionreasons-list',);
                                }
                                not_completionreasonslist:

                                // completionreasons_create
                                if ('/directory/admin/list/training-completion-reasons/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_completionreasons_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'completionreasons_create',);
                                }
                                not_completionreasons_create:

                                // completionreasons_new
                                if ('/directory/admin/list/training-completion-reasons/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_completionreasons_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'completionreasons_new',);
                                }
                                not_completionreasons_new:

                                // completionreasons_show
                                if (preg_match('#^/directory/admin/list/training\\-completion\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_completionreasons_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'completionreasons_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_completionreasons_show:

                                // completionreasons_edit
                                if (preg_match('#^/directory/admin/list/training\\-completion\\-reasons/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_completionreasons_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'completionreasons_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_completionreasons_edit:

                                // completionreasons_update
                                if (preg_match('#^/directory/admin/list/training\\-completion\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_completionreasons_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'completionreasons_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_completionreasons_update:

                                // completionreasons_delete
                                if (preg_match('#^/directory/admin/list/training\\-completion\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_completionreasons_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'completionreasons_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_completionreasons_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/training-degrees')) {
                                // trainingdegrees-list
                                if ('/directory/admin/list/training-degrees' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingdegreeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'trainingdegrees-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'trainingdegrees-list',);
                                }
                                not_trainingdegreeslist:

                                // trainingdegrees_create
                                if ('/directory/admin/list/training-degrees/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_trainingdegrees_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'trainingdegrees_create',);
                                }
                                not_trainingdegrees_create:

                                // trainingdegrees_new
                                if ('/directory/admin/list/training-degrees/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingdegrees_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'trainingdegrees_new',);
                                }
                                not_trainingdegrees_new:

                                // trainingdegrees_show
                                if (preg_match('#^/directory/admin/list/training\\-degrees/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingdegrees_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingdegrees_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_trainingdegrees_show:

                                // trainingdegrees_edit
                                if (preg_match('#^/directory/admin/list/training\\-degrees/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingdegrees_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingdegrees_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_trainingdegrees_edit:

                                // trainingdegrees_update
                                if (preg_match('#^/directory/admin/list/training\\-degrees/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_trainingdegrees_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingdegrees_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_trainingdegrees_update:

                                // trainingdegrees_delete
                                if (preg_match('#^/directory/admin/list/training\\-degrees/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_trainingdegrees_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingdegrees_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_trainingdegrees_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/training-majors')) {
                                // trainingmajors-list
                                if ('/directory/admin/list/training-majors' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingmajorslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'trainingmajors-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'trainingmajors-list',);
                                }
                                not_trainingmajorslist:

                                // trainingmajors_create
                                if ('/directory/admin/list/training-majors/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_trainingmajors_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'trainingmajors_create',);
                                }
                                not_trainingmajors_create:

                                // trainingmajors_new
                                if ('/directory/admin/list/training-majors/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingmajors_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'trainingmajors_new',);
                                }
                                not_trainingmajors_new:

                                // trainingmajors_show
                                if (preg_match('#^/directory/admin/list/training\\-majors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingmajors_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingmajors_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_trainingmajors_show:

                                // trainingmajors_edit
                                if (preg_match('#^/directory/admin/list/training\\-majors/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingmajors_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingmajors_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_trainingmajors_edit:

                                // trainingmajors_update
                                if (preg_match('#^/directory/admin/list/training\\-majors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_trainingmajors_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingmajors_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_trainingmajors_update:

                                // trainingmajors_delete
                                if (preg_match('#^/directory/admin/list/training\\-majors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_trainingmajors_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingmajors_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_trainingmajors_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/training-minors')) {
                                // trainingminors-list
                                if ('/directory/admin/list/training-minors' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingminorslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'trainingminors-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'trainingminors-list',);
                                }
                                not_trainingminorslist:

                                // trainingminors_create
                                if ('/directory/admin/list/training-minors/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_trainingminors_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'trainingminors_create',);
                                }
                                not_trainingminors_create:

                                // trainingminors_new
                                if ('/directory/admin/list/training-minors/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingminors_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'trainingminors_new',);
                                }
                                not_trainingminors_new:

                                // trainingminors_show
                                if (preg_match('#^/directory/admin/list/training\\-minors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingminors_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingminors_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_trainingminors_show:

                                // trainingminors_edit
                                if (preg_match('#^/directory/admin/list/training\\-minors/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingminors_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingminors_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_trainingminors_edit:

                                // trainingminors_update
                                if (preg_match('#^/directory/admin/list/training\\-minors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_trainingminors_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingminors_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_trainingminors_update:

                                // trainingminors_delete
                                if (preg_match('#^/directory/admin/list/training\\-minors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_trainingminors_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingminors_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_trainingminors_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/training-honors')) {
                                // traininghonors-list
                                if ('/directory/admin/list/training-honors' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_traininghonorslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'traininghonors-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'traininghonors-list',);
                                }
                                not_traininghonorslist:

                                // traininghonors_create
                                if ('/directory/admin/list/training-honors/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_traininghonors_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'traininghonors_create',);
                                }
                                not_traininghonors_create:

                                // traininghonors_new
                                if ('/directory/admin/list/training-honors/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_traininghonors_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'traininghonors_new',);
                                }
                                not_traininghonors_new:

                                // traininghonors_show
                                if (preg_match('#^/directory/admin/list/training\\-honors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_traininghonors_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'traininghonors_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_traininghonors_show:

                                // traininghonors_edit
                                if (preg_match('#^/directory/admin/list/training\\-honors/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_traininghonors_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'traininghonors_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_traininghonors_edit:

                                // traininghonors_update
                                if (preg_match('#^/directory/admin/list/training\\-honors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_traininghonors_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'traininghonors_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_traininghonors_update:

                                // traininghonors_delete
                                if (preg_match('#^/directory/admin/list/training\\-honors/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_traininghonors_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'traininghonors_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_traininghonors_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/training-types')) {
                                // trainingtypes-list
                                if ('/directory/admin/list/training-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingtypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'trainingtypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'trainingtypes-list',);
                                }
                                not_trainingtypeslist:

                                // trainingtypes_create
                                if ('/directory/admin/list/training-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_trainingtypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'trainingtypes_create',);
                                }
                                not_trainingtypes_create:

                                // trainingtypes_new
                                if ('/directory/admin/list/training-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingtypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'trainingtypes_new',);
                                }
                                not_trainingtypes_new:

                                // trainingtypes_show
                                if (preg_match('#^/directory/admin/list/training\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingtypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingtypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_trainingtypes_show:

                                // trainingtypes_edit
                                if (preg_match('#^/directory/admin/list/training\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_trainingtypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingtypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_trainingtypes_edit:

                                // trainingtypes_update
                                if (preg_match('#^/directory/admin/list/training\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_trainingtypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingtypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_trainingtypes_update:

                                // trainingtypes_delete
                                if (preg_match('#^/directory/admin/list/training\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_trainingtypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'trainingtypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_trainingtypes_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/transfusion-')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/transfusion-reaction-types')) {
                                // transfusionreactiontypes-list
                                if ('/directory/admin/list/transfusion-reaction-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionreactiontypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'transfusionreactiontypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'transfusionreactiontypes-list',);
                                }
                                not_transfusionreactiontypeslist:

                                // transfusionreactiontypes_create
                                if ('/directory/admin/list/transfusion-reaction-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_transfusionreactiontypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'transfusionreactiontypes_create',);
                                }
                                not_transfusionreactiontypes_create:

                                // transfusionreactiontypes_new
                                if ('/directory/admin/list/transfusion-reaction-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionreactiontypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'transfusionreactiontypes_new',);
                                }
                                not_transfusionreactiontypes_new:

                                // transfusionreactiontypes_show
                                if (preg_match('#^/directory/admin/list/transfusion\\-reaction\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionreactiontypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionreactiontypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_transfusionreactiontypes_show:

                                // transfusionreactiontypes_edit
                                if (preg_match('#^/directory/admin/list/transfusion\\-reaction\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionreactiontypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionreactiontypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_transfusionreactiontypes_edit:

                                // transfusionreactiontypes_update
                                if (preg_match('#^/directory/admin/list/transfusion\\-reaction\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_transfusionreactiontypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionreactiontypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_transfusionreactiontypes_update:

                                // transfusionreactiontypes_delete
                                if (preg_match('#^/directory/admin/list/transfusion\\-reaction\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_transfusionreactiontypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionreactiontypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_transfusionreactiontypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/transfusion-antibody-screen-results')) {
                                // transfusionantibodyscreenresults-list
                                if ('/directory/admin/list/transfusion-antibody-screen-results' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionantibodyscreenresultslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'transfusionantibodyscreenresults-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'transfusionantibodyscreenresults-list',);
                                }
                                not_transfusionantibodyscreenresultslist:

                                // transfusionantibodyscreenresults_create
                                if ('/directory/admin/list/transfusion-antibody-screen-results/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_transfusionantibodyscreenresults_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'transfusionantibodyscreenresults_create',);
                                }
                                not_transfusionantibodyscreenresults_create:

                                // transfusionantibodyscreenresults_new
                                if ('/directory/admin/list/transfusion-antibody-screen-results/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionantibodyscreenresults_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'transfusionantibodyscreenresults_new',);
                                }
                                not_transfusionantibodyscreenresults_new:

                                // transfusionantibodyscreenresults_show
                                if (preg_match('#^/directory/admin/list/transfusion\\-antibody\\-screen\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionantibodyscreenresults_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionantibodyscreenresults_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_transfusionantibodyscreenresults_show:

                                // transfusionantibodyscreenresults_edit
                                if (preg_match('#^/directory/admin/list/transfusion\\-antibody\\-screen\\-results/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionantibodyscreenresults_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionantibodyscreenresults_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_transfusionantibodyscreenresults_edit:

                                // transfusionantibodyscreenresults_update
                                if (preg_match('#^/directory/admin/list/transfusion\\-antibody\\-screen\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_transfusionantibodyscreenresults_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionantibodyscreenresults_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_transfusionantibodyscreenresults_update:

                                // transfusionantibodyscreenresults_delete
                                if (preg_match('#^/directory/admin/list/transfusion\\-antibody\\-screen\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_transfusionantibodyscreenresults_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionantibodyscreenresults_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_transfusionantibodyscreenresults_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/transfusion-crossmatch-results')) {
                                // transfusioncrossmatchresults-list
                                if ('/directory/admin/list/transfusion-crossmatch-results' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusioncrossmatchresultslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'transfusioncrossmatchresults-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'transfusioncrossmatchresults-list',);
                                }
                                not_transfusioncrossmatchresultslist:

                                // transfusioncrossmatchresults_create
                                if ('/directory/admin/list/transfusion-crossmatch-results/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_transfusioncrossmatchresults_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'transfusioncrossmatchresults_create',);
                                }
                                not_transfusioncrossmatchresults_create:

                                // transfusioncrossmatchresults_new
                                if ('/directory/admin/list/transfusion-crossmatch-results/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusioncrossmatchresults_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'transfusioncrossmatchresults_new',);
                                }
                                not_transfusioncrossmatchresults_new:

                                // transfusioncrossmatchresults_show
                                if (preg_match('#^/directory/admin/list/transfusion\\-crossmatch\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusioncrossmatchresults_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusioncrossmatchresults_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_transfusioncrossmatchresults_show:

                                // transfusioncrossmatchresults_edit
                                if (preg_match('#^/directory/admin/list/transfusion\\-crossmatch\\-results/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusioncrossmatchresults_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusioncrossmatchresults_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_transfusioncrossmatchresults_edit:

                                // transfusioncrossmatchresults_update
                                if (preg_match('#^/directory/admin/list/transfusion\\-crossmatch\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_transfusioncrossmatchresults_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusioncrossmatchresults_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_transfusioncrossmatchresults_update:

                                // transfusioncrossmatchresults_delete
                                if (preg_match('#^/directory/admin/list/transfusion\\-crossmatch\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_transfusioncrossmatchresults_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusioncrossmatchresults_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_transfusioncrossmatchresults_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/transfusion-dat-results')) {
                                // transfusiondatresults-list
                                if ('/directory/admin/list/transfusion-dat-results' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusiondatresultslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'transfusiondatresults-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'transfusiondatresults-list',);
                                }
                                not_transfusiondatresultslist:

                                // transfusiondatresults_create
                                if ('/directory/admin/list/transfusion-dat-results/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_transfusiondatresults_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'transfusiondatresults_create',);
                                }
                                not_transfusiondatresults_create:

                                // transfusiondatresults_new
                                if ('/directory/admin/list/transfusion-dat-results/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusiondatresults_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'transfusiondatresults_new',);
                                }
                                not_transfusiondatresults_new:

                                // transfusiondatresults_show
                                if (preg_match('#^/directory/admin/list/transfusion\\-dat\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusiondatresults_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusiondatresults_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_transfusiondatresults_show:

                                // transfusiondatresults_edit
                                if (preg_match('#^/directory/admin/list/transfusion\\-dat\\-results/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusiondatresults_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusiondatresults_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_transfusiondatresults_edit:

                                // transfusiondatresults_update
                                if (preg_match('#^/directory/admin/list/transfusion\\-dat\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_transfusiondatresults_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusiondatresults_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_transfusiondatresults_update:

                                // transfusiondatresults_delete
                                if (preg_match('#^/directory/admin/list/transfusion\\-dat\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_transfusiondatresults_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusiondatresults_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_transfusiondatresults_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/transfusion-hemolysis-check-results')) {
                                // transfusionhemolysischeckresults-list
                                if ('/directory/admin/list/transfusion-hemolysis-check-results' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionhemolysischeckresultslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'transfusionhemolysischeckresults-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'transfusionhemolysischeckresults-list',);
                                }
                                not_transfusionhemolysischeckresultslist:

                                // transfusionhemolysischeckresults_create
                                if ('/directory/admin/list/transfusion-hemolysis-check-results/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_transfusionhemolysischeckresults_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'transfusionhemolysischeckresults_create',);
                                }
                                not_transfusionhemolysischeckresults_create:

                                // transfusionhemolysischeckresults_new
                                if ('/directory/admin/list/transfusion-hemolysis-check-results/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionhemolysischeckresults_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'transfusionhemolysischeckresults_new',);
                                }
                                not_transfusionhemolysischeckresults_new:

                                // transfusionhemolysischeckresults_show
                                if (preg_match('#^/directory/admin/list/transfusion\\-hemolysis\\-check\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionhemolysischeckresults_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionhemolysischeckresults_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_transfusionhemolysischeckresults_show:

                                // transfusionhemolysischeckresults_edit
                                if (preg_match('#^/directory/admin/list/transfusion\\-hemolysis\\-check\\-results/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionhemolysischeckresults_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionhemolysischeckresults_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_transfusionhemolysischeckresults_edit:

                                // transfusionhemolysischeckresults_update
                                if (preg_match('#^/directory/admin/list/transfusion\\-hemolysis\\-check\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_transfusionhemolysischeckresults_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionhemolysischeckresults_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_transfusionhemolysischeckresults_update:

                                // transfusionhemolysischeckresults_delete
                                if (preg_match('#^/directory/admin/list/transfusion\\-hemolysis\\-check\\-results/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_transfusionhemolysischeckresults_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionhemolysischeckresults_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_transfusionhemolysischeckresults_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/transfusion-product-status')) {
                                // transfusionproductstatus-list
                                if ('/directory/admin/list/transfusion-product-status' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionproductstatuslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'transfusionproductstatus-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'transfusionproductstatus-list',);
                                }
                                not_transfusionproductstatuslist:

                                // transfusionproductstatus_create
                                if ('/directory/admin/list/transfusion-product-status/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_transfusionproductstatus_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'transfusionproductstatus_create',);
                                }
                                not_transfusionproductstatus_create:

                                // transfusionproductstatus_new
                                if ('/directory/admin/list/transfusion-product-status/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionproductstatus_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'transfusionproductstatus_new',);
                                }
                                not_transfusionproductstatus_new:

                                // transfusionproductstatus_show
                                if (preg_match('#^/directory/admin/list/transfusion\\-product\\-status/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionproductstatus_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionproductstatus_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_transfusionproductstatus_show:

                                // transfusionproductstatus_edit
                                if (preg_match('#^/directory/admin/list/transfusion\\-product\\-status/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_transfusionproductstatus_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionproductstatus_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_transfusionproductstatus_edit:

                                // transfusionproductstatus_update
                                if (preg_match('#^/directory/admin/list/transfusion\\-product\\-status/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_transfusionproductstatus_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionproductstatus_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_transfusionproductstatus_update:

                                // transfusionproductstatus_delete
                                if (preg_match('#^/directory/admin/list/transfusion\\-product\\-status/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_transfusionproductstatus_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'transfusionproductstatus_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_transfusionproductstatus_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/document-types')) {
                            // documenttypes-list
                            if ('/directory/admin/list/document-types' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_documenttypeslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'documenttypes-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'documenttypes-list',);
                            }
                            not_documenttypeslist:

                            // documenttypes_create
                            if ('/directory/admin/list/document-types/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_documenttypes_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'documenttypes_create',);
                            }
                            not_documenttypes_create:

                            // documenttypes_new
                            if ('/directory/admin/list/document-types/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_documenttypes_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'documenttypes_new',);
                            }
                            not_documenttypes_new:

                            // documenttypes_show
                            if (preg_match('#^/directory/admin/list/document\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_documenttypes_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'documenttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_documenttypes_show:

                            // documenttypes_edit
                            if (preg_match('#^/directory/admin/list/document\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_documenttypes_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'documenttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_documenttypes_edit:

                            // documenttypes_update
                            if (preg_match('#^/directory/admin/list/document\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_documenttypes_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'documenttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_documenttypes_update:

                            // documenttypes_delete
                            if (preg_match('#^/directory/admin/list/document\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_documenttypes_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'documenttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_documenttypes_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/o')) {
                            if (0 === strpos($pathinfo, '/directory/admin/list/organizational-group-types')) {
                                // organizationalgrouptypes-list
                                if ('/directory/admin/list/organizational-group-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizationalgrouptypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'organizationalgrouptypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'organizationalgrouptypes-list',);
                                }
                                not_organizationalgrouptypeslist:

                                // organizationalgrouptypes_create
                                if ('/directory/admin/list/organizational-group-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_organizationalgrouptypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'organizationalgrouptypes_create',);
                                }
                                not_organizationalgrouptypes_create:

                                // organizationalgrouptypes_new
                                if ('/directory/admin/list/organizational-group-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizationalgrouptypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'organizationalgrouptypes_new',);
                                }
                                not_organizationalgrouptypes_new:

                                // organizationalgrouptypes_show
                                if (preg_match('#^/directory/admin/list/organizational\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizationalgrouptypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizationalgrouptypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_organizationalgrouptypes_show:

                                // organizationalgrouptypes_edit
                                if (preg_match('#^/directory/admin/list/organizational\\-group\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_organizationalgrouptypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizationalgrouptypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_organizationalgrouptypes_edit:

                                // organizationalgrouptypes_update
                                if (preg_match('#^/directory/admin/list/organizational\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_organizationalgrouptypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizationalgrouptypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_organizationalgrouptypes_update:

                                // organizationalgrouptypes_delete
                                if (preg_match('#^/directory/admin/list/organizational\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_organizationalgrouptypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'organizationalgrouptypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_organizationalgrouptypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/object-types')) {
                                // objecttypes-list
                                if ('/directory/admin/list/object-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_objecttypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'objecttypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttypes-list',);
                                }
                                not_objecttypeslist:

                                // objecttypes_create
                                if ('/directory/admin/list/object-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_objecttypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttypes_create',);
                                }
                                not_objecttypes_create:

                                // objecttypes_new
                                if ('/directory/admin/list/object-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_objecttypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttypes_new',);
                                }
                                not_objecttypes_new:

                                // objecttypes_show
                                if (preg_match('#^/directory/admin/list/object\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_objecttypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                }
                                not_objecttypes_show:

                                // objecttypes_edit
                                if (preg_match('#^/directory/admin/list/object\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_objecttypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                }
                                not_objecttypes_edit:

                                // objecttypes_update
                                if (preg_match('#^/directory/admin/list/object\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_objecttypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                }
                                not_objecttypes_update:

                                // objecttypes_delete
                                if (preg_match('#^/directory/admin/list/object\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_objecttypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                }
                                not_objecttypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/directory/admin/list/object-type-')) {
                                if (0 === strpos($pathinfo, '/directory/admin/list/object-type-texts')) {
                                    // objecttypetexts-list
                                    if ('/directory/admin/list/object-type-texts' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypetextslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'objecttypetexts-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttypetexts-list',);
                                    }
                                    not_objecttypetextslist:

                                    // objecttypetexts_create
                                    if ('/directory/admin/list/object-type-texts/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_objecttypetexts_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttypetexts_create',);
                                    }
                                    not_objecttypetexts_create:

                                    // objecttypetexts_new
                                    if ('/directory/admin/list/object-type-texts/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypetexts_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttypetexts_new',);
                                    }
                                    not_objecttypetexts_new:

                                    // objecttypetexts_show
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-texts/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypetexts_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypetexts_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_objecttypetexts_show:

                                    // objecttypetexts_edit
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-texts/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypetexts_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypetexts_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_objecttypetexts_edit:

                                    // objecttypetexts_update
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-texts/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_objecttypetexts_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypetexts_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_objecttypetexts_update:

                                    // objecttypetexts_delete
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-texts/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_objecttypetexts_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypetexts_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_objecttypetexts_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/object-type-strings')) {
                                    // objecttypestrings-list
                                    if ('/directory/admin/list/object-type-strings' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypestringslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'objecttypestrings-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttypestrings-list',);
                                    }
                                    not_objecttypestringslist:

                                    // objecttypestrings_create
                                    if ('/directory/admin/list/object-type-strings/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_objecttypestrings_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttypestrings_create',);
                                    }
                                    not_objecttypestrings_create:

                                    // objecttypestrings_new
                                    if ('/directory/admin/list/object-type-strings/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypestrings_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttypestrings_new',);
                                    }
                                    not_objecttypestrings_new:

                                    // objecttypestrings_show
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-strings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypestrings_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypestrings_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_objecttypestrings_show:

                                    // objecttypestrings_edit
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-strings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypestrings_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypestrings_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_objecttypestrings_edit:

                                    // objecttypestrings_update
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-strings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_objecttypestrings_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypestrings_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_objecttypestrings_update:

                                    // objecttypestrings_delete
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-strings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_objecttypestrings_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypestrings_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_objecttypestrings_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/object-type-dropdowns')) {
                                    // objecttypedropdowns-list
                                    if ('/directory/admin/list/object-type-dropdowns' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedropdownslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'objecttypedropdowns-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttypedropdowns-list',);
                                    }
                                    not_objecttypedropdownslist:

                                    // objecttypedropdowns_create
                                    if ('/directory/admin/list/object-type-dropdowns/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_objecttypedropdowns_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttypedropdowns_create',);
                                    }
                                    not_objecttypedropdowns_create:

                                    // objecttypedropdowns_new
                                    if ('/directory/admin/list/object-type-dropdowns/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedropdowns_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttypedropdowns_new',);
                                    }
                                    not_objecttypedropdowns_new:

                                    // objecttypedropdowns_show
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-dropdowns/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedropdowns_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedropdowns_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_objecttypedropdowns_show:

                                    // objecttypedropdowns_edit
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-dropdowns/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedropdowns_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedropdowns_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_objecttypedropdowns_edit:

                                    // objecttypedropdowns_update
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-dropdowns/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_objecttypedropdowns_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedropdowns_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_objecttypedropdowns_update:

                                    // objecttypedropdowns_delete
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-dropdowns/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_objecttypedropdowns_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedropdowns_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_objecttypedropdowns_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/object-type-datetimes')) {
                                    // objecttypedatetimes-list
                                    if ('/directory/admin/list/object-type-datetimes' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedatetimeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'objecttypedatetimes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttypedatetimes-list',);
                                    }
                                    not_objecttypedatetimeslist:

                                    // objecttypedatetimes_create
                                    if ('/directory/admin/list/object-type-datetimes/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_objecttypedatetimes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttypedatetimes_create',);
                                    }
                                    not_objecttypedatetimes_create:

                                    // objecttypedatetimes_new
                                    if ('/directory/admin/list/object-type-datetimes/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedatetimes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttypedatetimes_new',);
                                    }
                                    not_objecttypedatetimes_new:

                                    // objecttypedatetimes_show
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-datetimes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedatetimes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedatetimes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_objecttypedatetimes_show:

                                    // objecttypedatetimes_edit
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-datetimes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypedatetimes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedatetimes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_objecttypedatetimes_edit:

                                    // objecttypedatetimes_update
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-datetimes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_objecttypedatetimes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedatetimes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_objecttypedatetimes_update:

                                    // objecttypedatetimes_delete
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-datetimes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_objecttypedatetimes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypedatetimes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_objecttypedatetimes_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/object-type-checkboxes')) {
                                    // objecttypecheckboxs-list
                                    if ('/directory/admin/list/object-type-checkboxes' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypecheckboxslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'objecttypecheckboxs-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttypecheckboxs-list',);
                                    }
                                    not_objecttypecheckboxslist:

                                    // objecttypecheckboxs_create
                                    if ('/directory/admin/list/object-type-checkboxes/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_objecttypecheckboxs_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttypecheckboxs_create',);
                                    }
                                    not_objecttypecheckboxs_create:

                                    // objecttypecheckboxs_new
                                    if ('/directory/admin/list/object-type-checkboxes/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypecheckboxs_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttypecheckboxs_new',);
                                    }
                                    not_objecttypecheckboxs_new:

                                    // objecttypecheckboxs_show
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-checkboxes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypecheckboxs_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypecheckboxs_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_objecttypecheckboxs_show:

                                    // objecttypecheckboxs_edit
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-checkboxes/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttypecheckboxs_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypecheckboxs_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_objecttypecheckboxs_edit:

                                    // objecttypecheckboxs_update
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-checkboxes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_objecttypecheckboxs_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypecheckboxs_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_objecttypecheckboxs_update:

                                    // objecttypecheckboxs_delete
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-checkboxes/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_objecttypecheckboxs_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttypecheckboxs_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_objecttypecheckboxs_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/directory/admin/list/object-type-radio-buttons')) {
                                    // objecttyperadiobuttons-list
                                    if ('/directory/admin/list/object-type-radio-buttons' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttyperadiobuttonslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'objecttyperadiobuttons-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'objecttyperadiobuttons-list',);
                                    }
                                    not_objecttyperadiobuttonslist:

                                    // objecttyperadiobuttons_create
                                    if ('/directory/admin/list/object-type-radio-buttons/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_objecttyperadiobuttons_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'objecttyperadiobuttons_create',);
                                    }
                                    not_objecttyperadiobuttons_create:

                                    // objecttyperadiobuttons_new
                                    if ('/directory/admin/list/object-type-radio-buttons/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttyperadiobuttons_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'objecttyperadiobuttons_new',);
                                    }
                                    not_objecttyperadiobuttons_new:

                                    // objecttyperadiobuttons_show
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-radio\\-buttons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttyperadiobuttons_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttyperadiobuttons_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                                    }
                                    not_objecttyperadiobuttons_show:

                                    // objecttyperadiobuttons_edit
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-radio\\-buttons/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_objecttyperadiobuttons_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttyperadiobuttons_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                                    }
                                    not_objecttyperadiobuttons_edit:

                                    // objecttyperadiobuttons_update
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-radio\\-buttons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_objecttyperadiobuttons_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttyperadiobuttons_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                                    }
                                    not_objecttyperadiobuttons_update:

                                    // objecttyperadiobuttons_delete
                                    if (preg_match('#^/directory/admin/list/object\\-type\\-radio\\-buttons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_objecttyperadiobuttons_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'objecttyperadiobuttons_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                                    }
                                    not_objecttyperadiobuttons_delete:

                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/user-wrappers')) {
                            // userwrappers-list
                            if ('/directory/admin/list/user-wrappers' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_userwrapperslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'userwrappers-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'userwrappers-list',);
                            }
                            not_userwrapperslist:

                            // userwrappers_create
                            if ('/directory/admin/list/user-wrappers/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_userwrappers_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'userwrappers_create',);
                            }
                            not_userwrappers_create:

                            // userwrappers_new
                            if ('/directory/admin/list/user-wrappers/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_userwrappers_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'userwrappers_new',);
                            }
                            not_userwrappers_new:

                            // userwrappers_show
                            if (preg_match('#^/directory/admin/list/user\\-wrappers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_userwrappers_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'userwrappers_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_userwrappers_show:

                            // userwrappers_edit
                            if (preg_match('#^/directory/admin/list/user\\-wrappers/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_userwrappers_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'userwrappers_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_userwrappers_edit:

                            // userwrappers_update
                            if (preg_match('#^/directory/admin/list/user\\-wrappers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_userwrappers_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'userwrappers_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_userwrappers_update:

                            // userwrappers_delete
                            if (preg_match('#^/directory/admin/list/user\\-wrappers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_userwrappers_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'userwrappers_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_userwrappers_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/job-titles')) {
                            // joblists-list
                            if ('/directory/admin/list/job-titles' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_joblistslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'joblists-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'joblists-list',);
                            }
                            not_joblistslist:

                            // joblists_create
                            if ('/directory/admin/list/job-titles/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_joblists_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'joblists_create',);
                            }
                            not_joblists_create:

                            // joblists_new
                            if ('/directory/admin/list/job-titles/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_joblists_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'joblists_new',);
                            }
                            not_joblists_new:

                            // joblists_show
                            if (preg_match('#^/directory/admin/list/job\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_joblists_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'joblists_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_joblists_show:

                            // joblists_edit
                            if (preg_match('#^/directory/admin/list/job\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_joblists_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'joblists_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_joblists_edit:

                            // joblists_update
                            if (preg_match('#^/directory/admin/list/job\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_joblists_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'joblists_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_joblists_update:

                            // joblists_delete
                            if (preg_match('#^/directory/admin/list/job\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_joblists_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'joblists_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_joblists_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/vacation-request-types')) {
                            // vacreqrequesttypes-list
                            if ('/directory/admin/list/vacation-request-types' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_vacreqrequesttypeslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'vacreqrequesttypes-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'vacreqrequesttypes-list',);
                            }
                            not_vacreqrequesttypeslist:

                            // vacreqrequesttypes_create
                            if ('/directory/admin/list/vacation-request-types/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_vacreqrequesttypes_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'vacreqrequesttypes_create',);
                            }
                            not_vacreqrequesttypes_create:

                            // vacreqrequesttypes_new
                            if ('/directory/admin/list/vacation-request-types/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_vacreqrequesttypes_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'vacreqrequesttypes_new',);
                            }
                            not_vacreqrequesttypes_new:

                            // vacreqrequesttypes_show
                            if (preg_match('#^/directory/admin/list/vacation\\-request\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_vacreqrequesttypes_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreqrequesttypes_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_vacreqrequesttypes_show:

                            // vacreqrequesttypes_edit
                            if (preg_match('#^/directory/admin/list/vacation\\-request\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_vacreqrequesttypes_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreqrequesttypes_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_vacreqrequesttypes_edit:

                            // vacreqrequesttypes_update
                            if (preg_match('#^/directory/admin/list/vacation\\-request\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_vacreqrequesttypes_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreqrequesttypes_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_vacreqrequesttypes_update:

                            // vacreqrequesttypes_delete
                            if (preg_match('#^/directory/admin/list/vacation\\-request\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_vacreqrequesttypes_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreqrequesttypes_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_vacreqrequesttypes_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/healthcare-provider-specialties')) {
                            // healthcareproviderspecialty-list
                            if ('/directory/admin/list/healthcare-provider-specialties' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_healthcareproviderspecialtylist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'healthcareproviderspecialty-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'healthcareproviderspecialty-list',);
                            }
                            not_healthcareproviderspecialtylist:

                            // healthcareproviderspecialty_create
                            if ('/directory/admin/list/healthcare-provider-specialties/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_healthcareproviderspecialty_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'healthcareproviderspecialty_create',);
                            }
                            not_healthcareproviderspecialty_create:

                            // healthcareproviderspecialty_new
                            if ('/directory/admin/list/healthcare-provider-specialties/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_healthcareproviderspecialty_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'healthcareproviderspecialty_new',);
                            }
                            not_healthcareproviderspecialty_new:

                            // healthcareproviderspecialty_show
                            if (preg_match('#^/directory/admin/list/healthcare\\-provider\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_healthcareproviderspecialty_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'healthcareproviderspecialty_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_healthcareproviderspecialty_show:

                            // healthcareproviderspecialty_edit
                            if (preg_match('#^/directory/admin/list/healthcare\\-provider\\-specialties/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_healthcareproviderspecialty_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'healthcareproviderspecialty_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_healthcareproviderspecialty_edit:

                            // healthcareproviderspecialty_update
                            if (preg_match('#^/directory/admin/list/healthcare\\-provider\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_healthcareproviderspecialty_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'healthcareproviderspecialty_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_healthcareproviderspecialty_update:

                            // healthcareproviderspecialty_delete
                            if (preg_match('#^/directory/admin/list/healthcare\\-provider\\-specialties/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_healthcareproviderspecialty_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'healthcareproviderspecialty_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_healthcareproviderspecialty_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/directory/admin/list/week-days')) {
                            // weekdays-list
                            if ('/directory/admin/list/week-days' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_weekdayslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'weekdays-list');
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::indexAction',  '_route' => 'weekdays-list',);
                            }
                            not_weekdayslist:

                            // weekdays_create
                            if ('/directory/admin/list/week-days/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_weekdays_create;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::createAction',  '_route' => 'weekdays_create',);
                            }
                            not_weekdays_create:

                            // weekdays_new
                            if ('/directory/admin/list/week-days/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_weekdays_new;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::newAction',  '_route' => 'weekdays_new',);
                            }
                            not_weekdays_new:

                            // weekdays_show
                            if (preg_match('#^/directory/admin/list/week\\-days/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_weekdays_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'weekdays_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::showAction',));
                            }
                            not_weekdays_show:

                            // weekdays_edit
                            if (preg_match('#^/directory/admin/list/week\\-days/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_weekdays_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'weekdays_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::editAction',));
                            }
                            not_weekdays_edit:

                            // weekdays_update
                            if (preg_match('#^/directory/admin/list/week\\-days/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_weekdays_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'weekdays_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::updateAction',));
                            }
                            not_weekdays_update:

                            // weekdays_delete
                            if (preg_match('#^/directory/admin/list/week\\-days/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_weekdays_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'weekdays_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ListController::deleteAction',));
                            }
                            not_weekdays_delete:

                        }

                    }

                    // user_admin_hierarchy_index
                    if ('/directory/admin/hierarchies' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_user_admin_hierarchy_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'user_admin_hierarchy_index');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::indexHierarchyAction',  '_route' => 'user_admin_hierarchy_index',);
                    }
                    not_user_admin_hierarchy_index:

                    if (0 === strpos($pathinfo, '/directory/admin/populate-')) {
                        // user_generate_all
                        if ('/directory/admin/populate-all-lists-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_user_generate_all;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generateAllAction',  '_route' => 'user_generate_all',);
                        }
                        not_user_generate_all:

                        // generate_residencyspecialties
                        if ('/directory/admin/populate-residency-specialties-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_generate_residencyspecialties;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generateResidencySpecialtiesAction',  '_route' => 'generate_residencyspecialties',);
                        }
                        not_generate_residencyspecialties:

                        // generate_country_city
                        if ('/directory/admin/populate-country-city-list-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_generate_country_city;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generateProcedureAction',  '_route' => 'generate_country_city',);
                        }
                        not_generate_country_city:

                    }

                    elseif (0 === strpos($pathinfo, '/directory/admin/s')) {
                        // user_institution_employment_period
                        if ('/directory/admin/set-institution-employment-period' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_user_institution_employment_period;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'user_institution_employment_period');
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::setInstitutionEmploymentPeriodAction',  '_route' => 'user_institution_employment_period',);
                        }
                        not_user_institution_employment_period:

                        // user_set-default-org-group
                        if ('/directory/admin/set-default-org-group' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_user_setdefaultorggroup;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'user_set-default-org-group');
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::setDefaultOrgGroupAction',  '_route' => 'user_set-default-org-group',);
                        }
                        not_user_setdefaultorggroup:

                        // user_sync_db
                        if ('/directory/admin/sync-db' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_user_sync_db;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'user_sync_db');
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::syncEventTypeListDbAction',  '_route' => 'user_sync_db',);
                        }
                        not_user_sync_db:

                    }

                    // user_convert-logger-site
                    if ('/directory/admin/convert-logger-site' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_user_convertloggersite;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'user_convert-logger-site');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::convertLoggerSitenameToSiteObectAction',  '_route' => 'user_convert-logger-site',);
                    }
                    not_user_convertloggersite:

                    // user_generate-patient-metaphone-name
                    if ('/directory/admin/generate-patient-metaphone-name' === $trimmedPathinfo) {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'user_generate-patient-metaphone-name');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AdminController::generatePatientMetaphoneNameKeyAction',  '_route' => 'user_generate-patient-metaphone-name',);
                    }

                    if (0 === strpos($pathinfo, '/directory/admin/grants')) {
                        // employees_grants_pathaction_edit_standalone
                        if (0 === strpos($pathinfo, '/directory/admin/grants/edit') && preg_match('#^/directory/admin/grants/edit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_grants_pathaction_edit_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_grants_pathaction_edit_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
                        }
                        not_employees_grants_pathaction_edit_standalone:

                        if (0 === strpos($pathinfo, '/directory/admin/grants/new')) {
                            // employees_grants_pathaction_new_standalone
                            if ('/directory/admin/grants/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_grants_pathaction_new_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::newListAction',  '_route' => 'employees_grants_pathaction_new_standalone',);
                            }
                            not_employees_grants_pathaction_new_standalone:

                            // employees_grants_pathaction_new_post_standalone
                            if ('/directory/admin/grants/new' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_employees_grants_pathaction_new_post_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::createListAction',  '_route' => 'employees_grants_pathaction_new_post_standalone',);
                            }
                            not_employees_grants_pathaction_new_post_standalone:

                        }

                        // employees_grants_pathaction_edit_put_standalone
                        if (0 === strpos($pathinfo, '/directory/admin/grants/update') && preg_match('#^/directory/admin/grants/update/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('PUT' !== $canonicalMethod) {
                                $allow[] = 'PUT';
                                goto not_employees_grants_pathaction_edit_put_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_grants_pathaction_edit_put_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::updateListAction',));
                        }
                        not_employees_grants_pathaction_edit_put_standalone:

                    }

                    elseif (0 === strpos($pathinfo, '/directory/admin/buildings')) {
                        // employees_buildings_pathaction_edit_standalone
                        if (0 === strpos($pathinfo, '/directory/admin/buildings/edit') && preg_match('#^/directory/admin/buildings/edit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_buildings_pathaction_edit_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_buildings_pathaction_edit_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
                        }
                        not_employees_buildings_pathaction_edit_standalone:

                        if (0 === strpos($pathinfo, '/directory/admin/buildings/new')) {
                            // employees_buildings_pathaction_new_standalone
                            if ('/directory/admin/buildings/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_buildings_pathaction_new_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::newListAction',  '_route' => 'employees_buildings_pathaction_new_standalone',);
                            }
                            not_employees_buildings_pathaction_new_standalone:

                            // employees_buildings_pathaction_new_post_standalone
                            if ('/directory/admin/buildings/new' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_employees_buildings_pathaction_new_post_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::createListAction',  '_route' => 'employees_buildings_pathaction_new_post_standalone',);
                            }
                            not_employees_buildings_pathaction_new_post_standalone:

                        }

                        // employees_buildings_pathaction_edit_put_standalone
                        if (0 === strpos($pathinfo, '/directory/admin/buildings/update') && preg_match('#^/directory/admin/buildings/update/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('PUT' !== $canonicalMethod) {
                                $allow[] = 'PUT';
                                goto not_employees_buildings_pathaction_edit_put_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_buildings_pathaction_edit_put_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::updateListAction',));
                        }
                        not_employees_buildings_pathaction_edit_put_standalone:

                    }

                    elseif (0 === strpos($pathinfo, '/directory/admin/research-labs')) {
                        // employees_researchlabs_pathaction_edit_standalone
                        if (0 === strpos($pathinfo, '/directory/admin/research-labs/edit') && preg_match('#^/directory/admin/research\\-labs/edit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_researchlabs_pathaction_edit_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_researchlabs_pathaction_edit_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
                        }
                        not_employees_researchlabs_pathaction_edit_standalone:

                        if (0 === strpos($pathinfo, '/directory/admin/research-labs/new')) {
                            // employees_researchlabs_pathaction_new_standalone
                            if ('/directory/admin/research-labs/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_researchlabs_pathaction_new_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::newListAction',  '_route' => 'employees_researchlabs_pathaction_new_standalone',);
                            }
                            not_employees_researchlabs_pathaction_new_standalone:

                            // employees_researchlabs_pathaction_new_post_standalone
                            if ('/directory/admin/research-labs/new' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_employees_researchlabs_pathaction_new_post_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::createListAction',  '_route' => 'employees_researchlabs_pathaction_new_post_standalone',);
                            }
                            not_employees_researchlabs_pathaction_new_post_standalone:

                        }

                        // employees_researchlabs_pathaction_edit_put_standalone
                        if (0 === strpos($pathinfo, '/directory/admin/research-labs/update') && preg_match('#^/directory/admin/research\\-labs/update/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('PUT' !== $canonicalMethod) {
                                $allow[] = 'PUT';
                                goto not_employees_researchlabs_pathaction_edit_put_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_researchlabs_pathaction_edit_put_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::updateListAction',));
                        }
                        not_employees_researchlabs_pathaction_edit_put_standalone:

                    }

                }

                // employees_about_page
                if ('/directory/about' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::aboutAction',  '_route' => 'employees_about_page',);
                }

            }

            // employees_no_thanks_accessrequest
            if (0 === strpos($pathinfo, '/directory/no-thanks-access-requests') && preg_match('#^/directory/no\\-thanks\\-access\\-requests/(?P<sitename>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employees_no_thanks_accessrequest;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_no_thanks_accessrequest')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::noThanksAccessRequestAction',));
            }
            not_employees_no_thanks_accessrequest:

            // employees-nopermission
            if ('/directory/no-permission' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employeesnopermission;
                }

                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::actionNoPermission',  '_route' => 'employees-nopermission',);
            }
            not_employeesnopermission:

            // employees_accessrequest_remove
            if (0 === strpos($pathinfo, '/directory/deny-access-request') && preg_match('#^/directory/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employees_accessrequest_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accessrequest_remove')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::accessRequestRemoveAction',));
            }
            not_employees_accessrequest_remove:

            // employees_data_backup_management
            if ('/directory/data-backup-management' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employees_data_backup_management;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'employees_data_backup_management');
                }

                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\DataBackupManagementController::dataBackupManagementAction',  '_route' => 'employees_data_backup_management',);
            }
            not_employees_data_backup_management:

            if (0 === strpos($pathinfo, '/directory/re')) {
                // employees_authorization_remove
                if (0 === strpos($pathinfo, '/directory/revoke-access-authorization') && preg_match('#^/directory/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_authorization_remove;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_authorization_remove')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\AccessRequestController::authorizationRemoveAction',));
                }
                not_employees_authorization_remove:

                // employees_researchlabs_pathaction_show_standalone
                if (0 === strpos($pathinfo, '/directory/research-labs/show') && preg_match('#^/directory/research\\-labs/show/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_researchlabs_pathaction_show_standalone;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_researchlabs_pathaction_show_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
                }
                not_employees_researchlabs_pathaction_show_standalone:

                // employees_restore_backup
                if (0 === strpos($pathinfo, '/directory/restore-backup') && preg_match('#^/directory/restore\\-backup/(?P<backupFilePath>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_restore_backup;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_restore_backup')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\DataBackupManagementController::restoreBackupAction',));
                }
                not_employees_restore_backup:

            }

            elseif (0 === strpos($pathinfo, '/directory/l')) {
                if (0 === strpos($pathinfo, '/directory/list')) {
                    // employees_locations_pathaction_list
                    if ('/directory/list/locations' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_locations_pathaction_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_locations_pathaction_list');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::indexAction',  '_route' => 'employees_locations_pathaction_list',);
                    }
                    not_employees_locations_pathaction_list:

                    // employees_buildings_pathaction_list
                    if ('/directory/list/buildings' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_buildings_pathaction_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_buildings_pathaction_list');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::indexAction',  '_route' => 'employees_buildings_pathaction_list',);
                    }
                    not_employees_buildings_pathaction_list:

                    // employees_researchlabs_pathaction_list
                    if ('/directory/list/research-labs' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_researchlabs_pathaction_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_researchlabs_pathaction_list');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::indexAction',  '_route' => 'employees_researchlabs_pathaction_list',);
                    }
                    not_employees_researchlabs_pathaction_list:

                    // employees_grants_pathaction_list
                    if ('/directory/list/grants' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_grants_pathaction_list;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_grants_pathaction_list');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::indexAction',  '_route' => 'employees_grants_pathaction_list',);
                    }
                    not_employees_grants_pathaction_list:

                }

                elseif (0 === strpos($pathinfo, '/directory/location')) {
                    // employees_locations_pathaction_show_standalone
                    if (0 === strpos($pathinfo, '/directory/location/show') && preg_match('#^/directory/location/show/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_locations_pathaction_show_standalone;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_locations_pathaction_show_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
                    }
                    not_employees_locations_pathaction_show_standalone:

                    // employees_locations_pathaction_edit_standalone
                    if (0 === strpos($pathinfo, '/directory/location/edit') && preg_match('#^/directory/location/edit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_locations_pathaction_edit_standalone;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_locations_pathaction_edit_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
                    }
                    not_employees_locations_pathaction_edit_standalone:

                    if (0 === strpos($pathinfo, '/directory/location/new')) {
                        // employees_locations_pathaction_new_standalone
                        if ('/directory/location/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_locations_pathaction_new_standalone;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::newListAction',  '_route' => 'employees_locations_pathaction_new_standalone',);
                        }
                        not_employees_locations_pathaction_new_standalone:

                        // employees_locations_pathaction_new_post_standalone
                        if ('/directory/location/new' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_employees_locations_pathaction_new_post_standalone;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::createListAction',  '_route' => 'employees_locations_pathaction_new_post_standalone',);
                        }
                        not_employees_locations_pathaction_new_post_standalone:

                    }

                    // employees_locations_pathaction_edit_put_standalone
                    if (0 === strpos($pathinfo, '/directory/location/update') && preg_match('#^/directory/location/update/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_employees_locations_pathaction_edit_put_standalone;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_locations_pathaction_edit_put_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::updateListAction',));
                    }
                    not_employees_locations_pathaction_edit_put_standalone:

                }

                // employees_login
                if ('/directory/login' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_login;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::loginAction',  '_route' => 'employees_login',);
                }
                not_employees_login:

            }

            // employees_buildings_pathaction_show_standalone
            if (0 === strpos($pathinfo, '/directory/buildings/show') && preg_match('#^/directory/buildings/show/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employees_buildings_pathaction_show_standalone;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_buildings_pathaction_show_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
            }
            not_employees_buildings_pathaction_show_standalone:

            // employees_grants_pathaction_show_standalone
            if (0 === strpos($pathinfo, '/directory/grants/show') && preg_match('#^/directory/grants/show/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employees_grants_pathaction_show_standalone;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_grants_pathaction_show_standalone')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\ComplexListController::showListAction',));
            }
            not_employees_grants_pathaction_show_standalone:

            // employees_create_backup
            if ('/directory/create-backup' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_employees_create_backup;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'employees_create_backup');
                }

                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\DataBackupManagementController::createBackupAction',  '_route' => 'employees_create_backup',);
            }
            not_employees_create_backup:

            if (0 === strpos($pathinfo, '/directory/common')) {
                // keepalive
                if ('/directory/common/keepalive' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_keepalive;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::keepAliveAction',  '_route' => 'keepalive',);
                }
                not_keepalive:

                // setserveractive
                if ('/directory/common/setserveractive' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_setserveractive;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::setServerActiveAction',  '_route' => 'setserveractive',);
                }
                not_setserveractive:

                // getmaxidletime
                if ('/directory/common/getmaxidletime' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_getmaxidletime;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::getmaxidletimeAction',  '_route' => 'getmaxidletime',);
                }
                not_getmaxidletime:

                // employees_list_common_locations
                if ('/directory/common-locations' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::listCommonLocationsAction',  '_route' => 'employees_list_common_locations',);
                }

            }

            elseif (0 === strpos($pathinfo, '/directory/t')) {
                // common_thankfordownloading
                if (0 === strpos($pathinfo, '/directory/thanks-for-downloading') && preg_match('#^/directory/thanks\\-for\\-downloading/(?P<id>[^/]++)/(?P<sitename>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_common_thankfordownloading;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'common_thankfordownloading')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\DefaultController::thankfordownloadingAction',));
                }
                not_common_thankfordownloading:

                // employees_get_composition_tree
                if ('/directory/tree-util/common/composition-tree' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_employees_get_composition_tree;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_get_composition_tree');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\TreeController::getTreeByParentAction',  '_route' => 'employees_get_composition_tree',);
                }
                not_employees_get_composition_tree:

                // employees_tree_edit_node
                if ('/directory/tree-util/tree/action' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_employees_tree_edit_node;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\TreeController::setTreeAction',  '_route' => 'employees_tree_edit_node',);
                }
                not_employees_tree_edit_node:

            }

            elseif (0 === strpos($pathinfo, '/directory/f')) {
                // employees_formnode_fields
                if ('/directory/formnode-fields' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_employees_formnode_fields;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_formnode_fields');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\FormNodeController::getFormNodeFieldsAction',  '_route' => 'employees_formnode_fields',);
                }
                not_employees_formnode_fields:

                // employees_form-node-tree-test
                if ('/directory/form-node-tree-test' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_formnodetreetest;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_form-node-tree-test');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\FormNodeController::formNodeTestAction',  '_route' => 'employees_form-node-tree-test',);
                }
                not_employees_formnodetreetest:

                // first-time-user-generation-init
                if ('/directory/first-time-user-generation-init' === $trimmedPathinfo) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'first-time-user-generation-init');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\HomeController::firstTimeUserGenerationAction',  '_route' => 'first-time-user-generation-init',);
                }

                if (0 === strpos($pathinfo, '/directory/file-')) {
                    // employees_file_delete
                    if ('/directory/file-delete' === $pathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST', 'DELETE'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'DELETE'));
                            goto not_employees_file_delete;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UploadController::deleteFileAction',  '_route' => 'employees_file_delete',);
                    }
                    not_employees_file_delete:

                    // employees_file_download
                    if (0 === strpos($pathinfo, '/directory/file-download') && preg_match('#^/directory/file\\-download/(?P<id>\\d+)(?:/(?P<eventtype>[^/]++))?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_file_download;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_file_download')), array (  'eventtype' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UploadController::downloadFileAction',));
                    }
                    not_employees_file_download:

                    // employees_file_view
                    if (0 === strpos($pathinfo, '/directory/file-view') && preg_match('#^/directory/file\\-view/(?P<id>\\d+)(?:/(?P<viewType>[^/]++)(?:/(?P<eventtype>[^/]++))?)?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_file_view;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_file_view')), array (  'eventtype' => NULL,  'viewType' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UploadController::viewFileAction',));
                    }
                    not_employees_file_view:

                }

            }

            elseif (0 === strpos($pathinfo, '/directory/m')) {
                // main_maintenance
                if ('/directory/maintanencemode' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\HomeController::maintanenceModeAction',  '_route' => 'main_maintenance',);
                }

                // employees_my_team
                if ('/directory/my-team-ajax' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_employees_my_team;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_my_team');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SectionUserController::myTeamAction',  '_route' => 'employees_my_team',);
                }
                not_employees_my_team:

                // employees_my_objects
                if ('/directory/my-objects' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::myObjectsAction',  '_route' => 'employees_my_objects',);
                }

            }

            // under_construction
            if ('/directory/under-construction' === $pathinfo) {
                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\HomeController::underConstructionAction',  '_route' => 'under_construction',);
            }

            // employees_user_wrapper_ajax
            if ('/directory/user-wrapper-ajax' === $pathinfo) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_employees_user_wrapper_ajax;
                }

                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SectionUserController::userWrapperAction',  '_route' => 'employees_user_wrapper_ajax',);
            }
            not_employees_user_wrapper_ajax:

            if (0 === strpos($pathinfo, '/directory/event-log')) {
                // employees_logger
                if ('/directory/event-log' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_logger;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_logger');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::indexAction',  '_route' => 'employees_logger',);
                }
                not_employees_logger:

                if (0 === strpos($pathinfo, '/directory/event-log/user')) {
                    // employees_logger_user_with_id
                    if (preg_match('#^/directory/event\\-log/user/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_logger_user_with_id;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_logger_user_with_id')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::getAuditLogAction',));
                    }
                    not_employees_logger_user_with_id:

                    // employees_logger_user
                    if ('/directory/event-log/user' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_logger_user;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::getAuditLogAction',  '_route' => 'employees_logger_user',);
                    }
                    not_employees_logger_user:

                    // employees_logger_user_all
                    if (preg_match('#^/directory/event\\-log/user/(?P<id>[^/]++)/all$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_logger_user_all;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_logger_user_all')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::getAuditLogAllAction',));
                    }
                    not_employees_logger_user_all:

                }

                // employees_find_subject_entity
                if (0 === strpos($pathinfo, '/directory/event-log/find-subject-entity-by-object-type-id') && preg_match('#^/directory/event\\-log/find\\-subject\\-entity\\-by\\-object\\-type\\-id/(?P<action>[^/]++)/(?P<objectNamespace>[^/]++)/(?P<objectType>[^/]++)/(?P<objectId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_find_subject_entity;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_find_subject_entity')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::permissionActionSubjectEntityAction',));
                }
                not_employees_find_subject_entity:

                // employees_logger_create
                if ('/directory/event-log/' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_employees_logger_create;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::createAction',  '_route' => 'employees_logger_create',);
                }
                not_employees_logger_create:

                // logger_new
                if ('/directory/event-log/new' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_logger_new;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::newAction',  '_route' => 'logger_new',);
                }
                not_logger_new:

                // logger_show
                if (preg_match('#^/directory/event\\-log/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_logger_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'logger_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::showAction',));
                }
                not_logger_show:

                // logger_edit
                if (preg_match('#^/directory/event\\-log/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_logger_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'logger_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::editAction',));
                }
                not_logger_edit:

                // logger_update
                if (preg_match('#^/directory/event\\-log/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_logger_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'logger_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::updateAction',));
                }
                not_logger_update:

                // logger_delete
                if (preg_match('#^/directory/event\\-log/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('DELETE' !== $canonicalMethod) {
                        $allow[] = 'DELETE';
                        goto not_logger_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'logger_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\LoggerController::deleteAction',));
                }
                not_logger_delete:

            }

            elseif (0 === strpos($pathinfo, '/directory/i')) {
                if (0 === strpos($pathinfo, '/directory/idlelogout')) {
                    // employees_idlelogout
                    if ('/directory/idlelogout' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::idlelogoutAction',  '_route' => 'employees_idlelogout',);
                    }

                    // employees_idlelogout-saveorder
                    if (preg_match('#^/directory/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::idlelogoutAction',));
                    }

                }

                // employees_import_users_excel
                if ('/directory/import-users/excel' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_employees_import_users_excel;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UploadController::importExcelUsersFileAction',  '_route' => 'employees_import_users_excel',);
                }
                not_employees_import_users_excel:

                // employees_import_users_template_excel
                if ('/directory/import-users/template' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_import_users_template_excel;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_import_users_template_excel');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UploadController::importExcelUsersTemplateFileAction',  '_route' => 'employees_import_users_template_excel',);
                }
                not_employees_import_users_template_excel:

            }

            elseif (0 === strpos($pathinfo, '/directory/se')) {
                // employees_setloginvisit
                if ('/directory/setloginvisit' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_setloginvisit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_setloginvisit');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SecurityController::setAjaxLoginVisit',  '_route' => 'employees_setloginvisit',);
                }
                not_employees_setloginvisit:

                if (0 === strpos($pathinfo, '/directory/settings')) {
                    // employees_siteparameters
                    if ('/directory/settings' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_siteparameters;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_siteparameters');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SiteParametersController::indexAction',  '_route' => 'employees_siteparameters',);
                    }
                    not_employees_siteparameters:

                    // employees_siteparameters_edit
                    if (preg_match('#^/directory/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_siteparameters_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_siteparameters_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SiteParametersController::editAction',));
                    }
                    not_employees_siteparameters_edit:

                    // employees_siteparameters_update
                    if (preg_match('#^/directory/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_employees_siteparameters_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_siteparameters_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SiteParametersController::updateAction',));
                    }
                    not_employees_siteparameters_update:

                    // employees_management_organizationalgroupdefault
                    if (0 === strpos($pathinfo, '/directory/settings/organizational-group-default-management') && preg_match('#^/directory/settings/organizational\\-group\\-default\\-management/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_employees_management_organizationalgroupdefault;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_management_organizationalgroupdefault')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SiteParametersController::manageOrgGroupDefaultAction',));
                    }
                    not_employees_management_organizationalgroupdefault:

                    // employees_initial_configuration
                    if ('/directory/settings/initial-configuration' === $pathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_employees_initial_configuration;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\SiteParametersController::initialConfigurationAction',  '_route' => 'employees_initial_configuration',);
                    }
                    not_employees_initial_configuration:

                }

                // employees_search_same_object
                if ('/directory/search-users' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::searchSameObjectAction',  '_route' => 'employees_search_same_object',);
                }

            }

            // employees_home
            if ('/directory' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'employees_home');
                }

                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::indexAction',  '_route' => 'employees_home',);
            }

            if (0 === strpos($pathinfo, '/directory/user')) {
                if (0 === strpos($pathinfo, '/directory/users')) {
                    // employees_listusers
                    if ('/directory/users' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_listusers;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::indexUserAction',  '_route' => 'employees_listusers',);
                    }
                    not_employees_listusers:

                    // employees_listusers_previous
                    if ('/directory/users/previous' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_listusers_previous;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::indexUserAction',  '_route' => 'employees_listusers_previous',);
                    }
                    not_employees_listusers_previous:

                }

                elseif (0 === strpos($pathinfo, '/directory/user/new')) {
                    // employees_new_user
                    if ('/directory/user/new' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_new_user;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::newUserAction',  '_route' => 'employees_new_user',);
                    }
                    not_employees_new_user:

                    // employees_new_user_clone
                    if (0 === strpos($pathinfo, '/directory/user/new/clone') && preg_match('#^/directory/user/new/clone(?:/(?P<id>\\d+))?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_new_user_clone;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_new_user_clone')), array (  'id' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::newUserAction',));
                    }
                    not_employees_new_user_clone:

                    // employees_create_user
                    if ('/directory/user/new' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_employees_create_user;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::createUserAction',  '_route' => 'employees_create_user',);
                    }
                    not_employees_create_user:

                }

                // employees_showuser
                if (preg_match('#^/directory/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_showuser;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_showuser')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::showUserOptimizedAction',));
                }
                not_employees_showuser:

                if (0 === strpos($pathinfo, '/directory/user/o')) {
                    // employees_showuser_optimized_customh
                    if (0 === strpos($pathinfo, '/directory/user/optimized/customh') && preg_match('#^/directory/user/optimized/customh/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_showuser_optimized_customh;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_showuser_optimized_customh')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::showUserOptimizedCustomhAction',));
                    }
                    not_employees_showuser_optimized_customh:

                    if (0 === strpos($pathinfo, '/directory/user/only')) {
                        // employees_showuser_only
                        if (preg_match('#^/directory/user/only/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_showuser_only;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_showuser_only')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::showOnlyUserAction',));
                        }
                        not_employees_showuser_only:

                        // employees_showuser_only_ajax
                        if ('/directory/user/only-ajax' === $trimmedPathinfo) {
                            if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                                $allow = array_merge($allow, array('GET', 'POST'));
                                goto not_employees_showuser_only_ajax;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employees_showuser_only_ajax');
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::showOnlyAjaxUserAction',  '_route' => 'employees_showuser_only_ajax',);
                        }
                        not_employees_showuser_only_ajax:

                    }

                    // employees_showuser_object
                    if (0 === strpos($pathinfo, '/directory/user/object') && preg_match('#^/directory/user/object/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_showuser_object;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_showuser_object')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::showUserAction',));
                    }
                    not_employees_showuser_object:

                }

                // employees_showuser_notstrict
                if (0 === strpos($pathinfo, '/directory/user/show') && preg_match('#^/directory/user/show/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_showuser_notstrict;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_showuser_notstrict')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::showUserAction',));
                }
                not_employees_showuser_notstrict:

                // employees_save_avatar
                if ('/directory/user/save-avatar' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_employees_save_avatar;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::saveAvatarAction',  '_route' => 'employees_save_avatar',);
                }
                not_employees_save_avatar:

                // generate_users
                if ('/directory/user/generate' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_generate_users;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::generateUsersAction',  '_route' => 'generate_users',);
                }
                not_generate_users:

                // employees_user_impersonate
                if (0 === strpos($pathinfo, '/directory/user/impersonate') && preg_match('#^/directory/user/impersonate/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_user_impersonate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_user_impersonate')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::impersonateUserAction',));
                }
                not_employees_user_impersonate:

                // employees_user_employment_terminate
                if (0 === strpos($pathinfo, '/directory/user/employment-terminate') && preg_match('#^/directory/user/employment\\-terminate/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_user_employment_terminate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_user_employment_terminate')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::employmentTerminateAction',));
                }
                not_employees_user_employment_terminate:

            }

            elseif (0 === strpos($pathinfo, '/directory/util')) {
                if (0 === strpos($pathinfo, '/directory/util/common')) {
                    if (0 === strpos($pathinfo, '/directory/util/common/g')) {
                        // employees_get_generic_select2
                        if (0 === strpos($pathinfo, '/directory/util/common/generic') && preg_match('#^/directory/util/common/generic/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_get_generic_select2;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_get_generic_select2')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getGenericAction',));
                        }
                        not_employees_get_generic_select2:

                        // employees_get_location_by_name
                        if ('/directory/util/common/get-location-by-name' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_get_location_by_name;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'employees_get_location_by_name');
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getLocationByNameAction',  '_route' => 'employees_get_location_by_name',);
                        }
                        not_employees_get_location_by_name:

                        if (0 === strpos($pathinfo, '/directory/util/common/grant')) {
                            // employees_get_grant
                            if (preg_match('#^/directory/util/common/grant/(?P<id>[^/]++)(?:/(?P<subjectUser>[^/]++))?$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_employees_get_grant;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_get_grant')), array (  'subjectUser' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getGrantByIdAction',));
                            }
                            not_employees_get_grant:

                            // employees_grant_deletefromuser
                            if (0 === strpos($pathinfo, '/directory/util/common/grant/deletefromuser') && preg_match('#^/directory/util/common/grant/deletefromuser/(?P<id>[^/]++)(?:/(?P<subjectUser>[^/]++))?$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_employees_grant_deletefromuser;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_grant_deletefromuser')), array (  'subjectUser' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::grantDeleteAction',));
                            }
                            not_employees_grant_deletefromuser:

                        }

                    }

                    // get-fellowshipsubspecialty-by-parent
                    if ('/directory/util/common/fellowshipsubspecialty' === $pathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_getfellowshipsubspecialtybyparent;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getDepartmentAction',  '_route' => 'get-fellowshipsubspecialty-by-parent',);
                    }
                    not_getfellowshipsubspecialtybyparent:

                    // employees_get_traininginstitution
                    if ('/directory/util/common/traininginstitution' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_get_traininginstitution;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getTrainingInstitutionAction',  '_route' => 'employees_get_traininginstitution',);
                    }
                    not_employees_get_traininginstitution:

                    // employees_get_institution_all
                    if ('/directory/util/common/institution-all' === $pathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_employees_get_institution_all;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::setInstitutionTreeAction',  '_route' => 'employees_get_institution_all',);
                    }
                    not_employees_get_institution_all:

                    // employees_get_institution
                    if ('/directory/util/common/institution-old' === $trimmedPathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_employees_get_institution;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'employees_get_institution');
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getInstitutionAction',  '_route' => 'employees_get_institution',);
                    }
                    not_employees_get_institution:

                    // employees_get_patientlists
                    if ('/directory/util/common/patientlists' === $pathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_employees_get_patientlists;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getPatientListsAction',  '_route' => 'employees_get_patientlists',);
                    }
                    not_employees_get_patientlists:

                    if (0 === strpos($pathinfo, '/directory/util/common/location')) {
                        // employees_get_locationusers
                        if ('/directory/util/common/locationusers' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_get_locationusers;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getLocationUsersAction',  '_route' => 'employees_get_locationusers',);
                        }
                        not_employees_get_locationusers:

                        // employees_get_location
                        if ('/directory/util/common/location' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_get_location;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getLocationAction',  '_route' => 'employees_get_location',);
                        }
                        not_employees_get_location:

                        // employees_get_locationname
                        if ('/directory/util/common/locationName' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_get_locationname;
                            }

                            return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getLocationNameAction',  '_route' => 'employees_get_locationname',);
                        }
                        not_employees_get_locationname:

                        // employees_location_delete
                        if (0 === strpos($pathinfo, '/directory/util/common/location/delete') && preg_match('#^/directory/util/common/location/delete/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_location_delete;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_location_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getLocationCheckDeleteAction',));
                        }
                        not_employees_location_delete:

                    }

                    // employees_get_building
                    if ('/directory/util/common/building' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_get_building;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getBuildingsAction',  '_route' => 'employees_get_building',);
                    }
                    not_employees_get_building:

                    if (0 === strpos($pathinfo, '/directory/util/common/researchlab')) {
                        // employees_get_researchlab
                        if (preg_match('#^/directory/util/common/researchlab/(?P<id>[^/]++)(?:/(?P<subjectUser>[^/]++))?$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_employees_get_researchlab;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_get_researchlab')), array (  'subjectUser' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getResearchlabByIdAction',));
                        }
                        not_employees_get_researchlab:

                        // employees_researchlab_deletefromuser
                        if (0 === strpos($pathinfo, '/directory/util/common/researchlab/deletefromuser') && preg_match('#^/directory/util/common/researchlab/deletefromuser/(?P<id>[^/]++)(?:/(?P<subjectUser>[^/]++))?$#s', $pathinfo, $matches)) {
                            if ('DELETE' !== $canonicalMethod) {
                                $allow[] = 'DELETE';
                                goto not_employees_researchlab_deletefromuser;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_researchlab_deletefromuser')), array (  'subjectUser' => NULL,  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::researchLabDeleteAction',));
                        }
                        not_employees_researchlab_deletefromuser:

                    }

                    // employees_user-data-search
                    if (0 === strpos($pathinfo, '/directory/util/common/user-data-search') && preg_match('#^/directory/util/common/user\\-data\\-search/(?P<type>[^/]++)/(?P<limit>[^/]++)/(?P<search>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_userdatasearch;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_user-data-search')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::getUserDataSearchAction',));
                    }
                    not_employees_userdatasearch:

                    // employees_check_mrntype_identifier
                    if ('/directory/util/common/mrntype-identifier' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_check_mrntype_identifier;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkMrntypeIdentifierAction',  '_route' => 'employees_check_mrntype_identifier',);
                    }
                    not_employees_check_mrntype_identifier:

                    // employees_check_user_password
                    if ('/directory/util/common/check-user-password' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_employees_check_user_password;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkUserPasswordAction',  '_route' => 'employees_check_user_password',);
                    }
                    not_employees_check_user_password:

                }

                elseif (0 === strpos($pathinfo, '/directory/util/cwid')) {
                    // employees_check_cwid
                    if ('/directory/util/cwid' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_check_cwid;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkCwidAction',  '_route' => 'employees_check_cwid',);
                    }
                    not_employees_check_cwid:

                    // employees_check_cwid-usertype-userid
                    if ('/directory/util/cwid-usertype-userid' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_check_cwidusertypeuserid;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkCWIDUsertypeUseridAction',  '_route' => 'employees_check_cwid-usertype-userid',);
                    }
                    not_employees_check_cwidusertypeuserid:

                }

                // employees_check_ssn
                if ('/directory/util/ssn' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_check_ssn;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkSsnAction',  '_route' => 'employees_check_ssn',);
                }
                not_employees_check_ssn:

                // employees_check_ein
                if ('/directory/util/ein' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_check_ein;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkEinAction',  '_route' => 'employees_check_ein',);
                }
                not_employees_check_ein:

                // employees_check_usertype-userid
                if ('/directory/util/usertype-userid' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_check_usertypeuserid;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UtilController::checkUsertypeUseridAction',  '_route' => 'employees_check_usertype-userid',);
                }
                not_employees_check_usertypeuserid:

            }

            elseif (0 === strpos($pathinfo, '/directory/edit-user-profile')) {
                // employees_user_edit
                if (preg_match('#^/directory/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_user_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_user_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::editUserAction',));
                }
                not_employees_user_edit:

                // employees_user_update
                if (preg_match('#^/directory/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_employees_user_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_user_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::updateUserAction',));
                }
                not_employees_user_update:

            }

            elseif (0 === strpos($pathinfo, '/directory/l')) {
                if (0 === strpos($pathinfo, '/directory/lo')) {
                    // employees_lockunlock_change
                    if (0 === strpos($pathinfo, '/directory/lockunlock/change') && preg_match('#^/directory/lockunlock/change/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_lockunlock_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_lockunlock_change')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::lockUnlockChangeAction',));
                    }
                    not_employees_lockunlock_change:

                    if (0 === strpos($pathinfo, '/directory/logout')) {
                        // logout
                        if ('/directory/logout' === $pathinfo) {
                            return array('_route' => 'logout');
                        }

                        // employees_logout
                        if ('/directory/logout' === $pathinfo) {
                            return array('_route' => 'employees_logout');
                        }

                    }

                    elseif (0 === strpos($pathinfo, '/directory/login')) {
                        // login
                        if ('/directory/login' === $pathinfo) {
                            return array('_route' => 'login');
                        }

                        // employees_login_check
                        if ('/directory/login_check' === $pathinfo) {
                            return array('_route' => 'employees_login_check');
                        }

                    }

                }

                // employees_user_label_preview
                if (0 === strpos($pathinfo, '/directory/label/user/preview') && preg_match('#^/directory/label/user/preview/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_employees_user_label_preview;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_user_label_preview')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::averySingleUserPrintAction',));
                }
                not_employees_user_label_preview:

                // employees_users_label_preview
                if ('/directory/label/users/preview' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_employees_users_label_preview;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'employees_users_label_preview');
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::averyMultipleUsersPrintAction',  '_route' => 'employees_users_label_preview',);
                }
                not_employees_users_label_preview:

            }

            // employees_userlist_download_excel
            if ('/directory/download/wcm-pathology-directory' === $pathinfo) {
                return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserController::downloadAction',  '_route' => 'employees_userlist_download_excel',);
            }

            if (0 === strpos($pathinfo, '/directory/account-requests')) {
                // employees_accountrequest
                if ('/directory/account-requests' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_accountrequest;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::indexAction',  '_route' => 'employees_accountrequest',);
                }
                not_employees_accountrequest:

                if (0 === strpos($pathinfo, '/directory/account-requests/new')) {
                    // employees_accountrequest_create
                    if ('/directory/account-requests/new' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_employees_accountrequest_create;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::createAction',  '_route' => 'employees_accountrequest_create',);
                    }
                    not_employees_accountrequest_create:

                    // employees_accountrequest_new
                    if ('/directory/account-requests/new' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_employees_accountrequest_new;
                        }

                        return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::newAction',  '_route' => 'employees_accountrequest_new',);
                    }
                    not_employees_accountrequest_new:

                }

                // employees_accountrequest_show
                if (preg_match('#^/directory/account\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_accountrequest_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accountrequest_show')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::showAction',));
                }
                not_employees_accountrequest_show:

                // employees_accountrequest_status
                if (preg_match('#^/directory/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_accountrequest_status;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accountrequest_status')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::statusAction',));
                }
                not_employees_accountrequest_status:

                // employees_accountrequest_approve
                if ('/directory/account-requests-approve' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_employees_accountrequest_approve;
                    }

                    return array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::approveUserAccountRequestAction',  '_route' => 'employees_accountrequest_approve',);
                }
                not_employees_accountrequest_approve:

                // employees_accountrequest_edit
                if (preg_match('#^/directory/account\\-requests/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_employees_accountrequest_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accountrequest_edit')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::editAction',));
                }
                not_employees_accountrequest_edit:

                // employees_accountrequest_update
                if (preg_match('#^/directory/account\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_employees_accountrequest_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accountrequest_update')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::updateAction',));
                }
                not_employees_accountrequest_update:

                // employees_accountrequest_delete
                if (preg_match('#^/directory/account\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('DELETE' !== $canonicalMethod) {
                        $allow[] = 'DELETE';
                        goto not_employees_accountrequest_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'employees_accountrequest_delete')), array (  '_controller' => 'Oleg\\UserdirectoryBundle\\Controller\\UserRequestController::deleteAction',));
                }
                not_employees_accountrequest_delete:

            }

            // oleg_testpage
            if ('/directory/testpage' === $pathinfo) {
                return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'OlegUserdirectoryBundle:Default:testpage.html.twig',  '_route' => 'oleg_testpage',);
            }

        }

        elseif (0 === strpos($pathinfo, '/fellowship-applications')) {
            // fellapp_thankfordownloading
            if (0 === strpos($pathinfo, '/fellowship-applications/thanks-for-downloading') && preg_match('#^/fellowship\\-applications/thanks\\-for\\-downloading/(?P<id>[^/]++)/(?P<sitename>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellapp_thankfordownloading;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_thankfordownloading')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\DefaultController::thankfordownloadingAction',));
            }
            not_fellapp_thankfordownloading:

            if (0 === strpos($pathinfo, '/fellowship-applications/a')) {
                // fellapp_about_page
                if ('/fellowship-applications/about' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\DefaultController::aboutAction',  '_route' => 'fellapp_about_page',);
                }

                if (0 === strpos($pathinfo, '/fellowship-applications/access-requests')) {
                    // fellapp_access_request_new_plain
                    if ('/fellowship-applications/access-requests/new/create' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_access_request_new_plain;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestCreatePlainAction',  '_route' => 'fellapp_access_request_new_plain',);
                    }
                    not_fellapp_access_request_new_plain:

                    // fellapp_access_request_create
                    if ('/fellowship-applications/access-requests/new/pending' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_fellapp_access_request_create;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestAction',  '_route' => 'fellapp_access_request_create',);
                    }
                    not_fellapp_access_request_create:

                    // fellapp_accessrequest_list
                    if ('/fellowship-applications/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestIndexAction',  '_route' => 'fellapp_accessrequest_list',);
                    }
                    not_fellapp_accessrequest_list:

                    // fellapp_accessrequest_change
                    if (0 === strpos($pathinfo, '/fellowship-applications/access-requests/change-status') && preg_match('#^/fellowship\\-applications/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_accessrequest_change')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestChangeAction',));
                    }
                    not_fellapp_accessrequest_change:

                    // fellapp_accessrequest_management
                    if (preg_match('#^/fellowship\\-applications/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_accessrequest_management')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestManagementAction',));
                    }
                    not_fellapp_accessrequest_management:

                    // fellapp_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/fellowship-applications/access-requests/submit') && preg_match('#^/fellowship\\-applications/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_fellapp_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_fellapp_accessrequest_management_submit:

                }

                // fellapp_authorized_users
                if ('/fellowship-applications/authorized-users' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_authorized_users;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fellapp_authorized_users');
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::authorizedUsersAction',  '_route' => 'fellapp_authorized_users',);
                }
                not_fellapp_authorized_users:

                if (0 === strpos($pathinfo, '/fellowship-applications/authorization-user-manager')) {
                    // fellapp_authorization_user_management
                    if (preg_match('#^/fellowship\\-applications/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_authorization_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_authorization_user_management')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::authorizationManagementAction',));
                    }
                    not_fellapp_authorization_user_management:

                    // fellapp_authorization_user_management_submit
                    if (0 === strpos($pathinfo, '/fellowship-applications/authorization-user-manager/submit') && preg_match('#^/fellowship\\-applications/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_fellapp_authorization_user_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::authorizationManagementSubmitAction',));
                    }
                    not_fellapp_authorization_user_management_submit:

                }

                // fellapp_add_authorized_user
                if ('/fellowship-applications/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fellapp_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::addAuthorizedUserAction',  '_route' => 'fellapp_add_authorized_user',);
                }
                not_fellapp_add_authorized_user:

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/d')) {
                // fellapp_accessrequest_remove
                if (0 === strpos($pathinfo, '/fellowship-applications/deny-access-request') && preg_match('#^/fellowship\\-applications/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_accessrequest_remove;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_accessrequest_remove')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::accessRequestRemoveAction',));
                }
                not_fellapp_accessrequest_remove:

                // fellapp_download_interview_applicants_list_pdf
                if (0 === strpos($pathinfo, '/fellowship-applications/download-interview-applicants-list-pdf') && preg_match('#^/fellowship\\-applications/download\\-interview\\-applicants\\-list\\-pdf/(?P<currentYear>[^/]++)/(?P<fellappTypeId>[^/]++)/(?P<fellappIds>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_download_interview_applicants_list_pdf;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_download_interview_applicants_list_pdf')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::downloadInterviewApplicantsListAction',));
                }
                not_fellapp_download_interview_applicants_list_pdf:

                // fellapp_download_interview_applicants_list_doc
                if (0 === strpos($pathinfo, '/fellowship-applications/download-interview-applicants-list-doc') && preg_match('#^/fellowship\\-applications/download\\-interview\\-applicants\\-list\\-doc/(?P<currentYear>[^/]++)/(?P<fellappTypeId>[^/]++)/(?P<fellappIds>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_download_interview_applicants_list_doc;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_download_interview_applicants_list_doc')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::downloadInterviewApplicantsListDocAction',));
                }
                not_fellapp_download_interview_applicants_list_doc:

            }

            // fellapp_authorization_remove
            if (0 === strpos($pathinfo, '/fellowship-applications/revoke-access-authorization') && preg_match('#^/fellowship\\-applications/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellapp_authorization_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_authorization_remove')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppAccessRequestController::authorizationRemoveAction',));
            }
            not_fellapp_authorization_remove:

            if (0 === strpos($pathinfo, '/fellowship-applications/interview-')) {
                // fellapp_interview_modal
                if (0 === strpos($pathinfo, '/fellowship-applications/interview-modal') && preg_match('#^/fellowship\\-applications/interview\\-modal/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_interview_modal;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_interview_modal')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::interviewModalAction',));
                }
                not_fellapp_interview_modal:

                // fellapp_interviewe_score_rank
                if (0 === strpos($pathinfo, '/fellowship-applications/interview-score-rank') && preg_match('#^/fellowship\\-applications/interview\\-score\\-rank/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_interviewe_score_rank;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_interviewe_score_rank')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::intervieweScoreRankAction',));
                }
                not_fellapp_interviewe_score_rank:

                // fellapp_interview_applicants_list
                if (0 === strpos($pathinfo, '/fellowship-applications/interview-applicants-list') && preg_match('#^/fellowship\\-applications/interview\\-applicants\\-list/(?P<fellappIds>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_interview_applicants_list;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_interview_applicants_list')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::showInterviewApplicantsListAction',));
                }
                not_fellapp_interview_applicants_list:

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/invite-')) {
                // fellapp_inviteinterviewerstorate
                if (0 === strpos($pathinfo, '/fellowship-applications/invite-interviewers-to-rate') && preg_match('#^/fellowship\\-applications/invite\\-interviewers\\-to\\-rate/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_inviteinterviewerstorate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_inviteinterviewerstorate')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::inviteInterviewersToRateAction',));
                }
                not_fellapp_inviteinterviewerstorate:

                // fellapp_invite_single_interviewer_to_rate
                if (0 === strpos($pathinfo, '/fellowship-applications/invite-interviewer-to-rate') && preg_match('#^/fellowship\\-applications/invite\\-interviewer\\-to\\-rate/(?P<interviewId>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_invite_single_interviewer_to_rate;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_invite_single_interviewer_to_rate')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::inviteSingleInterviewerToRateAction',));
                }
                not_fellapp_invite_single_interviewer_to_rate:

                // fellapp_inviteobservers
                if (0 === strpos($pathinfo, '/fellowship-applications/invite-observers-to-view') && preg_match('#^/fellowship\\-applications/invite\\-observers\\-to\\-view/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_inviteobservers;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_inviteobservers')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppApplicantController::inviteObserversToRateAction',));
                }
                not_fellapp_inviteobservers:

            }

            // fellapp_home
            if ('/fellowship-applications' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fellapp_home');
                }

                return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::indexAction',  '_route' => 'fellapp_home',);
            }

            // fellapp_myinterviewees
            if ('/fellowship-applications/my-interviewees' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fellapp_myinterviewees');
                }

                return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::indexAction',  '_route' => 'fellapp_myinterviewees',);
            }

            if (0 === strpos($pathinfo, '/fellowship-applications/s')) {
                // fellapp_show
                if (0 === strpos($pathinfo, '/fellowship-applications/show') && preg_match('#^/fellowship\\-applications/show/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_show')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::showAction',));
                }

                // fellapp_status_email
                if (0 === strpos($pathinfo, '/fellowship-applications/status') && preg_match('#^/fellowship\\-applications/status/(?P<id>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_status_email;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_status_email')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::statusAction',));
                }
                not_fellapp_status_email:

                // fellapp_setloginvisit
                if ('/fellowship-applications/setloginvisit' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_setloginvisit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fellapp_setloginvisit');
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSecurityController::setAjaxLoginVisit',  '_route' => 'fellapp_setloginvisit',);
                }
                not_fellapp_setloginvisit:

                if (0 === strpos($pathinfo, '/fellowship-applications/settings')) {
                    // fellapp_sitesettings_siteparameters
                    if ('/fellowship-applications/settings/site-settings' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_sitesettings_siteparameters;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'fellapp_sitesettings_siteparameters');
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSiteParametersController::indexSiteSettingsAction',  '_route' => 'fellapp_sitesettings_siteparameters',);
                    }
                    not_fellapp_sitesettings_siteparameters:

                    // fellapp_siteparameters
                    if ('/fellowship-applications/settings' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_siteparameters;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'fellapp_siteparameters');
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSiteParametersController::indexAction',  '_route' => 'fellapp_siteparameters',);
                    }
                    not_fellapp_siteparameters:

                    // fellapp_siteparameters_edit
                    if (preg_match('#^/fellowship\\-applications/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_siteparameters_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_siteparameters_edit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSiteParametersController::editAction',));
                    }
                    not_fellapp_siteparameters_edit:

                    // fellapp_siteparameters_update
                    if (preg_match('#^/fellowship\\-applications/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_fellapp_siteparameters_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_siteparameters_update')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSiteParametersController::updateAction',));
                    }
                    not_fellapp_siteparameters_update:

                }

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/edit')) {
                // fellapp_edit
                if (preg_match('#^/fellowship\\-applications/edit/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_edit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::showAction',));
                }

                // fellapp_edit_default_interviewers
                if (0 === strpos($pathinfo, '/fellowship-applications/edit-with-default-interviewers') && preg_match('#^/fellowship\\-applications/edit\\-with\\-default\\-interviewers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_edit_default_interviewers')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::showAction',));
                }

                if (0 === strpos($pathinfo, '/fellowship-applications/edit-user-profile')) {
                    // fellapp_user_edit
                    if (preg_match('#^/fellowship\\-applications/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_user_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_user_edit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserController::editUserAction',));
                    }
                    not_fellapp_user_edit:

                    // fellapp_user_update
                    if (preg_match('#^/fellowship\\-applications/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_fellapp_user_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_user_update')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserController::updateUserAction',));
                    }
                    not_fellapp_user_update:

                }

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/event-log')) {
                // fellapp_logger
                if ('/fellowship-applications/event-log' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_logger;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fellapp_logger');
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppLoggerController::indexAction',  '_route' => 'fellapp_logger',);
                }
                not_fellapp_logger:

                // fellapp_application_log
                if (0 === strpos($pathinfo, '/fellowship-applications/event-log/application-log') && preg_match('#^/fellowship\\-applications/event\\-log/application\\-log/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_application_log;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_application_log')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppLoggerController::applicationLogAction',));
                }
                not_fellapp_application_log:

                // fellapp_event-log-per-object_log
                if ('/fellowship-applications/event-log/event-log-per-object' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_eventlogperobject_log;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'fellapp_event-log-per-object_log');
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppLoggerController::applicationPerObjectLogAction',  '_route' => 'fellapp_event-log-per-object_log',);
                }
                not_fellapp_eventlogperobject_log:

            }

            // fellapp_download
            if (0 === strpos($pathinfo, '/fellowship-applications/download') && preg_match('#^/fellowship\\-applications/download/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_download')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::showAction',));
            }

            if (0 === strpos($pathinfo, '/fellowship-applications/download-')) {
                // fellapp_download_pdf
                if (0 === strpos($pathinfo, '/fellowship-applications/download-pdf') && preg_match('#^/fellowship\\-applications/download\\-pdf/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_download_pdf;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_download_pdf')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::downloadReportAction',));
                }
                not_fellapp_download_pdf:

                // fellapp_download_itinerary_pdf
                if (0 === strpos($pathinfo, '/fellowship-applications/download-itinerary-pdf') && preg_match('#^/fellowship\\-applications/download\\-itinerary\\-pdf/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_download_itinerary_pdf;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_download_itinerary_pdf')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::downloadItineraryAction',));
                }
                not_fellapp_download_itinerary_pdf:

                // fellapp_download_applicants_list_excel
                if (0 === strpos($pathinfo, '/fellowship-applications/download-applicants-list-excel') && preg_match('#^/fellowship\\-applications/download\\-applicants\\-list\\-excel/(?P<currentYear>[^/]++)/(?P<fellappTypeId>[^/]++)/(?P<fellappIds>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_download_applicants_list_excel')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::downloadApplicantListExcelAction',));
                }

            }

            // fellapp_new
            if ('/fellowship-applications/new' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'fellapp_new');
                }

                return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::newAction',  '_route' => 'fellapp_new',);
            }

            // fellapp-nopermission
            if ('/fellowship-applications/no-permission' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellappnopermission;
                }

                return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSecurityController::actionNoPermission',  '_route' => 'fellapp-nopermission',);
            }
            not_fellappnopermission:

            // fellapp_update
            if (0 === strpos($pathinfo, '/fellowship-applications/update') && preg_match('#^/fellowship\\-applications/update/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if ('PUT' !== $canonicalMethod) {
                    $allow[] = 'PUT';
                    goto not_fellapp_update;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_update')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::updateAction',));
            }
            not_fellapp_update:

            // fellapp_showuser
            if (0 === strpos($pathinfo, '/fellowship-applications/user') && preg_match('#^/fellowship\\-applications/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellapp_showuser;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_showuser')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserController::showUserOptimizedAction',));
            }
            not_fellapp_showuser:

            if (0 === strpos($pathinfo, '/fellowship-applications/a')) {
                // fellapp_create_applicant
                if ('/fellowship-applications/applicant/new' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_fellapp_create_applicant;
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::createApplicantAction',  '_route' => 'fellapp_create_applicant',);
                }
                not_fellapp_create_applicant:

                // fellapp_fellowship_application_type_add
                if ('/fellowship-applications/add-fellowship-application-type' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_fellapp_fellowship_application_type_add;
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::addFellowshipApplicationTypeAction',  '_route' => 'fellapp_fellowship_application_type_add',);
                }
                not_fellapp_fellowship_application_type_add:

                if (0 === strpos($pathinfo, '/fellowship-applications/account-requests')) {
                    if (0 === strpos($pathinfo, '/fellowship-applications/account-requests/new')) {
                        // fellapp_accountrequest_new
                        if ('/fellowship-applications/account-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_fellapp_accountrequest_new;
                            }

                            return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserRequestController::newAction',  '_route' => 'fellapp_accountrequest_new',);
                        }
                        not_fellapp_accountrequest_new:

                        // fellapp_accountrequest_create
                        if ('/fellowship-applications/account-requests/new' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_fellapp_accountrequest_create;
                            }

                            return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserRequestController::createAction',  '_route' => 'fellapp_accountrequest_create',);
                        }
                        not_fellapp_accountrequest_create:

                    }

                    // fellapp_accountrequest
                    if ('/fellowship-applications/account-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_accountrequest;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserRequestController::indexAction',  '_route' => 'fellapp_accountrequest',);
                    }
                    not_fellapp_accountrequest:

                    // fellapp_accountrequest_status
                    if (preg_match('#^/fellowship\\-applications/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_accountrequest_status;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_accountrequest_status')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserRequestController::statusAction',));
                    }
                    not_fellapp_accountrequest_status:

                    // fellapp_accountrequest_approve
                    if ('/fellowship-applications/account-requests-approve' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_fellapp_accountrequest_approve;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUserRequestController::approveUserAccountRequestAction',  '_route' => 'fellapp_accountrequest_approve',);
                    }
                    not_fellapp_accountrequest_approve:

                }

            }

            // fellapp_status
            if (0 === strpos($pathinfo, '/fellowship-applications/change-status') && preg_match('#^/fellowship\\-applications/change\\-status/(?P<id>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellapp_status;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_status')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::statusAction',));
            }
            not_fellapp_status:

            if (0 === strpos($pathinfo, '/fellowship-applications/i')) {
                if (0 === strpos($pathinfo, '/fellowship-applications/in')) {
                    if (0 === strpos($pathinfo, '/fellowship-applications/interview-evaluation')) {
                        // fellapp_interview_show
                        if (0 === strpos($pathinfo, '/fellowship-applications/interview-evaluation/show') && preg_match('#^/fellowship\\-applications/interview\\-evaluation/show/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_fellapp_interview_show;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_interview_show')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::interviewAction',));
                        }
                        not_fellapp_interview_show:

                        // fellapp_interview_edit
                        if (preg_match('#^/fellowship\\-applications/interview\\-evaluation/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_fellapp_interview_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_interview_edit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::interviewAction',));
                        }
                        not_fellapp_interview_edit:

                    }

                    // fellapp_interview_update
                    if (0 === strpos($pathinfo, '/fellowship-applications/interview/update') && preg_match('#^/fellowship\\-applications/interview/update/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_fellapp_interview_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_interview_update')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::interviewUpdateAction',));
                    }
                    not_fellapp_interview_update:

                    // fellapp_instructions
                    if ('/fellowship-applications/instructions-to-change-import-interval' === $pathinfo) {
                        return array (  '_controller' => 'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController::templateAction',  'template' => 'OlegFellAppBundle:Instructions:taskSchedulerWindows.html.twig',  '_route' => 'fellapp_instructions',);
                    }

                }

                // fellapp_import
                if ('/fellowship-applications/import' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::importAction',  '_route' => 'fellapp_import',);
                }

                if (0 === strpos($pathinfo, '/fellowship-applications/idlelogout')) {
                    // fellapp_idlelogout
                    if ('/fellowship-applications/idlelogout' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSecurityController::idlelogoutAction',  '_route' => 'fellapp_idlelogout',);
                    }

                    // fellapp_idlelogout-saveorder
                    if (preg_match('#^/fellowship\\-applications/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSecurityController::idlelogoutAction',));
                    }

                }

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/r')) {
                if (0 === strpos($pathinfo, '/fellowship-applications/re')) {
                    // fellapp_remove
                    if (0 === strpos($pathinfo, '/fellowship-applications/remove') && preg_match('#^/fellowship\\-applications/remove/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_remove')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::removeAction',));
                    }

                    // fellapp_regenerate_reports
                    if ('/fellowship-applications/regenerate-all-complete-application-pdfs' === $trimmedPathinfo) {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'fellapp_regenerate_reports');
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::regenerateAllReportsAction',  '_route' => 'fellapp_regenerate_reports',);
                    }

                    // fellapp_reset_queue_run
                    if ('/fellowship-applications/reset-queue-and-run' === $trimmedPathinfo) {
                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'fellapp_reset_queue_run');
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::resetQueueRunAction',  '_route' => 'fellapp_reset_queue_run',);
                    }

                }

                // fellapp_rank_edit
                if (0 === strpos($pathinfo, '/fellowship-applications/rank/edit') && preg_match('#^/fellowship\\-applications/rank/edit/(?P<fellappid>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_rank_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_rank_edit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppRankController::rankEditAction',));
                }
                not_fellapp_rank_edit:

                // fellapp_rank_update
                if (0 === strpos($pathinfo, '/fellowship-applications/rank/update') && preg_match('#^/fellowship\\-applications/rank/update/(?P<fellappid>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_fellapp_rank_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_rank_update')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppRankController::rankUpdateAction',));
                }
                not_fellapp_rank_update:

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/populate')) {
                // fellapp_import_populate
                if ('/fellowship-applications/populate-import' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::importAndPopulateAction',  '_route' => 'fellapp_import_populate',);
                }

                // fellapp_populate
                if ('/fellowship-applications/populate' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::populateSpreadsheetAction',  '_route' => 'fellapp_populate',);
                }

                // fellapp_populate_default
                if ('/fellowship-applications/populate-default' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_populate_default;
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::populateDefaultAction',  '_route' => 'fellapp_populate_default',);
                }
                not_fellapp_populate_default:

            }

            // fellapp_view_pdf
            if (0 === strpos($pathinfo, '/fellowship-applications/view-pdf') && preg_match('#^/fellowship\\-applications/view\\-pdf/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellapp_view_pdf;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_view_pdf')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::downloadReportAction',));
            }
            not_fellapp_view_pdf:

            // fellapp_test
            if ('/fellowship-applications/test' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_fellapp_test;
                }

                return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppController::testAction',  '_route' => 'fellapp_test',);
            }
            not_fellapp_test:

            if (0 === strpos($pathinfo, '/fellowship-applications/f')) {
                if (0 === strpos($pathinfo, '/fellowship-applications/fellowship-type')) {
                    // fellapp_fellowshiptype_settings
                    if ('/fellowship-applications/fellowship-types-settings' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_fellowshiptype_settings;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::felltypeSettingsAction',  '_route' => 'fellapp_fellowshiptype_settings',);
                    }
                    not_fellapp_fellowshiptype_settings:

                    // fellapp_fellowshiptype_setting_show
                    if (preg_match('#^/fellowship\\-applications/fellowship\\-type/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_fellowshiptype_setting_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_fellowshiptype_setting_show')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::showAction',));
                    }
                    not_fellapp_fellowshiptype_setting_show:

                    // fellapp_fellowshiptype_setting_edit
                    if (0 === strpos($pathinfo, '/fellowship-applications/fellowship-type/edit') && preg_match('#^/fellowship\\-applications/fellowship\\-type/edit/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_fellowshiptype_setting_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_fellowshiptype_setting_edit')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::showAction',));
                    }
                    not_fellapp_fellowshiptype_setting_edit:

                    // fellapp_fellowshiptype_setting_update
                    if (0 === strpos($pathinfo, '/fellowship-applications/fellowship-type/update') && preg_match('#^/fellowship\\-applications/fellowship\\-type/update/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_fellapp_fellowshiptype_setting_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_fellowshiptype_setting_update')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::updateAction',));
                    }
                    not_fellapp_fellowshiptype_setting_update:

                }

                // fellapp_fellowship_application_type_remove
                if (0 === strpos($pathinfo, '/fellowship-applications/fellowship-application-type-remove') && preg_match('#^/fellowship\\-applications/fellowship\\-application\\-type\\-remove/(?P<fellaptypeid>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_fellapp_fellowship_application_type_remove;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_fellowship_application_type_remove')), array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppManagement::removeFellowshipApplicationTypeAction',));
                }
                not_fellapp_fellowship_application_type_remove:

                if (0 === strpos($pathinfo, '/fellowship-applications/file-')) {
                    // fellapp_file_delete
                    if ('/fellowship-applications/file-delete' === $pathinfo) {
                        if (!in_array($canonicalMethod, array('GET', 'POST', 'DELETE'))) {
                            $allow = array_merge($allow, array('GET', 'POST', 'DELETE'));
                            goto not_fellapp_file_delete;
                        }

                        return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUploadController::deleteFileAction',  '_route' => 'fellapp_file_delete',);
                    }
                    not_fellapp_file_delete:

                    // fellapp_file_download
                    if (0 === strpos($pathinfo, '/fellowship-applications/file-download') && preg_match('#^/fellowship\\-applications/file\\-download/(?P<id>\\d+)(?:/(?P<eventtype>[^/]++))?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_file_download;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_file_download')), array (  'eventtype' => NULL,  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUploadController::downloadFileAction',));
                    }
                    not_fellapp_file_download:

                    // fellapp_file_view
                    if (0 === strpos($pathinfo, '/fellowship-applications/file-view') && preg_match('#^/fellowship\\-applications/file\\-view/(?P<id>\\d+)(?:/(?P<viewType>[^/]++)(?:/(?P<eventtype>[^/]++))?)?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_fellapp_file_view;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'fellapp_file_view')), array (  'eventtype' => NULL,  'viewType' => NULL,  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppUploadController::viewFileAction',));
                    }
                    not_fellapp_file_view:

                }

            }

            elseif (0 === strpos($pathinfo, '/fellowship-applications/login')) {
                // fellapp_login
                if ('/fellowship-applications/login' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_fellapp_login;
                    }

                    return array (  '_controller' => 'Oleg\\FellAppBundle\\Controller\\FellAppSecurityController::loginAction',  '_route' => 'fellapp_login',);
                }
                not_fellapp_login:

                // fellapp_login_check
                if ('/fellowship-applications/login_check' === $pathinfo) {
                    return array('_route' => 'fellapp_login_check');
                }

            }

            // fellapp_logout
            if ('/fellowship-applications/logout' === $pathinfo) {
                return array('_route' => 'fellapp_logout');
            }

        }

        elseif (0 === strpos($pathinfo, '/vacation-request')) {
            // vacreq_approvers
            if ('/vacation-request/groups' === $trimmedPathinfo) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_approvers;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'vacreq_approvers');
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::myRequestsAction',  '_route' => 'vacreq_approvers',);
            }
            not_vacreq_approvers:

            // vacreq_carry_over_request_group_list
            if (0 === strpos($pathinfo, '/vacation-request/carry-over-request-group') && preg_match('#^/vacation\\-request/carry\\-over\\-request\\-group/(?P<groupId>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_carry_over_request_group_list;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_carry_over_request_group_list')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::carryOverRequestGroupAction',));
            }
            not_vacreq_carry_over_request_group_list:

            if (0 === strpos($pathinfo, '/vacation-request/carry-over-vacation-days')) {
                // vacreq_carryover
                if (preg_match('#^/vacation\\-request/carry\\-over\\-vacation\\-days/(?P<userId>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_carryover;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_carryover')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\CarryOverController::carryOverAction',));
                }
                not_vacreq_carryover:

                // vacreq_status_change_carryover
                if (0 === strpos($pathinfo, '/vacation-request/carry-over-vacation-days/status') && preg_match('#^/vacation\\-request/carry\\-over\\-vacation\\-days/status/(?P<id>[^/]++)/(?P<requestName>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_status_change_carryover;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_change_carryover')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\CarryOverController::statusAction',));
                }
                not_vacreq_status_change_carryover:

                // vacreq_status_email_change_carryover
                if (0 === strpos($pathinfo, '/vacation-request/carry-over-vacation-days/estatus') && preg_match('#^/vacation\\-request/carry\\-over\\-vacation\\-days/estatus/(?P<id>[^/]++)/(?P<requestName>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_status_email_change_carryover;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_email_change_carryover')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\CarryOverController::statusAction',));
                }
                not_vacreq_status_email_change_carryover:

            }

            // vacreq_orginst_list
            if (0 === strpos($pathinfo, '/vacation-request/organizational-institutions') && preg_match('#^/vacation\\-request/organizational\\-institutions/(?P<institutionId>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_orginst_list;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_list')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::organizationalInstitutionAction',));
            }
            not_vacreq_orginst_list:

            if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-')) {
                if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-user-')) {
                    // vacreq_orginst_user_management
                    if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-user-management') && preg_match('#^/vacation\\-request/organizational\\-institution\\-user\\-management/(?P<userid>[^/]++)/(?P<instid>[^/]++)/(?P<roleId>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_vacreq_orginst_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_user_management')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::userManagementAction',));
                    }
                    not_vacreq_orginst_user_management:

                    // vacreq_orginst_user_update
                    if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-user-update') && preg_match('#^/vacation\\-request/organizational\\-institution\\-user\\-update/(?P<userid>[^/]++)/(?P<instid>[^/]++)/(?P<roleIds>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_vacreq_orginst_user_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_user_update')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::userManagementUpdateAction',));
                    }
                    not_vacreq_orginst_user_update:

                    // vacreq_orginst_user_remove
                    if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-user-remove') && preg_match('#^/vacation\\-request/organizational\\-institution\\-user\\-remove/(?P<userid>[^/]++)/(?P<instid>[^/]++)/(?P<roleId>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_vacreq_orginst_user_remove;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_user_remove')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::removeUserAction',));
                    }
                    not_vacreq_orginst_user_remove:

                    if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-user-add')) {
                        // vacreq_orginst_add_user
                        if (preg_match('#^/vacation\\-request/organizational\\-institution\\-user\\-add/(?P<instid>[^/]++)/(?P<roleId>[^/]++)/(?P<btnName>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                                $allow = array_merge($allow, array('GET', 'POST'));
                                goto not_vacreq_orginst_add_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_add_user')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::addUserAction',));
                        }
                        not_vacreq_orginst_add_user:

                        // vacreq_orginst_add_action_user
                        if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-user-add-action') && preg_match('#^/vacation\\-request/organizational\\-institution\\-user\\-add\\-action/(?P<instid>[^/]++)/(?P<roleId>[^/]++)$#s', $pathinfo, $matches)) {
                            if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                                $allow = array_merge($allow, array('GET', 'POST'));
                                goto not_vacreq_orginst_add_action_user;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_add_action_user')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::addRoleToUserAction',));
                        }
                        not_vacreq_orginst_add_action_user:

                    }

                }

                // vacreq_group_remove
                if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-remove') && preg_match('#^/vacation\\-request/organizational\\-institution\\-remove/(?P<instid>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_group_remove;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_group_remove')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::removeGroupAction',));
                }
                not_vacreq_group_remove:

                if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-emailusers')) {
                    // vacreq_orginst_emailusers
                    if (preg_match('#^/vacation\\-request/organizational\\-institution\\-emailusers/(?P<instid>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_vacreq_orginst_emailusers;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_emailusers')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::emailUsersAction',));
                    }
                    not_vacreq_orginst_emailusers:

                    // vacreq_orginst_emailusers_update
                    if (0 === strpos($pathinfo, '/vacation-request/organizational-institution-emailusers-update') && preg_match('#^/vacation\\-request/organizational\\-institution\\-emailusers\\-update/(?P<instid>[^/]++)/(?P<users>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                            $allow = array_merge($allow, array('GET', 'POST'));
                            goto not_vacreq_orginst_emailusers_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_emailusers_update')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::emailUsersUpdateAction',));
                    }
                    not_vacreq_orginst_emailusers_update:

                }

            }

            elseif (0 === strpos($pathinfo, '/vacation-request/m')) {
                // vacreq_orginst_management
                if (0 === strpos($pathinfo, '/vacation-request/manage-group') && preg_match('#^/vacation\\-request/manage\\-group/(?P<institutionId>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_orginst_management;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_orginst_management')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::orgInstManagementAction',));
                }
                not_vacreq_orginst_management:

                // vacreq_mygroup
                if ('/vacation-request/my-group' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_mygroup;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_mygroup');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::myGroupAction',  '_route' => 'vacreq_mygroup',);
                }
                not_vacreq_mygroup:

                // vacreq_mysinglegroup
                if (0 === strpos($pathinfo, '/vacation-request/my-single-group') && preg_match('#^/vacation\\-request/my\\-single\\-group/(?P<groupId>[^/]++)/(?P<userids>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_mysinglegroup;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_mysinglegroup')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::mySingleGroupAction',));
                }
                not_vacreq_mysinglegroup:

            }

            elseif (0 === strpos($pathinfo, '/vacation-request/a')) {
                // vacreq_group_add
                if ('/vacation-request/add-group' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_group_add;
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\ApproverController::addGroupAction',  '_route' => 'vacreq_group_add',);
                }
                not_vacreq_group_add:

                // vacreq_awaycalendar
                if ('/vacation-request/away-calendar' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_awaycalendar;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_awaycalendar');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\CalendarController::awayCalendarAction',  '_route' => 'vacreq_awaycalendar',);
                }
                not_vacreq_awaycalendar:

                // vacreq_about_page
                if ('/vacation-request/about' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\DefaultController::aboutAction',  '_route' => 'vacreq_about_page',);
                }

            }

            // vacreq_home
            if ('/vacation-request' === $trimmedPathinfo) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_home;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'vacreq_home');
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::newAction',  '_route' => 'vacreq_home',);
            }
            not_vacreq_home:

            // vacreq_new
            if ('/vacation-request/new' === $pathinfo) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_new;
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::newAction',  '_route' => 'vacreq_new',);
            }
            not_vacreq_new:

            // vacreq-nopermission
            if ('/vacation-request/no-permission' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreqnopermission;
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSecurityController::actionNoPermission',  '_route' => 'vacreq-nopermission',);
            }
            not_vacreqnopermission:

            if (0 === strpos($pathinfo, '/vacation-request/ca')) {
                // vacreq_carryoverrequest
                if ('/vacation-request/carry-over-request/new' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_carryoverrequest;
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::newAction',  '_route' => 'vacreq_carryoverrequest',);
                }
                not_vacreq_carryoverrequest:

                // vacreq_status_cancellation-request_change
                if (0 === strpos($pathinfo, '/vacation-request/cancellation-request/status') && preg_match('#^/vacation\\-request/cancellation\\-request/status/(?P<id>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_status_cancellationrequest_change;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_cancellation-request_change')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::statusCancellationRequestChaneAction',));
                }
                not_vacreq_status_cancellationrequest_change:

                // vacreq_status_cancellation-request_email_change
                if (0 === strpos($pathinfo, '/vacation-request/cancellation-request/estatus') && preg_match('#^/vacation\\-request/cancellation\\-request/estatus/(?P<id>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_status_cancellationrequest_email_change;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_cancellation-request_email_change')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::statusCancellationRequestChaneAction',));
                }
                not_vacreq_status_cancellationrequest_email_change:

            }

            elseif (0 === strpos($pathinfo, '/vacation-request/s')) {
                // vacreq_show
                if (0 === strpos($pathinfo, '/vacation-request/show') && preg_match('#^/vacation\\-request/show/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_show')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::showAction',));
                }
                not_vacreq_show:

                if (0 === strpos($pathinfo, '/vacation-request/status')) {
                    // vacreq_status_change
                    if (preg_match('#^/vacation\\-request/status/(?P<id>[^/]++)/(?P<requestName>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_status_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_change')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::statusAction',));
                    }
                    not_vacreq_status_change:

                    // vacreq_status_cancellation-request
                    if (0 === strpos($pathinfo, '/vacation-request/status-cancellation-request') && preg_match('#^/vacation\\-request/status\\-cancellation\\-request/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_status_cancellationrequest;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_cancellation-request')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::statusCancellationRequestAction',));
                    }
                    not_vacreq_status_cancellationrequest:

                }

                // vacreq_send_reminder_email
                if (0 === strpos($pathinfo, '/vacation-request/send-reminder-email') && preg_match('#^/vacation\\-request/send\\-reminder\\-email/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_send_reminder_email;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_send_reminder_email')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::sendReminderEmailAction',));
                }
                not_vacreq_send_reminder_email:

                if (0 === strpos($pathinfo, '/vacation-request/set')) {
                    // vacreq_setdates_imported_old_data
                    if ('/vacation-request/setdates-imported-old-data' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_setdates_imported_old_data;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'vacreq_setdates_imported_old_data');
                        }

                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::setdatesImportedOldDataAction',  '_route' => 'vacreq_setdates_imported_old_data',);
                    }
                    not_vacreq_setdates_imported_old_data:

                    // vacreq_setloginvisit
                    if ('/vacation-request/setloginvisit' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_setloginvisit;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'vacreq_setloginvisit');
                        }

                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSecurityController::setAjaxLoginVisit',  '_route' => 'vacreq_setloginvisit',);
                    }
                    not_vacreq_setloginvisit:

                    if (0 === strpos($pathinfo, '/vacation-request/settings')) {
                        // vacreq_siteparameters
                        if ('/vacation-request/settings' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_vacreq_siteparameters;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'vacreq_siteparameters');
                            }

                            return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSiteParametersController::indexAction',  '_route' => 'vacreq_siteparameters',);
                        }
                        not_vacreq_siteparameters:

                        // vacreq_siteparameters_edit
                        if (preg_match('#^/vacation\\-request/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_vacreq_siteparameters_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_siteparameters_edit')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSiteParametersController::editAction',));
                        }
                        not_vacreq_siteparameters_edit:

                        // vacreq_siteparameters_update
                        if (preg_match('#^/vacation\\-request/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                            if ('PUT' !== $canonicalMethod) {
                                $allow[] = 'PUT';
                                goto not_vacreq_siteparameters_update;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_siteparameters_update')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSiteParametersController::updateAction',));
                        }
                        not_vacreq_siteparameters_update:

                    }

                }

            }

            elseif (0 === strpos($pathinfo, '/vacation-request/e')) {
                // vacreq_edit
                if (0 === strpos($pathinfo, '/vacation-request/edit') && preg_match('#^/vacation\\-request/edit/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_edit')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::editAction',));
                }
                not_vacreq_edit:

                if (0 === strpos($pathinfo, '/vacation-request/edit-user-profile')) {
                    // vacreq_user_edit
                    if (preg_match('#^/vacation\\-request/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_user_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_user_edit')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserController::editUserAction',));
                    }
                    not_vacreq_user_edit:

                    // vacreq_user_update
                    if (preg_match('#^/vacation\\-request/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_vacreq_user_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_user_update')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserController::updateUserAction',));
                    }
                    not_vacreq_user_update:

                }

                // vacreq_status_email_change
                if (0 === strpos($pathinfo, '/vacation-request/estatus') && preg_match('#^/vacation\\-request/estatus/(?P<id>[^/]++)/(?P<requestName>[^/]++)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_status_email_change;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_status_email_change')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::statusAction',));
                }
                not_vacreq_status_email_change:

                // vacreq_emailtest
                if ('/vacation-request/emailtest' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_emailtest;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_emailtest');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::emailTestAction',  '_route' => 'vacreq_emailtest',);
                }
                not_vacreq_emailtest:

                if (0 === strpos($pathinfo, '/vacation-request/event-log')) {
                    // vacreq_logger
                    if ('/vacation-request/event-log' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_logger;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'vacreq_logger');
                        }

                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqLoggerController::indexAction',  '_route' => 'vacreq_logger',);
                    }
                    not_vacreq_logger:

                    // vacreq_logger_user_all
                    if (0 === strpos($pathinfo, '/vacation-request/event-log/user') && preg_match('#^/vacation\\-request/event\\-log/user/(?P<id>[^/]++)/all$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_logger_user_all;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_logger_user_all')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqLoggerController::getAuditLogAllAction',));
                    }
                    not_vacreq_logger_user_all:

                }

            }

            // vacreq_review
            if (0 === strpos($pathinfo, '/vacation-request/review') && preg_match('#^/vacation\\-request/review/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_review;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_review')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::editAction',));
            }
            not_vacreq_review:

            // vacreq_authorization_remove
            if (0 === strpos($pathinfo, '/vacation-request/revoke-access-authorization') && preg_match('#^/vacation\\-request/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreq_authorization_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_authorization_remove')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::authorizationRemoveAction',));
            }
            not_vacreq_authorization_remove:

            if (0 === strpos($pathinfo, '/vacation-request/i')) {
                // vacreq_import_old_data
                if ('/vacation-request/import-old-data' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_import_old_data;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_import_old_data');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::importOldDataAction',  '_route' => 'vacreq_import_old_data',);
                }
                not_vacreq_import_old_data:

                // vacreq_incomingrequests
                if ('/vacation-request/incoming-requests' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_vacreq_incomingrequests;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_incomingrequests');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestIndexController::incomingRequestsAction',  '_route' => 'vacreq_incomingrequests',);
                }
                not_vacreq_incomingrequests:

                if (0 === strpos($pathinfo, '/vacation-request/idlelogout')) {
                    // vacreq_idlelogout
                    if ('/vacation-request/idlelogout' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSecurityController::idlelogoutAction',  '_route' => 'vacreq_idlelogout',);
                    }

                    // vacreq_idlelogout-saveorder
                    if (preg_match('#^/vacation\\-request/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSecurityController::idlelogoutAction',));
                    }

                }

            }

            // vacreq_delete_imported_old_data
            if ('/vacation-request/delete-imported-old-data' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreq_delete_imported_old_data;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'vacreq_delete_imported_old_data');
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::deleteImportedOldDataAction',  '_route' => 'vacreq_delete_imported_old_data',);
            }
            not_vacreq_delete_imported_old_data:

            // vacreq_accessrequest_remove
            if (0 === strpos($pathinfo, '/vacation-request/deny-access-request') && preg_match('#^/vacation\\-request/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreq_accessrequest_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_accessrequest_remove')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestRemoveAction',));
            }
            not_vacreq_accessrequest_remove:

            // vacreq_overlaps
            if ('/vacation-request/overlaps' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreq_overlaps;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'vacreq_overlaps');
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::getOverlapRequestsAction',  '_route' => 'vacreq_overlaps',);
            }
            not_vacreq_overlaps:

            // vacreq_update_carryover
            if ('/vacation-request/update-carryover' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreq_update_carryover;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'vacreq_update_carryover');
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestController::getUpdateCarryOverRequestsAction',  '_route' => 'vacreq_update_carryover',);
            }
            not_vacreq_update_carryover:

            // vacreq_showuser
            if (0 === strpos($pathinfo, '/vacation-request/user') && preg_match('#^/vacation\\-request/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_vacreq_showuser;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_showuser')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserController::showUserOptimizedAction',));
            }
            not_vacreq_showuser:

            // vacreq_myrequests
            if ('/vacation-request/my-requests' === $trimmedPathinfo) {
                if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                    $allow = array_merge($allow, array('GET', 'POST'));
                    goto not_vacreq_myrequests;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'vacreq_myrequests');
                }

                return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\RequestIndexController::myRequestsAction',  '_route' => 'vacreq_myrequests',);
            }
            not_vacreq_myrequests:

            if (0 === strpos($pathinfo, '/vacation-request/a')) {
                if (0 === strpos($pathinfo, '/vacation-request/access-requests')) {
                    if (0 === strpos($pathinfo, '/vacation-request/access-requests/new')) {
                        // vacreq_access_request_new_plain
                        if ('/vacation-request/access-requests/new/create' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_vacreq_access_request_new_plain;
                            }

                            return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestCreatePlainAction',  '_route' => 'vacreq_access_request_new_plain',);
                        }
                        not_vacreq_access_request_new_plain:

                        // vacreq_access_request_new
                        if ('/vacation-request/access-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_vacreq_access_request_new;
                            }

                            return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestCreateAction',  '_route' => 'vacreq_access_request_new',);
                        }
                        not_vacreq_access_request_new:

                        // vacreq_access_request_create
                        if ('/vacation-request/access-requests/new/pending' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_vacreq_access_request_create;
                            }

                            return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestAction',  '_route' => 'vacreq_access_request_create',);
                        }
                        not_vacreq_access_request_create:

                    }

                    // vacreq_accessrequest_list
                    if ('/vacation-request/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestIndexAction',  '_route' => 'vacreq_accessrequest_list',);
                    }
                    not_vacreq_accessrequest_list:

                    // vacreq_accessrequest_change
                    if (0 === strpos($pathinfo, '/vacation-request/access-requests/change-status') && preg_match('#^/vacation\\-request/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_accessrequest_change')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestChangeAction',));
                    }
                    not_vacreq_accessrequest_change:

                    // vacreq_accessrequest_management
                    if (preg_match('#^/vacation\\-request/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_accessrequest_management')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestManagementAction',));
                    }
                    not_vacreq_accessrequest_management:

                    // vacreq_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/vacation-request/access-requests/submit') && preg_match('#^/vacation\\-request/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_vacreq_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_vacreq_accessrequest_management_submit:

                }

                elseif (0 === strpos($pathinfo, '/vacation-request/account-requests')) {
                    if (0 === strpos($pathinfo, '/vacation-request/account-requests/new')) {
                        // vacreq_accountrequest_new
                        if ('/vacation-request/account-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_vacreq_accountrequest_new;
                            }

                            return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserRequestController::newAction',  '_route' => 'vacreq_accountrequest_new',);
                        }
                        not_vacreq_accountrequest_new:

                        // vacreq_accountrequest_create
                        if ('/vacation-request/account-requests/new' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_vacreq_accountrequest_create;
                            }

                            return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserRequestController::createAction',  '_route' => 'vacreq_accountrequest_create',);
                        }
                        not_vacreq_accountrequest_create:

                    }

                    // vacreq_accountrequest
                    if ('/vacation-request/account-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_accountrequest;
                        }

                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserRequestController::indexAction',  '_route' => 'vacreq_accountrequest',);
                    }
                    not_vacreq_accountrequest:

                    // vacreq_accountrequest_status
                    if (preg_match('#^/vacation\\-request/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_accountrequest_status;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_accountrequest_status')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserRequestController::statusAction',));
                    }
                    not_vacreq_accountrequest_status:

                    // vacreq_accountrequest_approve
                    if ('/vacation-request/account-requests-approve' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_vacreq_accountrequest_approve;
                        }

                        return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUserRequestController::approveUserAccountRequestAction',  '_route' => 'vacreq_accountrequest_approve',);
                    }
                    not_vacreq_accountrequest_approve:

                }

                // vacreq_authorized_users
                if ('/vacation-request/authorized-users' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_authorized_users;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_authorized_users');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::authorizedUsersAction',  '_route' => 'vacreq_authorized_users',);
                }
                not_vacreq_authorized_users:

                if (0 === strpos($pathinfo, '/vacation-request/authorization-user-manager')) {
                    // vacreq_authorization_user_management
                    if (preg_match('#^/vacation\\-request/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_vacreq_authorization_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_authorization_user_management')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::authorizationManagementAction',));
                    }
                    not_vacreq_authorization_user_management:

                    // vacreq_authorization_user_management_submit
                    if (0 === strpos($pathinfo, '/vacation-request/authorization-user-manager/submit') && preg_match('#^/vacation\\-request/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_vacreq_authorization_user_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::authorizationManagementSubmitAction',));
                    }
                    not_vacreq_authorization_user_management_submit:

                }

                // vacreq_add_authorized_user
                if ('/vacation-request/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'vacreq_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqAccessRequestController::addAuthorizedUserAction',  '_route' => 'vacreq_add_authorized_user',);
                }
                not_vacreq_add_authorized_user:

            }

            elseif (0 === strpos($pathinfo, '/vacation-request/login')) {
                // vacreq_login
                if ('/vacation-request/login' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_login;
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqSecurityController::loginAction',  '_route' => 'vacreq_login',);
                }
                not_vacreq_login:

                // vacreq_login_check
                if ('/vacation-request/login_check' === $pathinfo) {
                    return array('_route' => 'vacreq_login_check');
                }

            }

            // vacreq_logout
            if ('/vacation-request/logout' === $pathinfo) {
                return array('_route' => 'vacreq_logout');
            }

            if (0 === strpos($pathinfo, '/vacation-request/file-')) {
                // vacreq_file_delete
                if ('/vacation-request/file-delete' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'DELETE'));
                        goto not_vacreq_file_delete;
                    }

                    return array (  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUploadController::deleteFileAction',  '_route' => 'vacreq_file_delete',);
                }
                not_vacreq_file_delete:

                // vacreq_file_download
                if (0 === strpos($pathinfo, '/vacation-request/file-download') && preg_match('#^/vacation\\-request/file\\-download/(?P<id>\\d+)(?:/(?P<eventtype>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_file_download;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_file_download')), array (  'eventtype' => NULL,  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUploadController::downloadFileAction',));
                }
                not_vacreq_file_download:

                // vacreq_file_view
                if (0 === strpos($pathinfo, '/vacation-request/file-view') && preg_match('#^/vacation\\-request/file\\-view/(?P<id>\\d+)(?:/(?P<viewType>[^/]++)(?:/(?P<eventtype>[^/]++))?)?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_vacreq_file_view;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'vacreq_file_view')), array (  'eventtype' => NULL,  'viewType' => NULL,  '_controller' => 'Oleg\\VacReqBundle\\Controller\\VacReqUploadController::viewFileAction',));
                }
                not_vacreq_file_view:

            }

            // fullcalendar_loader
            if ('/vacation-request/fc-load-events' === $pathinfo) {
                return array (  '_controller' => 'ADesigns\\CalendarBundle\\Controller\\CalendarController::loadCalendarAction',  '_route' => 'fullcalendar_loader',);
            }

        }

        elseif (0 === strpos($pathinfo, '/call-log-book')) {
            if (0 === strpos($pathinfo, '/call-log-book/e')) {
                if (0 === strpos($pathinfo, '/call-log-book/entry')) {
                    // calllog_callentry_same_patient
                    if ('/call-log-book/entry/same-patient/new' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallEntrySamePatientController::callEntrySamePatientAction',  '_route' => 'calllog_callentry_same_patient',);
                    }

                    // calllog_save_entry_same_patient
                    if ('/call-log-book/entry/same-patient/save' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_calllog_save_entry_same_patient;
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallEntrySamePatientController::saveEntrySamePatientAction',  '_route' => 'calllog_save_entry_same_patient',);
                    }
                    not_calllog_save_entry_same_patient:

                    if (0 === strpos($pathinfo, '/call-log-book/entry/edit')) {
                        // calllog_callentry_edit
                        if (preg_match('#^/call\\-log\\-book/entry/edit/(?P<messageOid>[^/]++)(?:/(?P<messageVersion>[^/]++))?$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_callentry_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_callentry_edit')), array (  'messageVersion' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::getCallLogEntryAction',));
                        }
                        not_calllog_callentry_edit:

                        // calllog_callentry_edit_latest_encounter
                        if (0 === strpos($pathinfo, '/call-log-book/entry/edit-latest-encounter') && preg_match('#^/call\\-log\\-book/entry/edit\\-latest\\-encounter/(?P<messageOid>[^/]++)(?:/(?P<messageVersion>[^/]++))?$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_callentry_edit_latest_encounter;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_callentry_edit_latest_encounter')), array (  'messageVersion' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::getCallLogEntryAction',));
                        }
                        not_calllog_callentry_edit_latest_encounter:

                    }

                    elseif (0 === strpos($pathinfo, '/call-log-book/entry/amend')) {
                        // calllog_callentry_amend
                        if (preg_match('#^/call\\-log\\-book/entry/amend/(?P<messageOid>[^/]++)(?:/(?P<messageVersion>[^/]++))?$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_callentry_amend;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_callentry_amend')), array (  'messageVersion' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::getCallLogEntryAction',));
                        }
                        not_calllog_callentry_amend:

                        // calllog_callentry_amend_latest_encounter
                        if (0 === strpos($pathinfo, '/call-log-book/entry/amend-latest-encounter') && preg_match('#^/call\\-log\\-book/entry/amend\\-latest\\-encounter/(?P<messageOid>[^/]++)(?:/(?P<messageVersion>[^/]++))?$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_callentry_amend_latest_encounter;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_callentry_amend_latest_encounter')), array (  'messageVersion' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::getCallLogEntryAction',));
                        }
                        not_calllog_callentry_amend_latest_encounter:

                    }

                    // calllog_update_entry
                    if (0 === strpos($pathinfo, '/call-log-book/entry/update') && preg_match('#^/call\\-log\\-book/entry/update/(?P<messageId>[^/]++)/(?P<cycle>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_calllog_update_entry;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_update_entry')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::updateEntryAction',));
                    }
                    not_calllog_update_entry:

                    // calllog-check-message-version
                    if ('/call-log-book/entry/check-message-version' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllogcheckmessageversion;
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::checkMessageVersionAction',  '_route' => 'calllog-check-message-version',);
                    }
                    not_calllogcheckmessageversion:

                }

                elseif (0 === strpos($pathinfo, '/call-log-book/event-log')) {
                    // calllog_logger
                    if ('/call-log-book/event-log' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_logger;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'calllog_logger');
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogLoggerController::indexAction',  '_route' => 'calllog_logger',);
                    }
                    not_calllog_logger:

                    // calllog_logger_user_all
                    if (0 === strpos($pathinfo, '/call-log-book/event-log/user') && preg_match('#^/call\\-log\\-book/event\\-log/user/(?P<id>[^/]++)/all$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_logger_user_all;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_logger_user_all')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogLoggerController::getAuditLogAllAction',));
                    }
                    not_calllog_logger_user_all:

                    // calllog_my_generation_log
                    if ('/call-log-book/event-log/event-log-per-user-per-event-type' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_my_generation_log;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'calllog_my_generation_log');
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogLoggerController::myGenerationLogAction',  '_route' => 'calllog_my_generation_log',);
                    }
                    not_calllog_my_generation_log:

                    // calllog_event-log-per-object_log
                    if ('/call-log-book/event-log/event-log-per-object' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_eventlogperobject_log;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'calllog_event-log-per-object_log');
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogLoggerController::calllogEventLogPerObjectAction',  '_route' => 'calllog_event-log-per-object_log',);
                    }
                    not_calllog_eventlogperobject_log:

                }

                elseif (0 === strpos($pathinfo, '/call-log-book/edit-user-profile')) {
                    // calllog_user_edit
                    if (preg_match('#^/call\\-log\\-book/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_user_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_user_edit')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserController::editUserAction',));
                    }
                    not_calllog_user_edit:

                    // calllog_user_update
                    if (preg_match('#^/call\\-log\\-book/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_calllog_user_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_user_update')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserController::updateUserAction',));
                    }
                    not_calllog_user_update:

                }

                // calllog_edit_patient_record_ajax
                if ('/call-log-book/edit-patient-record-ajax' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::editPatientAjaxAction',  '_route' => 'calllog_edit_patient_record_ajax',);
                }

            }

            elseif (0 === strpos($pathinfo, '/call-log-book/a')) {
                if (0 === strpos($pathinfo, '/call-log-book/access-requests')) {
                    if (0 === strpos($pathinfo, '/call-log-book/access-requests/new')) {
                        // calllog_access_request_new_plain
                        if ('/call-log-book/access-requests/new/create' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_access_request_new_plain;
                            }

                            return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestCreatePlainAction',  '_route' => 'calllog_access_request_new_plain',);
                        }
                        not_calllog_access_request_new_plain:

                        // calllog_access_request_new
                        if ('/call-log-book/access-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_access_request_new;
                            }

                            return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestCreateAction',  '_route' => 'calllog_access_request_new',);
                        }
                        not_calllog_access_request_new:

                        // calllog_access_request_create
                        if ('/call-log-book/access-requests/new/pending' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_calllog_access_request_create;
                            }

                            return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestAction',  '_route' => 'calllog_access_request_create',);
                        }
                        not_calllog_access_request_create:

                    }

                    // calllog_accessrequest_list
                    if ('/call-log-book/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestIndexAction',  '_route' => 'calllog_accessrequest_list',);
                    }
                    not_calllog_accessrequest_list:

                    // calllog_accessrequest_change
                    if (0 === strpos($pathinfo, '/call-log-book/access-requests/change-status') && preg_match('#^/call\\-log\\-book/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_accessrequest_change')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestChangeAction',));
                    }
                    not_calllog_accessrequest_change:

                    // calllog_accessrequest_management
                    if (preg_match('#^/call\\-log\\-book/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_accessrequest_management')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestManagementAction',));
                    }
                    not_calllog_accessrequest_management:

                    // calllog_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/call-log-book/access-requests/submit') && preg_match('#^/call\\-log\\-book/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_calllog_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_calllog_accessrequest_management_submit:

                }

                elseif (0 === strpos($pathinfo, '/call-log-book/account-requests')) {
                    if (0 === strpos($pathinfo, '/call-log-book/account-requests/new')) {
                        // calllog_accountrequest_new
                        if ('/call-log-book/account-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_calllog_accountrequest_new;
                            }

                            return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserRequestController::newAction',  '_route' => 'calllog_accountrequest_new',);
                        }
                        not_calllog_accountrequest_new:

                        // calllog_accountrequest_create
                        if ('/call-log-book/account-requests/new' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_calllog_accountrequest_create;
                            }

                            return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserRequestController::createAction',  '_route' => 'calllog_accountrequest_create',);
                        }
                        not_calllog_accountrequest_create:

                    }

                    // calllog_accountrequest
                    if ('/call-log-book/account-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_accountrequest;
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserRequestController::indexAction',  '_route' => 'calllog_accountrequest',);
                    }
                    not_calllog_accountrequest:

                    // calllog_accountrequest_status
                    if (preg_match('#^/call\\-log\\-book/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_accountrequest_status;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_accountrequest_status')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserRequestController::statusAction',));
                    }
                    not_calllog_accountrequest_status:

                    // calllog_accountrequest_approve
                    if ('/call-log-book/account-requests-approve' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_calllog_accountrequest_approve;
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserRequestController::approveUserAccountRequestAction',  '_route' => 'calllog_accountrequest_approve',);
                    }
                    not_calllog_accountrequest_approve:

                }

                // calllog_authorized_users
                if ('/call-log-book/authorized-users' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_authorized_users;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'calllog_authorized_users');
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::authorizedUsersAction',  '_route' => 'calllog_authorized_users',);
                }
                not_calllog_authorized_users:

                if (0 === strpos($pathinfo, '/call-log-book/authorization-user-manager')) {
                    // calllog_authorization_user_management
                    if (preg_match('#^/call\\-log\\-book/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_authorization_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_authorization_user_management')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::authorizationManagementAction',));
                    }
                    not_calllog_authorization_user_management:

                    // calllog_authorization_user_management_submit
                    if (0 === strpos($pathinfo, '/call-log-book/authorization-user-manager/submit') && preg_match('#^/call\\-log\\-book/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_calllog_authorization_user_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::authorizationManagementSubmitAction',));
                    }
                    not_calllog_authorization_user_management_submit:

                }

                // calllog_add_authorized_user
                if ('/call-log-book/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'calllog_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::addAuthorizedUserAction',  '_route' => 'calllog_add_authorized_user',);
                }
                not_calllog_add_authorized_user:

            }

            // calllog_accessrequest_remove
            if (0 === strpos($pathinfo, '/call-log-book/deny-access-request') && preg_match('#^/call\\-log\\-book/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllog_accessrequest_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_accessrequest_remove')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::accessRequestRemoveAction',));
            }
            not_calllog_accessrequest_remove:

            // calllog_delete
            if (0 === strpos($pathinfo, '/call-log-book/delete') && preg_match('#^/call\\-log\\-book/delete/(?P<messageOid>[^/]++)/(?P<messageVersion>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllog_delete;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_delete')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::deleteMessageAction',));
            }
            not_calllog_delete:

            // calllog_authorization_remove
            if (0 === strpos($pathinfo, '/call-log-book/revoke-access-authorization') && preg_match('#^/call\\-log\\-book/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllog_authorization_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_authorization_remove')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogAccessRequestController::authorizationRemoveAction',));
            }
            not_calllog_authorization_remove:

            if (0 === strpos($pathinfo, '/call-log-book/un')) {
                // calllog_undelete
                if (0 === strpos($pathinfo, '/call-log-book/un-delete') && preg_match('#^/call\\-log\\-book/un\\-delete/(?P<messageOid>[^/]++)/(?P<messageVersion>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_undelete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_undelete')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogEditController::unDeleteMessageAction',));
                }
                not_calllog_undelete:

                // calllog_unmerge_patient_records
                if ('/call-log-book/un-merge-patient-records' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::unmergePatientAction',  '_route' => 'calllog_unmerge_patient_records',);
                }

                // calllog_unmerge_patient_records_ajax
                if ('/call-log-book/unmerge-patient-records-ajax' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::unmergePatientAjaxAction',  '_route' => 'calllog_unmerge_patient_records_ajax',);
                }

            }

            // calllog_showuser
            if (0 === strpos($pathinfo, '/call-log-book/user') && preg_match('#^/call\\-log\\-book/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllog_showuser;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_showuser')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUserController::showUserOptimizedAction',));
            }
            not_calllog_showuser:

            if (0 === strpos($pathinfo, '/call-log-book/patient')) {
                // calllog_patient_show
                if (0 === strpos($pathinfo, '/call-log-book/patient/info') && preg_match('#^/call\\-log\\-book/patient/info/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_patient_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_patient_show')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::showAction',));
                }
                not_calllog_patient_show:

                // calllog_patient_view_by_mrn
                if ('/call-log-book/patient/view-patient-record' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_patient_view_by_mrn;
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::viewPatientByMrnAction',  '_route' => 'calllog_patient_view_by_mrn',);
                }
                not_calllog_patient_view_by_mrn:

                // calllog_patient_edit
                if (preg_match('#^/call\\-log\\-book/patient/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_patient_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_patient_edit')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::editAction',));
                }
                not_calllog_patient_edit:

                // calllog_patient_edit_by_mrn
                if ('/call-log-book/patient/edit-patient-record' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_patient_edit_by_mrn;
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::editPatientByMrnAction',  '_route' => 'calllog_patient_edit_by_mrn',);
                }
                not_calllog_patient_edit_by_mrn:

                // calllog_patient_update
                if (preg_match('#^/call\\-log\\-book/patient/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_calllog_patient_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_patient_update')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::updateAction',));
                }
                not_calllog_patient_update:

                // calllog_complex_patient_list
                if (0 === strpos($pathinfo, '/call-log-book/patient-list') && preg_match('#^/call\\-log\\-book/patient\\-list/(?P<listid>[^/]++)/(?P<listname>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_complex_patient_list')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::complexPatientListAction',));
                }

                // calllog_remove_patient_from_list
                if (0 === strpos($pathinfo, '/call-log-book/patient/remove-patient-from-list') && preg_match('#^/call\\-log\\-book/patient/remove\\-patient\\-from\\-list/(?P<patientId>[^/]++)/(?P<patientListId>[^/]++)$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_remove_patient_from_list')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::removePatientFromListAction',));
                }

                if (0 === strpos($pathinfo, '/call-log-book/patient/add-patient-to-list')) {
                    // calllog_add_patient_to_list
                    if (preg_match('#^/call\\-log\\-book/patient/add\\-patient\\-to\\-list/(?P<patientListId>[^/]++)/(?P<patientId>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_add_patient_to_list')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::addPatientToListAction',));
                    }

                    // calllog_add_patient_to_list_ajax
                    if (0 === strpos($pathinfo, '/call-log-book/patient/add-patient-to-list-ajax') && preg_match('#^/call\\-log\\-book/patient/add\\-patient\\-to\\-list\\-ajax/(?P<patientListId>[^/]++)/(?P<patientId>[^/]++)$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_add_patient_to_list_ajax')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::addPatientToListAction',));
                    }

                }

                // calllog-list-previous-entries
                if ('/call-log-book/patient/list-previous-entries' === $trimmedPathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_callloglistpreviousentries;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'calllog-list-previous-entries');
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogPatientController::listPatientPreviousEntriesAction',  '_route' => 'calllog-list-previous-entries',);
                }
                not_callloglistpreviousentries:

            }

            // calllog_login
            if ('/call-log-book/login' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllog_login;
                }

                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSecurityController::loginAction',  '_route' => 'calllog_login',);
            }
            not_calllog_login:

            if (0 === strpos($pathinfo, '/call-log-book/set')) {
                // calllog_setloginvisit
                if ('/call-log-book/setloginvisit' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_setloginvisit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'calllog_setloginvisit');
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSecurityController::setAjaxLoginVisit',  '_route' => 'calllog_setloginvisit',);
                }
                not_calllog_setloginvisit:

                if (0 === strpos($pathinfo, '/call-log-book/settings')) {
                    // calllog_siteparameters
                    if ('/call-log-book/settings' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_siteparameters;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'calllog_siteparameters');
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSiteParametersController::indexAction',  '_route' => 'calllog_siteparameters',);
                    }
                    not_calllog_siteparameters:

                    // calllog_siteparameters_edit
                    if (preg_match('#^/call\\-log\\-book/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_siteparameters_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_siteparameters_edit')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSiteParametersController::editAction',));
                    }
                    not_calllog_siteparameters_edit:

                    // calllog_siteparameters_update
                    if (preg_match('#^/call\\-log\\-book/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_calllog_siteparameters_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_siteparameters_update')), array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSiteParametersController::updateAction',));
                    }
                    not_calllog_siteparameters_update:

                    // calllog_siteparameters_resources_edit
                    if ('/call-log-book/settings/edit-resources' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_siteparameters_resources_edit;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'calllog_siteparameters_resources_edit');
                        }

                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSiteParametersController::editResourcesAction',  '_route' => 'calllog_siteparameters_resources_edit',);
                    }
                    not_calllog_siteparameters_resources_edit:

                }

                elseif (0 === strpos($pathinfo, '/call-log-book/set-master-patient-record')) {
                    // calllog_set_master_patient_record
                    if ('/call-log-book/set-master-patient-record' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::unmergePatientAction',  '_route' => 'calllog_set_master_patient_record',);
                    }

                    // calllog_set_master_patient_record_ajax
                    if ('/call-log-book/set-master-patient-record-ajax' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::setMasterPatientAjaxAction',  '_route' => 'calllog_set_master_patient_record_ajax',);
                    }

                }

            }

            // calllog-nopermission
            if ('/call-log-book/no-permission' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllognopermission;
                }

                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSecurityController::actionNoPermission',  '_route' => 'calllog-nopermission',);
            }
            not_calllognopermission:

            if (0 === strpos($pathinfo, '/call-log-book/idlelogout')) {
                // calllog_idlelogout
                if ('/call-log-book/idlelogout' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSecurityController::idlelogoutAction',  '_route' => 'calllog_idlelogout',);
                }

                // calllog_idlelogout-saveorder
                if (preg_match('#^/call\\-log\\-book/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogSecurityController::idlelogoutAction',));
                }

            }

            elseif (0 === strpos($pathinfo, '/call-log-book/file-')) {
                // calllog_file_delete
                if ('/call-log-book/file-delete' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'DELETE'));
                        goto not_calllog_file_delete;
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUploadController::deleteFileAction',  '_route' => 'calllog_file_delete',);
                }
                not_calllog_file_delete:

                // calllog_file_download
                if (0 === strpos($pathinfo, '/call-log-book/file-download') && preg_match('#^/call\\-log\\-book/file\\-download/(?P<id>\\d+)(?:/(?P<eventtype>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_file_download;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_file_download')), array (  'eventtype' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUploadController::downloadFileAction',));
                }
                not_calllog_file_download:

                // calllog_file_view
                if (0 === strpos($pathinfo, '/call-log-book/file-view') && preg_match('#^/call\\-log\\-book/file\\-view/(?P<id>\\d+)(?:/(?P<viewType>[^/]++)(?:/(?P<eventtype>[^/]++))?)?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_file_view;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_file_view')), array (  'eventtype' => NULL,  'viewType' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\CallLogUploadController::viewFileAction',));
                }
                not_calllog_file_view:

            }

            // calllog_find_and_edit_patient_record
            if ('/call-log-book/find-and-edit-patient-record' === $pathinfo) {
                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::findAndEditPatientAction',  '_route' => 'calllog_find_and_edit_patient_record',);
            }

            if (0 === strpos($pathinfo, '/call-log-book/merge-patient-records')) {
                // calllog_merge_patient_records
                if ('/call-log-book/merge-patient-records' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::mergePatientAction',  '_route' => 'calllog_merge_patient_records',);
                }

                // calllog_merge_patient_records_ajax
                if ('/call-log-book/merge-patient-records-ajax' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::mergePatientAjaxAction',  '_route' => 'calllog_merge_patient_records_ajax',);
                }

                // calllog_merge_patient_records_todel
                if ('/call-log-book/merge-patient-records-todel' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::addNewPatientToListAction_TODEL',  '_route' => 'calllog_merge_patient_records_todel',);
                }

            }

            // calllog_home
            if ('/call-log-book' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'calllog_home');
                }

                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::homeAction',  '_route' => 'calllog_home',);
            }

            if (0 === strpos($pathinfo, '/call-log-book/a')) {
                // calllog_alerts
                if ('/call-log-book/alerts' === $trimmedPathinfo) {
                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'calllog_alerts');
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::homeAction',  '_route' => 'calllog_alerts',);
                }

                // calllog_about_page
                if ('/call-log-book/about' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DefaultController::aboutAction',  '_route' => 'calllog_about_page',);
                }

                // calllog_assign-calllog-users
                if ('/call-log-book/assign-calllog-users' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DefaultController::assignUsersAction',  '_route' => 'calllog_assign-calllog-users',);
                }

            }

            elseif (0 === strpos($pathinfo, '/call-log-book/entry')) {
                // calllog_callentry
                if ('/call-log-book/entry/new' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::callEntryAction',  '_route' => 'calllog_callentry',);
                }

                // calllog_save_entry
                if ('/call-log-book/entry/save' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_calllog_save_entry;
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::saveEntryAction',  '_route' => 'calllog_save_entry',);
                }
                not_calllog_save_entry:

                if (0 === strpos($pathinfo, '/call-log-book/entry/view')) {
                    // calllog_callentry_view
                    if (preg_match('#^/call\\-log\\-book/entry/view/(?P<messageOid>[^/]++)(?:/(?P<messageVersion>[^/]++))?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_callentry_view;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_callentry_view')), array (  'messageVersion' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::getCallLogEntryAction',));
                    }
                    not_calllog_callentry_view:

                    // calllog_callentry_view_latest_encounter
                    if (0 === strpos($pathinfo, '/call-log-book/entry/view-latest-encounter') && preg_match('#^/call\\-log\\-book/entry/view\\-latest\\-encounter/(?P<messageOid>[^/]++)(?:/(?P<messageVersion>[^/]++))?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_calllog_callentry_view_latest_encounter;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllog_callentry_view_latest_encounter')), array (  'messageVersion' => NULL,  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::getCallLogEntryAction',));
                    }
                    not_calllog_callentry_view_latest_encounter:

                }

            }

            // calllog_export_csv
            if ('/call-log-book/export_csv' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'calllog_export_csv');
                }

                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::exportCsvAction',  '_route' => 'calllog_export_csv',);
            }

            // calllog_search_callentry
            if ('/call-log-book/callentry/search' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_calllog_search_callentry;
                }

                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::searchCallEntryAction',  '_route' => 'calllog_search_callentry',);
            }
            not_calllog_search_callentry:

            if (0 === strpos($pathinfo, '/call-log-book/patient')) {
                // calllog_search_patient
                if ('/call-log-book/patient/search' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_search_patient;
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::patientSearchAction',  '_route' => 'calllog_search_patient',);
                }
                not_calllog_search_patient:

                // calllog_create_patient
                if ('/call-log-book/patient/create' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_create_patient;
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::createPatientAction',  '_route' => 'calllog_create_patient',);
                }
                not_calllog_create_patient:

                // calllog_get_patient_title
                if ('/call-log-book/patient/title' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_calllog_get_patient_title;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'calllog_get_patient_title');
                    }

                    return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DataQualityController::getPatientTitleAction',  '_route' => 'calllog_get_patient_title',);
                }
                not_calllog_get_patient_title:

            }

            // calllog_resources
            if ('/call-log-book/resources' === $trimmedPathinfo) {
                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'calllog_resources');
                }

                return array (  '_controller' => 'Oleg\\CallLogBundle\\Controller\\DefaultController::resourcesAction',  '_route' => 'calllog_resources',);
            }

            // calllog_login_check
            if ('/call-log-book/login_check' === $pathinfo) {
                return array('_route' => 'calllog_login_check');
            }

            // calllog_logout
            if ('/call-log-book/logout' === $pathinfo) {
                return array('_route' => 'calllog_logout');
            }

        }

        elseif (0 === strpos($pathinfo, '/scan')) {
            if (0 === strpos($pathinfo, '/scan/check')) {
                if (0 === strpos($pathinfo, '/scan/check/patient')) {
                    // get-patientdata
                    if ('/scan/check/patient/check' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getpatientdata;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::getPatientAction',  '_route' => 'get-patientdata',);
                    }
                    not_getpatientdata:

                    // create-mrn
                    if ('/scan/check/patient/generate' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_createmrn;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::createPatientAction',  '_route' => 'create-mrn',);
                    }
                    not_createmrn:

                    // delete-mrn-keytype
                    if (0 === strpos($pathinfo, '/scan/check/patient/delete') && preg_match('#^/scan/check/patient/delete/(?P<key>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($requestMethod, array('POST', 'DELETE'))) {
                            $allow = array_merge($allow, array('POST', 'DELETE'));
                            goto not_deletemrnkeytype;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-mrn-keytype')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::deleteMrnAction',));
                    }
                    not_deletemrnkeytype:

                    // get-patient-keytypeid
                    if (0 === strpos($pathinfo, '/scan/check/patient/keytype') && preg_match('#^/scan/check/patient/keytype/(?P<keytype>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getpatientkeytypeid;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'get-patient-keytypeid')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::getKeytypeIdAction',));
                    }
                    not_getpatientkeytypeid:

                }

                elseif (0 === strpos($pathinfo, '/scan/check/part')) {
                    // get-part
                    if ('/scan/check/part/check' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getpart;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::getPartAction',  '_route' => 'get-part',);
                    }
                    not_getpart:

                    // create-part
                    if ('/scan/check/part/generate' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_createpart;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::createPartAction',  '_route' => 'create-part',);
                    }
                    not_createpart:

                    // delete-part
                    if (0 === strpos($pathinfo, '/scan/check/part/delete') && preg_match('#^/scan/check/part/delete/(?P<key>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($requestMethod, array('POST', 'DELETE'))) {
                            $allow = array_merge($allow, array('POST', 'DELETE'));
                            goto not_deletepart;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-part')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::deletePartAction',));
                    }
                    not_deletepart:

                }

                elseif (0 === strpos($pathinfo, '/scan/check/accession')) {
                    // get-accession
                    if ('/scan/check/accession/check' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getaccession;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::getAccessionAction',  '_route' => 'get-accession',);
                    }
                    not_getaccession:

                    // create-accession
                    if ('/scan/check/accession/generate' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_createaccession;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::createAccessionAction',  '_route' => 'create-accession',);
                    }
                    not_createaccession:

                    // delete-accession
                    if (0 === strpos($pathinfo, '/scan/check/accession/delete') && preg_match('#^/scan/check/accession/delete/(?P<key>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($requestMethod, array('POST', 'DELETE'))) {
                            $allow = array_merge($allow, array('POST', 'DELETE'));
                            goto not_deleteaccession;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-accession')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::deleteAccessionAction',));
                    }
                    not_deleteaccession:

                    // get-accession-keytypeid
                    if (0 === strpos($pathinfo, '/scan/check/accession/keytype') && preg_match('#^/scan/check/accession/keytype/(?P<keytype>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getaccessionkeytypeid;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'get-accession-keytypeid')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::getKeytypeIdAction',));
                    }
                    not_getaccessionkeytypeid:

                }

                elseif (0 === strpos($pathinfo, '/scan/check/block')) {
                    // get-block
                    if ('/scan/check/block/check' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getblock;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::getBlockAction',  '_route' => 'get-block',);
                    }
                    not_getblock:

                    // create-block
                    if ('/scan/check/block/generate' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_createblock;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::createBlockAction',  '_route' => 'create-block',);
                    }
                    not_createblock:

                    // delete-block
                    if (0 === strpos($pathinfo, '/scan/check/block/delete') && preg_match('#^/scan/check/block/delete/(?P<key>[^/]++)$#s', $pathinfo, $matches)) {
                        if (!in_array($requestMethod, array('POST', 'DELETE'))) {
                            $allow = array_merge($allow, array('POST', 'DELETE'));
                            goto not_deleteblock;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'delete-block')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\CheckController::deleteBlockAction',));
                    }
                    not_deleteblock:

                }

            }

            elseif (0 === strpos($pathinfo, '/scan/scan')) {
                if (0 === strpos($pathinfo, '/scan/scan-order')) {
                    // scan-order-data-review-full
                    if (preg_match('#^/scan/scan\\-order/(?P<id>\\d+)/data\\-review$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scanorderdatareviewfull;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan-order-data-review-full')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\DataReviewController::getDataReviewAction',));
                    }
                    not_scanorderdatareviewfull:

                    if (0 === strpos($pathinfo, '/scan/scan-order/progress-and-comments')) {
                        if (0 === strpos($pathinfo, '/scan/scan-order/progress-and-comments/new')) {
                            // history_create
                            if ('/scan/scan-order/progress-and-comments/new' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_history_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::createAction',  '_route' => 'history_create',);
                            }
                            not_history_create:

                            // history_new
                            if ('/scan/scan-order/progress-and-comments/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_history_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::newAction',  '_route' => 'history_new',);
                            }
                            not_history_new:

                        }

                        // history_show
                        if (preg_match('#^/scan/scan\\-order/progress\\-and\\-comments/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_history_show;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'history_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::showAction',));
                        }
                        not_history_show:

                        // history_edit
                        if (preg_match('#^/scan/scan\\-order/progress\\-and\\-comments/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_history_edit;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'history_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::editAction',));
                        }
                        not_history_edit:

                        // history_update
                        if (preg_match('#^/scan/scan\\-order/progress\\-and\\-comments/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('PUT' !== $canonicalMethod) {
                                $allow[] = 'PUT';
                                goto not_history_update;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'history_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::updateAction',));
                        }
                        not_history_update:

                        // history_delete
                        if (preg_match('#^/scan/scan\\-order/progress\\-and\\-comments/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('DELETE' !== $canonicalMethod) {
                                $allow[] = 'DELETE';
                                goto not_history_delete;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'history_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::deleteAction',));
                        }
                        not_history_delete:

                    }

                    // history_message_show
                    if (preg_match('#^/scan/scan\\-order/(?P<id>\\d+)/progress\\-and\\-comments$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_history_message_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'history_message_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::showHistoryMessageAction',));
                    }
                    not_history_message_show:

                    if (0 === strpos($pathinfo, '/scan/scan-order/progress-and-comments')) {
                        // history_message_new
                        if ('/scan/scan-order/progress-and-comments/create' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_history_message_new;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::createHistoryMessageAction',  '_route' => 'history_message_new',);
                        }
                        not_history_message_new:

                        // history_not_viewed_comments
                        if ('/scan/scan-order/progress-and-comments/notviewedcomments' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_history_not_viewed_comments;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::notViewedCommentsAction',  '_route' => 'history_not_viewed_comments',);
                        }
                        not_history_not_viewed_comments:

                        // history_not_viewed_admincomments
                        if ('/scan/scan-order/progress-and-comments/notviewedadmincomments' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_history_not_viewed_admincomments;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\HistoryController::notViewedAdminCommentsAction',  '_route' => 'history_not_viewed_admincomments',);
                        }
                        not_history_not_viewed_admincomments:

                    }

                    // singleorder_create
                    if ('/scan/scan-order/one-slide/create' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_singleorder_create;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::multyCreateAction',  '_route' => 'singleorder_create',);
                    }
                    not_singleorder_create:

                    // single_new
                    if ('/scan/scan-order/one-slide/new' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_single_new;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::newMultyAction',  '_route' => 'single_new',);
                    }
                    not_single_new:

                    // multi_create
                    if ('/scan/scan-order/multi-slide/create' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_multi_create;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::multyCreateAction',  '_route' => 'multi_create',);
                    }
                    not_multi_create:

                    // multi_new
                    if ('/scan/scan-order/multi-slide/new' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_multi_new;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::newMultyAction',  '_route' => 'multi_new',);
                    }
                    not_multi_new:

                    // scan-order-submitted-get
                    if ('/scan/scan-order/submitted/successfully' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scanordersubmittedget;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::thanksScanorderGetAction',  '_route' => 'scan-order-submitted-get',);
                    }
                    not_scanordersubmittedget:

                    // multy_edit
                    if (preg_match('#^/scan/scan\\-order/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_multy_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'multy_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::showMultyAction',));
                    }
                    not_multy_edit:

                    // order_amend
                    if (preg_match('#^/scan/scan\\-order/(?P<id>\\d+)/amend$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_order_amend;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'order_amend')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::showMultyAction',));
                    }
                    not_order_amend:

                    // multy_show
                    if (preg_match('#^/scan/scan\\-order/(?P<id>\\d+)/show$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_multy_show;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'multy_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::showMultyAction',));
                    }
                    not_multy_show:

                    // scan_datastructure
                    if (0 === strpos($pathinfo, '/scan/scan-order/data-structure') && preg_match('#^/scan/scan\\-order/data\\-structure/(?P<id>\\d+)/show$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_datastructure;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_datastructure')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::showMultyAction',));
                    }
                    not_scan_datastructure:

                    // download_file
                    if (0 === strpos($pathinfo, '/scan/scan-order/download') && preg_match('#^/scan/scan\\-order/download/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_download_file;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'download_file')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MultiScanOrderController::downloadAction',));
                    }
                    not_download_file:

                }

                // scan
                if ('/scan/scan' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scan');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::indexAction',  '_route' => 'scan',);
                }
                not_scan:

                // scan_create
                if ('/scan/scan/' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_scan_create;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::createAction',  '_route' => 'scan_create',);
                }
                not_scan_create:

                // scan_new
                if ('/scan/scan/new' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_new;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::newAction',  '_route' => 'scan_new',);
                }
                not_scan_new:

                // scan_show
                if (preg_match('#^/scan/scan/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::showAction',));
                }
                not_scan_show:

                // scan_edit
                if (preg_match('#^/scan/scan/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::editAction',));
                }
                not_scan_edit:

                // scan_update
                if (preg_match('#^/scan/scan/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_scan_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::updateAction',));
                }
                not_scan_update:

                // scan_delete
                if (preg_match('#^/scan/scan/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('DELETE' !== $canonicalMethod) {
                        $allow[] = 'DELETE';
                        goto not_scan_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanController::deleteAction',));
                }
                not_scan_delete:

            }

            // scan_thankfordownloading
            if (0 === strpos($pathinfo, '/scan/thanks-for-downloading') && preg_match('#^/scan/thanks\\-for\\-downloading/(?P<id>[^/]++)/(?P<sitename>[^/]++)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_thankfordownloading;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_thankfordownloading')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\DefaultController::thankfordownloadingAction',));
            }
            not_scan_thankfordownloading:

            if (0 === strpos($pathinfo, '/scan/educational')) {
                // educational_edit
                if (preg_match('#^/scan/educational/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_educational_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educational_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\EducationalResearchController::editAction',));
                }
                not_educational_edit:

                // educational_update
                if (preg_match('#^/scan/educational/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_educational_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educational_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\EducationalResearchController::updateAction',));
                }
                not_educational_update:

            }

            elseif (0 === strpos($pathinfo, '/scan/event-log')) {
                // scan_logger
                if ('/scan/event-log' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_logger;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scan_logger');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanLoggerController::indexAction',  '_route' => 'scan_logger',);
                }
                not_scan_logger:

                // scan_logger_user_all
                if (0 === strpos($pathinfo, '/scan/event-log/user') && preg_match('#^/scan/event\\-log/user/(?P<id>[^/]++)/all$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_logger_user_all;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_logger_user_all')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanLoggerController::getAuditLogAllAction',));
                }
                not_scan_logger_user_all:

            }

            elseif (0 === strpos($pathinfo, '/scan/research')) {
                // research_edit
                if (preg_match('#^/scan/research/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_research_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'research_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\EducationalResearchController::editAction',));
                }
                not_research_edit:

                // research_update
                if (preg_match('#^/scan/research/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_research_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'research_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\EducationalResearchController::updateAction',));
                }
                not_research_update:

            }

            // scan_authorization_remove
            if (0 === strpos($pathinfo, '/scan/revoke-access-authorization') && preg_match('#^/scan/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_authorization_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_authorization_remove')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::authorizationRemoveAction',));
            }
            not_scan_authorization_remove:

            if (0 === strpos($pathinfo, '/scan/message')) {
                // message
                if ('/scan/message' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_message;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'message');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::indexAction',  '_route' => 'message',);
                }
                not_message:

                // scan_message_show
                if (preg_match('#^/scan/message/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_message_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_message_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::showAction',));
                }
                not_scan_message_show:

                // message_create
                if ('/scan/message/' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_message_create;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::createAction',  '_route' => 'message_create',);
                }
                not_message_create:

                // message_new
                if ('/scan/message/new' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_message_new;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::newAction',  '_route' => 'message_new',);
                }
                not_message_new:

                // message_edit
                if (preg_match('#^/scan/message/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_message_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::editAction',));
                }
                not_message_edit:

                // message_update
                if (preg_match('#^/scan/message/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_message_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::updateAction',));
                }
                not_message_update:

                // message_delete
                if (preg_match('#^/scan/message/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('DELETE' !== $canonicalMethod) {
                        $allow[] = 'DELETE';
                        goto not_message_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'message_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\MessageController::deleteAction',));
                }
                not_message_delete:

            }

            elseif (0 === strpos($pathinfo, '/scan/patient')) {
                // scan-patient-list
                if ('/scan/patient' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scanpatientlist;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scan-patient-list');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::indexAction',  '_route' => 'scan-patient-list',);
                }
                not_scanpatientlist:

                // scan-patient-new
                if ('/scan/patient/data-structure' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scanpatientnew;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::newPatientAction',  '_route' => 'scan-patient-new',);
                }
                not_scanpatientnew:

                // scan-patient-show
                if (preg_match('#^/scan/patient/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scanpatientshow;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan-patient-show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::showAction',));
                }
                not_scanpatientshow:

                // scan-patient-info-show
                if (0 === strpos($pathinfo, '/scan/patient/info') && preg_match('#^/scan/patient/info/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scanpatientinfoshow;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan-patient-info-show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::showAction',));
                }
                not_scanpatientinfoshow:

                // scan-patient-edit
                if (preg_match('#^/scan/patient/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scanpatientedit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan-patient-edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::editAction',));
                }
                not_scanpatientedit:

                // scan_patient_update
                if (preg_match('#^/scan/patient/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_scan_patient_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_patient_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::updateAction',));
                }
                not_scan_patient_update:

                // scan_testpatient_new
                if ('/scan/patient/data-structure/new-test-patient' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_testpatient_new;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\PatientController::newTestPatientAction',  '_route' => 'scan_testpatient_new',);
                }
                not_scan_testpatient_new:

            }

            elseif (0 === strpos($pathinfo, '/scan/a')) {
                if (0 === strpos($pathinfo, '/scan/access-requests')) {
                    if (0 === strpos($pathinfo, '/scan/access-requests/new')) {
                        // scan_access_request_new_plain
                        if ('/scan/access-requests/new/create' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_access_request_new_plain;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestCreatePlainAction',  '_route' => 'scan_access_request_new_plain',);
                        }
                        not_scan_access_request_new_plain:

                        // scan_access_request_new
                        if ('/scan/access-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_access_request_new;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestCreateAction',  '_route' => 'scan_access_request_new',);
                        }
                        not_scan_access_request_new:

                        // scan_access_request_create
                        if ('/scan/access-requests/new/pending' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_scan_access_request_create;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestAction',  '_route' => 'scan_access_request_create',);
                        }
                        not_scan_access_request_create:

                    }

                    // scan_accessrequest_list
                    if ('/scan/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestIndexAction',  '_route' => 'scan_accessrequest_list',);
                    }
                    not_scan_accessrequest_list:

                    // scan_accessrequest_change
                    if (0 === strpos($pathinfo, '/scan/access-requests/change-status') && preg_match('#^/scan/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_accessrequest_change')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestChangeAction',));
                    }
                    not_scan_accessrequest_change:

                    // scan_accessrequest_management
                    if (preg_match('#^/scan/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_accessrequest_management')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestManagementAction',));
                    }
                    not_scan_accessrequest_management:

                    // scan_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/scan/access-requests/submit') && preg_match('#^/scan/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_scan_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_scan_accessrequest_management_submit:

                }

                // scan_authorized_users
                if ('/scan/authorized-users' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_authorized_users;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scan_authorized_users');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::authorizedUsersAction',  '_route' => 'scan_authorized_users',);
                }
                not_scan_authorized_users:

                if (0 === strpos($pathinfo, '/scan/authorization-user-manager')) {
                    // scan_authorization_user_management
                    if (preg_match('#^/scan/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_authorization_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_authorization_user_management')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::authorizationManagementAction',));
                    }
                    not_scan_authorization_user_management:

                    // scan_authorization_user_management_submit
                    if (0 === strpos($pathinfo, '/scan/authorization-user-manager/submit') && preg_match('#^/scan/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_scan_authorization_user_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::authorizationManagementSubmitAction',));
                    }
                    not_scan_authorization_user_management_submit:

                }

                // scan_add_authorized_user
                if ('/scan/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scan_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::addAuthorizedUserAction',  '_route' => 'scan_add_authorized_user',);
                }
                not_scan_add_authorized_user:

                if (0 === strpos($pathinfo, '/scan/admin')) {
                    if (0 === strpos($pathinfo, '/scan/admin/list')) {
                        // admin_index
                        if ('/scan/admin/lists' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_admin_index;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'admin_index');
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::indexAction',  '_route' => 'admin_index',);
                        }
                        not_admin_index:

                        if (0 === strpos($pathinfo, '/scan/admin/list/re')) {
                            if (0 === strpos($pathinfo, '/scan/admin/list/research-project-titles')) {
                                // scan_tree_researchprojecttitles_list
                                if ('/scan/admin/list/research-project-titles-tree' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_scan_tree_researchprojecttitles_list;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'scan_tree_researchprojecttitles_list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::institutionTreeAction',  '_route' => 'scan_tree_researchprojecttitles_list',);
                                }
                                not_scan_tree_researchprojecttitles_list:

                                // researchprojecttitles-list
                                if ('/scan/admin/list/research-project-titles' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojecttitleslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'researchprojecttitles-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'researchprojecttitles-list',);
                                }
                                not_researchprojecttitleslist:

                                // researchprojecttitles_create
                                if ('/scan/admin/list/research-project-titles/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_researchprojecttitles_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'researchprojecttitles_create',);
                                }
                                not_researchprojecttitles_create:

                                // researchprojecttitles_new
                                if ('/scan/admin/list/research-project-titles/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojecttitles_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'researchprojecttitles_new',);
                                }
                                not_researchprojecttitles_new:

                                // researchprojecttitles_show
                                if (preg_match('#^/scan/admin/list/research\\-project\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojecttitles_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojecttitles_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_researchprojecttitles_show:

                                // researchprojecttitles_edit
                                if (preg_match('#^/scan/admin/list/research\\-project\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojecttitles_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojecttitles_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_researchprojecttitles_edit:

                                // researchprojecttitles_update
                                if (preg_match('#^/scan/admin/list/research\\-project\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_researchprojecttitles_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojecttitles_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_researchprojecttitles_update:

                                // researchprojecttitles_delete
                                if (preg_match('#^/scan/admin/list/research\\-project\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_researchprojecttitles_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojecttitles_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_researchprojecttitles_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/research-project-group-types')) {
                                // researchprojectgrouptype-list
                                if ('/scan/admin/list/research-project-group-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojectgrouptypelist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'researchprojectgrouptype-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'researchprojectgrouptype-list',);
                                }
                                not_researchprojectgrouptypelist:

                                // researchprojectgrouptype_create
                                if ('/scan/admin/list/research-project-group-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_researchprojectgrouptype_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'researchprojectgrouptype_create',);
                                }
                                not_researchprojectgrouptype_create:

                                // researchprojectgrouptype_new
                                if ('/scan/admin/list/research-project-group-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojectgrouptype_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'researchprojectgrouptype_new',);
                                }
                                not_researchprojectgrouptype_new:

                                // researchprojectgrouptype_show
                                if (preg_match('#^/scan/admin/list/research\\-project\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojectgrouptype_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojectgrouptype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_researchprojectgrouptype_show:

                                // researchprojectgrouptype_edit
                                if (preg_match('#^/scan/admin/list/research\\-project\\-group\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_researchprojectgrouptype_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojectgrouptype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_researchprojectgrouptype_edit:

                                // researchprojectgrouptype_update
                                if (preg_match('#^/scan/admin/list/research\\-project\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_researchprojectgrouptype_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojectgrouptype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_researchprojectgrouptype_update:

                                // researchprojectgrouptype_delete
                                if (preg_match('#^/scan/admin/list/research\\-project\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_researchprojectgrouptype_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'researchprojectgrouptype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_researchprojectgrouptype_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/region-to-scan-options')) {
                                // regiontoscan-list
                                if ('/scan/admin/list/region-to-scan-options' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_regiontoscanlist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'regiontoscan-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'regiontoscan-list',);
                                }
                                not_regiontoscanlist:

                                // regiontoscan_create
                                if ('/scan/admin/list/region-to-scan-options/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_regiontoscan_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'regiontoscan_create',);
                                }
                                not_regiontoscan_create:

                                // regiontoscan_new
                                if ('/scan/admin/list/region-to-scan-options/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_regiontoscan_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'regiontoscan_new',);
                                }
                                not_regiontoscan_new:

                                // regiontoscan_show
                                if (preg_match('#^/scan/admin/list/region\\-to\\-scan\\-options/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_regiontoscan_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'regiontoscan_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_regiontoscan_show:

                                // regiontoscan_edit
                                if (preg_match('#^/scan/admin/list/region\\-to\\-scan\\-options/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_regiontoscan_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'regiontoscan_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_regiontoscan_edit:

                                // regiontoscan_update
                                if (preg_match('#^/scan/admin/list/region\\-to\\-scan\\-options/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_regiontoscan_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'regiontoscan_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_regiontoscan_update:

                                // regiontoscan_delete
                                if (preg_match('#^/scan/admin/list/region\\-to\\-scan\\-options/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_regiontoscan_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'regiontoscan_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_regiontoscan_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/report-types')) {
                                // reporttype-list
                                if ('/scan/admin/list/report-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_reporttypelist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'reporttype-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'reporttype-list',);
                                }
                                not_reporttypelist:

                                // reporttype_create
                                if ('/scan/admin/list/report-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_reporttype_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'reporttype_create',);
                                }
                                not_reporttype_create:

                                // reporttype_new
                                if ('/scan/admin/list/report-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_reporttype_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'reporttype_new',);
                                }
                                not_reporttype_new:

                                // reporttype_show
                                if (preg_match('#^/scan/admin/list/report\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_reporttype_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'reporttype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_reporttype_show:

                                // reporttype_edit
                                if (preg_match('#^/scan/admin/list/report\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_reporttype_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'reporttype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_reporttype_edit:

                                // reporttype_update
                                if (preg_match('#^/scan/admin/list/report\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_reporttype_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'reporttype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_reporttype_update:

                                // reporttype_delete
                                if (preg_match('#^/scan/admin/list/report\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_reporttype_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'reporttype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_reporttype_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/races')) {
                            // races-list
                            if ('/scan/admin/list/races' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_raceslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'races-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'races-list',);
                            }
                            not_raceslist:

                            // races_create
                            if ('/scan/admin/list/races/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_races_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'races_create',);
                            }
                            not_races_create:

                            // races_new
                            if ('/scan/admin/list/races/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_races_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'races_new',);
                            }
                            not_races_new:

                            // races_show
                            if (preg_match('#^/scan/admin/list/races/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_races_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'races_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_races_show:

                            // races_edit
                            if (preg_match('#^/scan/admin/list/races/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_races_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'races_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_races_edit:

                            // races_update
                            if (preg_match('#^/scan/admin/list/races/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_races_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'races_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_races_update:

                            // races_delete
                            if (preg_match('#^/scan/admin/list/races/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_races_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'races_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_races_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/e')) {
                            if (0 === strpos($pathinfo, '/scan/admin/list/educational-course-titles')) {
                                // scan_tree_educationalcoursetitles_list
                                if ('/scan/admin/list/educational-course-titles-tree' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_scan_tree_educationalcoursetitles_list;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'scan_tree_educationalcoursetitles_list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::institutionTreeAction',  '_route' => 'scan_tree_educationalcoursetitles_list',);
                                }
                                not_scan_tree_educationalcoursetitles_list:

                                // educationalcoursetitles-list
                                if ('/scan/admin/list/educational-course-titles' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursetitleslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'educationalcoursetitles-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'educationalcoursetitles-list',);
                                }
                                not_educationalcoursetitleslist:

                                // educationalcoursetitles_create
                                if ('/scan/admin/list/educational-course-titles/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_educationalcoursetitles_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'educationalcoursetitles_create',);
                                }
                                not_educationalcoursetitles_create:

                                // educationalcoursetitles_new
                                if ('/scan/admin/list/educational-course-titles/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursetitles_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'educationalcoursetitles_new',);
                                }
                                not_educationalcoursetitles_new:

                                // educationalcoursetitles_show
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursetitles_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursetitles_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_educationalcoursetitles_show:

                                // educationalcoursetitles_edit
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursetitles_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursetitles_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_educationalcoursetitles_edit:

                                // educationalcoursetitles_update
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_educationalcoursetitles_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursetitles_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_educationalcoursetitles_update:

                                // educationalcoursetitles_delete
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_educationalcoursetitles_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursetitles_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_educationalcoursetitles_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/educational-course-group-types')) {
                                // educationalcoursegrouptypes-list
                                if ('/scan/admin/list/educational-course-group-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursegrouptypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'educationalcoursegrouptypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'educationalcoursegrouptypes-list',);
                                }
                                not_educationalcoursegrouptypeslist:

                                // educationalcoursegrouptypes_create
                                if ('/scan/admin/list/educational-course-group-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_educationalcoursegrouptypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'educationalcoursegrouptypes_create',);
                                }
                                not_educationalcoursegrouptypes_create:

                                // educationalcoursegrouptypes_new
                                if ('/scan/admin/list/educational-course-group-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursegrouptypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'educationalcoursegrouptypes_new',);
                                }
                                not_educationalcoursegrouptypes_new:

                                // educationalcoursegrouptypes_show
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursegrouptypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursegrouptypes_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_educationalcoursegrouptypes_show:

                                // educationalcoursegrouptypes_edit
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-group\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_educationalcoursegrouptypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursegrouptypes_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_educationalcoursegrouptypes_edit:

                                // educationalcoursegrouptypes_update
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_educationalcoursegrouptypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursegrouptypes_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_educationalcoursegrouptypes_update:

                                // educationalcoursegrouptypes_delete
                                if (preg_match('#^/scan/admin/list/educational\\-course\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_educationalcoursegrouptypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'educationalcoursegrouptypes_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_educationalcoursegrouptypes_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/encounter-')) {
                                if (0 === strpos($pathinfo, '/scan/admin/list/encounter-number-types')) {
                                    // encountertype-list
                                    if ('/scan/admin/list/encounter-number-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encountertypelist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'encountertype-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'encountertype-list',);
                                    }
                                    not_encountertypelist:

                                    // encountertype_create
                                    if ('/scan/admin/list/encounter-number-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_encountertype_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'encountertype_create',);
                                    }
                                    not_encountertype_create:

                                    // encountertype_new
                                    if ('/scan/admin/list/encounter-number-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encountertype_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'encountertype_new',);
                                    }
                                    not_encountertype_new:

                                    // encountertype_show
                                    if (preg_match('#^/scan/admin/list/encounter\\-number\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encountertype_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encountertype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_encountertype_show:

                                    // encountertype_edit
                                    if (preg_match('#^/scan/admin/list/encounter\\-number\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encountertype_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encountertype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_encountertype_edit:

                                    // encountertype_update
                                    if (preg_match('#^/scan/admin/list/encounter\\-number\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_encountertype_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encountertype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_encountertype_update:

                                    // encountertype_delete
                                    if (preg_match('#^/scan/admin/list/encounter\\-number\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_encountertype_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encountertype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_encountertype_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/encounter-types')) {
                                    // encounter-list
                                    if ('/scan/admin/list/encounter-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterlist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'encounter-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'encounter-list',);
                                    }
                                    not_encounterlist:

                                    // encounter_create
                                    if ('/scan/admin/list/encounter-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_encounter_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'encounter_create',);
                                    }
                                    not_encounter_create:

                                    // encounter_new
                                    if ('/scan/admin/list/encounter-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounter_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'encounter_new',);
                                    }
                                    not_encounter_new:

                                    // encounter_show
                                    if (preg_match('#^/scan/admin/list/encounter\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounter_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounter_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_encounter_show:

                                    // encounter_edit
                                    if (preg_match('#^/scan/admin/list/encounter\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounter_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounter_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_encounter_edit:

                                    // encounter_update
                                    if (preg_match('#^/scan/admin/list/encounter\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_encounter_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounter_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_encounter_update:

                                    // encounter_delete
                                    if (preg_match('#^/scan/admin/list/encounter\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_encounter_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounter_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_encounter_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/encounter-statuses')) {
                                    // encounterstatuses-list
                                    if ('/scan/admin/list/encounter-statuses' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterstatuseslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'encounterstatuses-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'encounterstatuses-list',);
                                    }
                                    not_encounterstatuseslist:

                                    // encounterstatuses_create
                                    if ('/scan/admin/list/encounter-statuses/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_encounterstatuses_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'encounterstatuses_create',);
                                    }
                                    not_encounterstatuses_create:

                                    // encounterstatuses_new
                                    if ('/scan/admin/list/encounter-statuses/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterstatuses_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'encounterstatuses_new',);
                                    }
                                    not_encounterstatuses_new:

                                    // encounterstatuses_show
                                    if (preg_match('#^/scan/admin/list/encounter\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterstatuses_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterstatuses_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_encounterstatuses_show:

                                    // encounterstatuses_edit
                                    if (preg_match('#^/scan/admin/list/encounter\\-statuses/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterstatuses_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterstatuses_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_encounterstatuses_edit:

                                    // encounterstatuses_update
                                    if (preg_match('#^/scan/admin/list/encounter\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_encounterstatuses_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterstatuses_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_encounterstatuses_update:

                                    // encounterstatuses_delete
                                    if (preg_match('#^/scan/admin/list/encounter\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_encounterstatuses_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterstatuses_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_encounterstatuses_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/encounter-info-types')) {
                                    // encounterinfotypes-list
                                    if ('/scan/admin/list/encounter-info-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterinfotypeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'encounterinfotypes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'encounterinfotypes-list',);
                                    }
                                    not_encounterinfotypeslist:

                                    // encounterinfotypes_create
                                    if ('/scan/admin/list/encounter-info-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_encounterinfotypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'encounterinfotypes_create',);
                                    }
                                    not_encounterinfotypes_create:

                                    // encounterinfotypes_new
                                    if ('/scan/admin/list/encounter-info-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterinfotypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'encounterinfotypes_new',);
                                    }
                                    not_encounterinfotypes_new:

                                    // encounterinfotypes_show
                                    if (preg_match('#^/scan/admin/list/encounter\\-info\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterinfotypes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterinfotypes_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_encounterinfotypes_show:

                                    // encounterinfotypes_edit
                                    if (preg_match('#^/scan/admin/list/encounter\\-info\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_encounterinfotypes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterinfotypes_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_encounterinfotypes_edit:

                                    // encounterinfotypes_update
                                    if (preg_match('#^/scan/admin/list/encounter\\-info\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_encounterinfotypes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterinfotypes_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_encounterinfotypes_update:

                                    // encounterinfotypes_delete
                                    if (preg_match('#^/scan/admin/list/encounter\\-info\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_encounterinfotypes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'encounterinfotypes_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_encounterinfotypes_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/event-log-event-types')) {
                                // scanloggereventtypes-list
                                if ('/scan/admin/list/event-log-event-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_scanloggereventtypeslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'scanloggereventtypes-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'scanloggereventtypes-list',);
                                }
                                not_scanloggereventtypeslist:

                                // scanloggereventtypes_create
                                if ('/scan/admin/list/event-log-event-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_scanloggereventtypes_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'scanloggereventtypes_create',);
                                }
                                not_scanloggereventtypes_create:

                                // scanloggereventtypes_new
                                if ('/scan/admin/list/event-log-event-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_scanloggereventtypes_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'scanloggereventtypes_new',);
                                }
                                not_scanloggereventtypes_new:

                                // scanloggereventtypes_show
                                if (preg_match('#^/scan/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_scanloggereventtypes_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scanloggereventtypes_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_scanloggereventtypes_show:

                                // scanloggereventtypes_edit
                                if (preg_match('#^/scan/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_scanloggereventtypes_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scanloggereventtypes_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_scanloggereventtypes_edit:

                                // scanloggereventtypes_update
                                if (preg_match('#^/scan/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_scanloggereventtypes_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scanloggereventtypes_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_scanloggereventtypes_update:

                                // scanloggereventtypes_delete
                                if (preg_match('#^/scan/admin/list/event\\-log\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_scanloggereventtypes_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scanloggereventtypes_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_scanloggereventtypes_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/m')) {
                            if (0 === strpos($pathinfo, '/scan/admin/list/message-')) {
                                if (0 === strpos($pathinfo, '/scan/admin/list/message-categories')) {
                                    // scan_tree_messagecategories_list
                                    if ('/scan/admin/list/message-categories-tree' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_scan_tree_messagecategories_list;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'scan_tree_messagecategories_list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::institutionTreeAction',  '_route' => 'scan_tree_messagecategories_list',);
                                    }
                                    not_scan_tree_messagecategories_list:

                                    // messagecategorys-list
                                    if ('/scan/admin/list/message-categories' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagecategoryslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'messagecategorys-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'messagecategorys-list',);
                                    }
                                    not_messagecategoryslist:

                                    // messagecategorys_create
                                    if ('/scan/admin/list/message-categories/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_messagecategorys_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'messagecategorys_create',);
                                    }
                                    not_messagecategorys_create:

                                    // messagecategorys_new
                                    if ('/scan/admin/list/message-categories/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagecategorys_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'messagecategorys_new',);
                                    }
                                    not_messagecategorys_new:

                                    // messagecategorys_show
                                    if (preg_match('#^/scan/admin/list/message\\-categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagecategorys_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagecategorys_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_messagecategorys_show:

                                    // messagecategorys_edit
                                    if (preg_match('#^/scan/admin/list/message\\-categories/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagecategorys_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagecategorys_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_messagecategorys_edit:

                                    // messagecategorys_update
                                    if (preg_match('#^/scan/admin/list/message\\-categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_messagecategorys_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagecategorys_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_messagecategorys_update:

                                    // messagecategorys_delete
                                    if (preg_match('#^/scan/admin/list/message\\-categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_messagecategorys_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagecategorys_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_messagecategorys_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/message-type-classifiers')) {
                                    // messagetypeclassifiers-list
                                    if ('/scan/admin/list/message-type-classifiers' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagetypeclassifierslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'messagetypeclassifiers-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'messagetypeclassifiers-list',);
                                    }
                                    not_messagetypeclassifierslist:

                                    // messagetypeclassifiers_create
                                    if ('/scan/admin/list/message-type-classifiers/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_messagetypeclassifiers_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'messagetypeclassifiers_create',);
                                    }
                                    not_messagetypeclassifiers_create:

                                    // messagetypeclassifiers_new
                                    if ('/scan/admin/list/message-type-classifiers/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagetypeclassifiers_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'messagetypeclassifiers_new',);
                                    }
                                    not_messagetypeclassifiers_new:

                                    // messagetypeclassifiers_show
                                    if (preg_match('#^/scan/admin/list/message\\-type\\-classifiers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagetypeclassifiers_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagetypeclassifiers_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_messagetypeclassifiers_show:

                                    // messagetypeclassifiers_edit
                                    if (preg_match('#^/scan/admin/list/message\\-type\\-classifiers/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagetypeclassifiers_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagetypeclassifiers_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_messagetypeclassifiers_edit:

                                    // messagetypeclassifiers_update
                                    if (preg_match('#^/scan/admin/list/message\\-type\\-classifiers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_messagetypeclassifiers_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagetypeclassifiers_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_messagetypeclassifiers_update:

                                    // messagetypeclassifiers_delete
                                    if (preg_match('#^/scan/admin/list/message\\-type\\-classifiers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_messagetypeclassifiers_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagetypeclassifiers_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_messagetypeclassifiers_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/message-statuses')) {
                                    // messagestatuses-list
                                    if ('/scan/admin/list/message-statuses' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagestatuseslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'messagestatuses-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'messagestatuses-list',);
                                    }
                                    not_messagestatuseslist:

                                    // messagestatuses_create
                                    if ('/scan/admin/list/message-statuses/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_messagestatuses_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'messagestatuses_create',);
                                    }
                                    not_messagestatuses_create:

                                    // messagestatuses_new
                                    if ('/scan/admin/list/message-statuses/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagestatuses_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'messagestatuses_new',);
                                    }
                                    not_messagestatuses_new:

                                    // messagestatuses_show
                                    if (preg_match('#^/scan/admin/list/message\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagestatuses_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagestatuses_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_messagestatuses_show:

                                    // messagestatuses_edit
                                    if (preg_match('#^/scan/admin/list/message\\-statuses/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_messagestatuses_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagestatuses_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_messagestatuses_edit:

                                    // messagestatuses_update
                                    if (preg_match('#^/scan/admin/list/message\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_messagestatuses_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagestatuses_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_messagestatuses_update:

                                    // messagestatuses_delete
                                    if (preg_match('#^/scan/admin/list/message\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_messagestatuses_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'messagestatuses_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_messagestatuses_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/mrn-types')) {
                                // mrntype-list
                                if ('/scan/admin/list/mrn-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mrntypelist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'mrntype-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'mrntype-list',);
                                }
                                not_mrntypelist:

                                // mrntype_create
                                if ('/scan/admin/list/mrn-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_mrntype_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'mrntype_create',);
                                }
                                not_mrntype_create:

                                // mrntype_new
                                if ('/scan/admin/list/mrn-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mrntype_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'mrntype_new',);
                                }
                                not_mrntype_new:

                                // mrntype_show
                                if (preg_match('#^/scan/admin/list/mrn\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mrntype_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mrntype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_mrntype_show:

                                // mrntype_edit
                                if (preg_match('#^/scan/admin/list/mrn\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_mrntype_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mrntype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_mrntype_edit:

                                // mrntype_update
                                if (preg_match('#^/scan/admin/list/mrn\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_mrntype_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mrntype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_mrntype_update:

                                // mrntype_delete
                                if (preg_match('#^/scan/admin/list/mrn\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_mrntype_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'mrntype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_mrntype_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/magnifications')) {
                                // magnifications-list
                                if ('/scan/admin/list/magnifications' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_magnificationslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'magnifications-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'magnifications-list',);
                                }
                                not_magnificationslist:

                                // magnifications_create
                                if ('/scan/admin/list/magnifications/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_magnifications_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'magnifications_create',);
                                }
                                not_magnifications_create:

                                // magnifications_new
                                if ('/scan/admin/list/magnifications/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_magnifications_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'magnifications_new',);
                                }
                                not_magnifications_new:

                                // magnifications_show
                                if (preg_match('#^/scan/admin/list/magnifications/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_magnifications_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'magnifications_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_magnifications_show:

                                // magnifications_edit
                                if (preg_match('#^/scan/admin/list/magnifications/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_magnifications_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'magnifications_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_magnifications_edit:

                                // magnifications_update
                                if (preg_match('#^/scan/admin/list/magnifications/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_magnifications_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'magnifications_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_magnifications_update:

                                // magnifications_delete
                                if (preg_match('#^/scan/admin/list/magnifications/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_magnifications_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'magnifications_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_magnifications_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/p')) {
                            if (0 === strpos($pathinfo, '/scan/admin/list/pat')) {
                                if (0 === strpos($pathinfo, '/scan/admin/list/patient-')) {
                                    if (0 === strpos($pathinfo, '/scan/admin/list/patient-list')) {
                                        // scan_tree_patientlisthierarchy_list
                                        if ('/scan/admin/list/patient-lists-tree' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_scan_tree_patientlisthierarchy_list;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'scan_tree_patientlisthierarchy_list');
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::institutionTreeAction',  '_route' => 'scan_tree_patientlisthierarchy_list',);
                                        }
                                        not_scan_tree_patientlisthierarchy_list:

                                        if (0 === strpos($pathinfo, '/scan/admin/list/patient-list-hierarchys')) {
                                            // patientlisthierarchys-list
                                            if ('/scan/admin/list/patient-list-hierarchys' === $trimmedPathinfo) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchyslist;
                                                }

                                                if (substr($pathinfo, -1) !== '/') {
                                                    return $this->redirect($pathinfo.'/', 'patientlisthierarchys-list');
                                                }

                                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'patientlisthierarchys-list',);
                                            }
                                            not_patientlisthierarchyslist:

                                            // patientlisthierarchys_create
                                            if ('/scan/admin/list/patient-list-hierarchys/' === $pathinfo) {
                                                if ('POST' !== $canonicalMethod) {
                                                    $allow[] = 'POST';
                                                    goto not_patientlisthierarchys_create;
                                                }

                                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'patientlisthierarchys_create',);
                                            }
                                            not_patientlisthierarchys_create:

                                            // patientlisthierarchy_new
                                            if ('/scan/admin/list/patient-list-hierarchys/new' === $pathinfo) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchy_new;
                                                }

                                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'patientlisthierarchy_new',);
                                            }
                                            not_patientlisthierarchy_new:

                                            // patientlisthierarchys_show
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchys/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchys_show;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchys_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                            }
                                            not_patientlisthierarchys_show:

                                            // patientlisthierarchys_edit
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchys/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchys_edit;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchys_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                            }
                                            not_patientlisthierarchys_edit:

                                            // patientlisthierarchys_update
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchys/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                                if ('PUT' !== $canonicalMethod) {
                                                    $allow[] = 'PUT';
                                                    goto not_patientlisthierarchys_update;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchys_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                            }
                                            not_patientlisthierarchys_update:

                                            // patientlisthierarchys_delete
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchys/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                                if ('DELETE' !== $canonicalMethod) {
                                                    $allow[] = 'DELETE';
                                                    goto not_patientlisthierarchys_delete;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchys_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                            }
                                            not_patientlisthierarchys_delete:

                                        }

                                        elseif (0 === strpos($pathinfo, '/scan/admin/list/patient-list-hierarchy-group-types')) {
                                            // patientlisthierarchygrouptype-list
                                            if ('/scan/admin/list/patient-list-hierarchy-group-types' === $trimmedPathinfo) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchygrouptypelist;
                                                }

                                                if (substr($pathinfo, -1) !== '/') {
                                                    return $this->redirect($pathinfo.'/', 'patientlisthierarchygrouptype-list');
                                                }

                                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'patientlisthierarchygrouptype-list',);
                                            }
                                            not_patientlisthierarchygrouptypelist:

                                            // patientlisthierarchygrouptype_create
                                            if ('/scan/admin/list/patient-list-hierarchy-group-types/' === $pathinfo) {
                                                if ('POST' !== $canonicalMethod) {
                                                    $allow[] = 'POST';
                                                    goto not_patientlisthierarchygrouptype_create;
                                                }

                                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'patientlisthierarchygrouptype_create',);
                                            }
                                            not_patientlisthierarchygrouptype_create:

                                            // patientlisthierarchygrouptype_new
                                            if ('/scan/admin/list/patient-list-hierarchy-group-types/new' === $pathinfo) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchygrouptype_new;
                                                }

                                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'patientlisthierarchygrouptype_new',);
                                            }
                                            not_patientlisthierarchygrouptype_new:

                                            // patientlisthierarchygrouptype_show
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchy\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchygrouptype_show;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchygrouptype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                            }
                                            not_patientlisthierarchygrouptype_show:

                                            // patientlisthierarchygrouptype_edit
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchy\\-group\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                                if ('GET' !== $canonicalMethod) {
                                                    $allow[] = 'GET';
                                                    goto not_patientlisthierarchygrouptype_edit;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchygrouptype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                            }
                                            not_patientlisthierarchygrouptype_edit:

                                            // patientlisthierarchygrouptype_update
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchy\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                                if ('PUT' !== $canonicalMethod) {
                                                    $allow[] = 'PUT';
                                                    goto not_patientlisthierarchygrouptype_update;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchygrouptype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                            }
                                            not_patientlisthierarchygrouptype_update:

                                            // patientlisthierarchygrouptype_delete
                                            if (preg_match('#^/scan/admin/list/patient\\-list\\-hierarchy\\-group\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                                if ('DELETE' !== $canonicalMethod) {
                                                    $allow[] = 'DELETE';
                                                    goto not_patientlisthierarchygrouptype_delete;
                                                }

                                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientlisthierarchygrouptype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                            }
                                            not_patientlisthierarchygrouptype_delete:

                                        }

                                    }

                                    elseif (0 === strpos($pathinfo, '/scan/admin/list/patient-types')) {
                                        // patienttype-list
                                        if ('/scan/admin/list/patient-types' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patienttypelist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'patienttype-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'patienttype-list',);
                                        }
                                        not_patienttypelist:

                                        // patienttype_create
                                        if ('/scan/admin/list/patient-types/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_patienttype_create;
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'patienttype_create',);
                                        }
                                        not_patienttype_create:

                                        // patienttype_new
                                        if ('/scan/admin/list/patient-types/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patienttype_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'patienttype_new',);
                                        }
                                        not_patienttype_new:

                                        // patienttype_show
                                        if (preg_match('#^/scan/admin/list/patient\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patienttype_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patienttype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                        }
                                        not_patienttype_show:

                                        // patienttype_edit
                                        if (preg_match('#^/scan/admin/list/patient\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patienttype_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patienttype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                        }
                                        not_patienttype_edit:

                                        // patienttype_update
                                        if (preg_match('#^/scan/admin/list/patient\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_patienttype_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patienttype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                        }
                                        not_patienttype_update:

                                        // patienttype_delete
                                        if (preg_match('#^/scan/admin/list/patient\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_patienttype_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patienttype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                        }
                                        not_patienttype_delete:

                                    }

                                    elseif (0 === strpos($pathinfo, '/scan/admin/list/patient-record-statuses')) {
                                        // patientrecordstatuses-list
                                        if ('/scan/admin/list/patient-record-statuses' === $trimmedPathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patientrecordstatuseslist;
                                            }

                                            if (substr($pathinfo, -1) !== '/') {
                                                return $this->redirect($pathinfo.'/', 'patientrecordstatuses-list');
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'patientrecordstatuses-list',);
                                        }
                                        not_patientrecordstatuseslist:

                                        // patientrecordstatuses_create
                                        if ('/scan/admin/list/patient-record-statuses/' === $pathinfo) {
                                            if ('POST' !== $canonicalMethod) {
                                                $allow[] = 'POST';
                                                goto not_patientrecordstatuses_create;
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'patientrecordstatuses_create',);
                                        }
                                        not_patientrecordstatuses_create:

                                        // patientrecordstatuses_new
                                        if ('/scan/admin/list/patient-record-statuses/new' === $pathinfo) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patientrecordstatuses_new;
                                            }

                                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'patientrecordstatuses_new',);
                                        }
                                        not_patientrecordstatuses_new:

                                        // patientrecordstatuses_show
                                        if (preg_match('#^/scan/admin/list/patient\\-record\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patientrecordstatuses_show;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientrecordstatuses_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                        }
                                        not_patientrecordstatuses_show:

                                        // patientrecordstatuses_edit
                                        if (preg_match('#^/scan/admin/list/patient\\-record\\-statuses/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                            if ('GET' !== $canonicalMethod) {
                                                $allow[] = 'GET';
                                                goto not_patientrecordstatuses_edit;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientrecordstatuses_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                        }
                                        not_patientrecordstatuses_edit:

                                        // patientrecordstatuses_update
                                        if (preg_match('#^/scan/admin/list/patient\\-record\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('PUT' !== $canonicalMethod) {
                                                $allow[] = 'PUT';
                                                goto not_patientrecordstatuses_update;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientrecordstatuses_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                        }
                                        not_patientrecordstatuses_update:

                                        // patientrecordstatuses_delete
                                        if (preg_match('#^/scan/admin/list/patient\\-record\\-statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                            if ('DELETE' !== $canonicalMethod) {
                                                $allow[] = 'DELETE';
                                                goto not_patientrecordstatuses_delete;
                                            }

                                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'patientrecordstatuses_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                        }
                                        not_patientrecordstatuses_delete:

                                    }

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/pathology-services')) {
                                    // pathservice-list
                                    if ('/scan/admin/list/pathology-services' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathservicelist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'pathservice-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'pathservice-list',);
                                    }
                                    not_pathservicelist:

                                    // pathservice_create
                                    if ('/scan/admin/list/pathology-services/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_pathservice_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'pathservice_create',);
                                    }
                                    not_pathservice_create:

                                    // pathservice_new
                                    if ('/scan/admin/list/pathology-services/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathservice_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'pathservice_new',);
                                    }
                                    not_pathservice_new:

                                    // pathservice_show
                                    if (preg_match('#^/scan/admin/list/pathology\\-services/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathservice_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathservice_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_pathservice_show:

                                    // pathservice_edit
                                    if (preg_match('#^/scan/admin/list/pathology\\-services/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathservice_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathservice_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_pathservice_edit:

                                    // pathservice_update
                                    if (preg_match('#^/scan/admin/list/pathology\\-services/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_pathservice_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathservice_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_pathservice_update:

                                    // pathservice_delete
                                    if (preg_match('#^/scan/admin/list/pathology\\-services/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_pathservice_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathservice_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_pathservice_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/pathology-call-complex-patients')) {
                                    // pathologycallcomplexpatients-list
                                    if ('/scan/admin/list/pathology-call-complex-patients' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathologycallcomplexpatientslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'pathologycallcomplexpatients-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'pathologycallcomplexpatients-list',);
                                    }
                                    not_pathologycallcomplexpatientslist:

                                    // pathologycallcomplexpatients_create
                                    if ('/scan/admin/list/pathology-call-complex-patients/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_pathologycallcomplexpatients_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'pathologycallcomplexpatients_create',);
                                    }
                                    not_pathologycallcomplexpatients_create:

                                    // pathologycallcomplexpatients_new
                                    if ('/scan/admin/list/pathology-call-complex-patients/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathologycallcomplexpatients_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'pathologycallcomplexpatients_new',);
                                    }
                                    not_pathologycallcomplexpatients_new:

                                    // pathologycallcomplexpatients_show
                                    if (preg_match('#^/scan/admin/list/pathology\\-call\\-complex\\-patients/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathologycallcomplexpatients_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologycallcomplexpatients_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_pathologycallcomplexpatients_show:

                                    // pathologycallcomplexpatients_edit
                                    if (preg_match('#^/scan/admin/list/pathology\\-call\\-complex\\-patients/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_pathologycallcomplexpatients_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologycallcomplexpatients_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_pathologycallcomplexpatients_edit:

                                    // pathologycallcomplexpatients_update
                                    if (preg_match('#^/scan/admin/list/pathology\\-call\\-complex\\-patients/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_pathologycallcomplexpatients_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologycallcomplexpatients_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_pathologycallcomplexpatients_update:

                                    // pathologycallcomplexpatients_delete
                                    if (preg_match('#^/scan/admin/list/pathology\\-call\\-complex\\-patients/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_pathologycallcomplexpatients_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'pathologycallcomplexpatients_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_pathologycallcomplexpatients_delete:

                                }

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/part-titles')) {
                                // parttitle-list
                                if ('/scan/admin/list/part-titles' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_parttitlelist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'parttitle-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'parttitle-list',);
                                }
                                not_parttitlelist:

                                // parttitle_create
                                if ('/scan/admin/list/part-titles/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_parttitle_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'parttitle_create',);
                                }
                                not_parttitle_create:

                                // parttitle_new
                                if ('/scan/admin/list/part-titles/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_parttitle_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'parttitle_new',);
                                }
                                not_parttitle_new:

                                // parttitle_show
                                if (preg_match('#^/scan/admin/list/part\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_parttitle_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'parttitle_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_parttitle_show:

                                // parttitle_edit
                                if (preg_match('#^/scan/admin/list/part\\-titles/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_parttitle_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'parttitle_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_parttitle_edit:

                                // parttitle_update
                                if (preg_match('#^/scan/admin/list/part\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_parttitle_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'parttitle_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_parttitle_update:

                                // parttitle_delete
                                if (preg_match('#^/scan/admin/list/part\\-titles/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_parttitle_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'parttitle_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_parttitle_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/pro')) {
                                if (0 === strpos($pathinfo, '/scan/admin/list/procedure-number-types')) {
                                    // proceduretype-list
                                    if ('/scan/admin/list/procedure-number-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_proceduretypelist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'proceduretype-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'proceduretype-list',);
                                    }
                                    not_proceduretypelist:

                                    // proceduretype_create
                                    if ('/scan/admin/list/procedure-number-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_proceduretype_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'proceduretype_create',);
                                    }
                                    not_proceduretype_create:

                                    // proceduretype_new
                                    if ('/scan/admin/list/procedure-number-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_proceduretype_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'proceduretype_new',);
                                    }
                                    not_proceduretype_new:

                                    // proceduretype_show
                                    if (preg_match('#^/scan/admin/list/procedure\\-number\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_proceduretype_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'proceduretype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_proceduretype_show:

                                    // proceduretype_edit
                                    if (preg_match('#^/scan/admin/list/procedure\\-number\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_proceduretype_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'proceduretype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_proceduretype_edit:

                                    // proceduretype_update
                                    if (preg_match('#^/scan/admin/list/procedure\\-number\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_proceduretype_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'proceduretype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_proceduretype_update:

                                    // proceduretype_delete
                                    if (preg_match('#^/scan/admin/list/procedure\\-number\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_proceduretype_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'proceduretype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_proceduretype_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/procedure-types')) {
                                    // procedure-list
                                    if ('/scan/admin/list/procedure-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_procedurelist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'procedure-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'procedure-list',);
                                    }
                                    not_procedurelist:

                                    // procedure_create
                                    if ('/scan/admin/list/procedure-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_procedure_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'procedure_create',);
                                    }
                                    not_procedure_create:

                                    // procedure_new
                                    if ('/scan/admin/list/procedure-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_procedure_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'procedure_new',);
                                    }
                                    not_procedure_new:

                                    // procedure_show
                                    if (preg_match('#^/scan/admin/list/procedure\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_procedure_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'procedure_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_procedure_show:

                                    // procedure_edit
                                    if (preg_match('#^/scan/admin/list/procedure\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_procedure_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'procedure_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_procedure_edit:

                                    // procedure_update
                                    if (preg_match('#^/scan/admin/list/procedure\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_procedure_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'procedure_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_procedure_update:

                                    // procedure_delete
                                    if (preg_match('#^/scan/admin/list/procedure\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_procedure_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'procedure_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_procedure_delete:

                                }

                                elseif (0 === strpos($pathinfo, '/scan/admin/list/progress-and-comments-event-types')) {
                                    // progresscommentseventtypes-list
                                    if ('/scan/admin/list/progress-and-comments-event-types' === $trimmedPathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_progresscommentseventtypeslist;
                                        }

                                        if (substr($pathinfo, -1) !== '/') {
                                            return $this->redirect($pathinfo.'/', 'progresscommentseventtypes-list');
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'progresscommentseventtypes-list',);
                                    }
                                    not_progresscommentseventtypeslist:

                                    // progresscommentseventtypes_create
                                    if ('/scan/admin/list/progress-and-comments-event-types/' === $pathinfo) {
                                        if ('POST' !== $canonicalMethod) {
                                            $allow[] = 'POST';
                                            goto not_progresscommentseventtypes_create;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'progresscommentseventtypes_create',);
                                    }
                                    not_progresscommentseventtypes_create:

                                    // progresscommentseventtypes_new
                                    if ('/scan/admin/list/progress-and-comments-event-types/new' === $pathinfo) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_progresscommentseventtypes_new;
                                        }

                                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'progresscommentseventtypes_new',);
                                    }
                                    not_progresscommentseventtypes_new:

                                    // progresscommentseventtypes_show
                                    if (preg_match('#^/scan/admin/list/progress\\-and\\-comments\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_progresscommentseventtypes_show;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'progresscommentseventtypes_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                    }
                                    not_progresscommentseventtypes_show:

                                    // progresscommentseventtypes_edit
                                    if (preg_match('#^/scan/admin/list/progress\\-and\\-comments\\-event\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                        if ('GET' !== $canonicalMethod) {
                                            $allow[] = 'GET';
                                            goto not_progresscommentseventtypes_edit;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'progresscommentseventtypes_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                    }
                                    not_progresscommentseventtypes_edit:

                                    // progresscommentseventtypes_update
                                    if (preg_match('#^/scan/admin/list/progress\\-and\\-comments\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('PUT' !== $canonicalMethod) {
                                            $allow[] = 'PUT';
                                            goto not_progresscommentseventtypes_update;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'progresscommentseventtypes_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                    }
                                    not_progresscommentseventtypes_update:

                                    // progresscommentseventtypes_delete
                                    if (preg_match('#^/scan/admin/list/progress\\-and\\-comments\\-event\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                        if ('DELETE' !== $canonicalMethod) {
                                            $allow[] = 'DELETE';
                                            goto not_progresscommentseventtypes_delete;
                                        }

                                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'progresscommentseventtypes_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                    }
                                    not_progresscommentseventtypes_delete:

                                }

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/s')) {
                            if (0 === strpos($pathinfo, '/scan/admin/list/stains')) {
                                // stain-list-excel
                                if ('/scan/admin/list/stains-excel' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stainlistexcel;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'stain-list-excel');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::downloadStainExcelAction',  '_route' => 'stain-list-excel',);
                                }
                                not_stainlistexcel:

                                // stain_update_fulltitle
                                if ('/scan/admin/list/stains-update-full-title' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stain_update_fulltitle;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'stain_update_fulltitle');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateFullTitleListAction',  '_route' => 'stain_update_fulltitle',);
                                }
                                not_stain_update_fulltitle:

                                // stain-list
                                if ('/scan/admin/list/stains' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stainlist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'stain-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'stain-list',);
                                }
                                not_stainlist:

                                // stain_create
                                if ('/scan/admin/list/stains/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_stain_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'stain_create',);
                                }
                                not_stain_create:

                                // stain_new
                                if ('/scan/admin/list/stains/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stain_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'stain_new',);
                                }
                                not_stain_new:

                                // stain_show
                                if (preg_match('#^/scan/admin/list/stains/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stain_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'stain_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_stain_show:

                                // stain_edit
                                if (preg_match('#^/scan/admin/list/stains/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_stain_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'stain_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_stain_edit:

                                // stain_update
                                if (preg_match('#^/scan/admin/list/stains/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_stain_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'stain_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_stain_update:

                                // stain_delete
                                if (preg_match('#^/scan/admin/list/stains/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_stain_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'stain_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_stain_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/statuses')) {
                                // status-list
                                if ('/scan/admin/list/statuses' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_statuslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'status-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'status-list',);
                                }
                                not_statuslist:

                                // status_create
                                if ('/scan/admin/list/statuses/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_status_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'status_create',);
                                }
                                not_status_create:

                                // status_new
                                if ('/scan/admin/list/statuses/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_status_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'status_new',);
                                }
                                not_status_new:

                                // status_show
                                if (preg_match('#^/scan/admin/list/statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_status_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_status_show:

                                // status_edit
                                if (preg_match('#^/scan/admin/list/statuses/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_status_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_status_edit:

                                // status_update
                                if (preg_match('#^/scan/admin/list/statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_status_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_status_update:

                                // status_delete
                                if (preg_match('#^/scan/admin/list/statuses/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_status_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'status_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_status_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/slide-types')) {
                                // slidetype-list
                                if ('/scan/admin/list/slide-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_slidetypelist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'slidetype-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'slidetype-list',);
                                }
                                not_slidetypelist:

                                // slidetype_create
                                if ('/scan/admin/list/slide-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_slidetype_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'slidetype_create',);
                                }
                                not_slidetype_create:

                                // slidetype_new
                                if ('/scan/admin/list/slide-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_slidetype_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'slidetype_new',);
                                }
                                not_slidetype_new:

                                // slidetype_show
                                if (preg_match('#^/scan/admin/list/slide\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_slidetype_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'slidetype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_slidetype_show:

                                // slidetype_edit
                                if (preg_match('#^/scan/admin/list/slide\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_slidetype_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'slidetype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_slidetype_edit:

                                // slidetype_update
                                if (preg_match('#^/scan/admin/list/slide\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_slidetype_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'slidetype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_slidetype_update:

                                // slidetype_delete
                                if (preg_match('#^/scan/admin/list/slide\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_slidetype_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'slidetype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_slidetype_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/scan-order-delivery-options')) {
                                // orderdelivery-list
                                if ('/scan/admin/list/scan-order-delivery-options' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_orderdeliverylist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'orderdelivery-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'orderdelivery-list',);
                                }
                                not_orderdeliverylist:

                                // orderdelivery_create
                                if ('/scan/admin/list/scan-order-delivery-options/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_orderdelivery_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'orderdelivery_create',);
                                }
                                not_orderdelivery_create:

                                // orderdelivery_new
                                if ('/scan/admin/list/scan-order-delivery-options/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_orderdelivery_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'orderdelivery_new',);
                                }
                                not_orderdelivery_new:

                                // orderdelivery_show
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-delivery\\-options/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_orderdelivery_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderdelivery_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_orderdelivery_show:

                                // orderdelivery_edit
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-delivery\\-options/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_orderdelivery_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderdelivery_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_orderdelivery_edit:

                                // orderdelivery_update
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-delivery\\-options/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_orderdelivery_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderdelivery_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_orderdelivery_update:

                                // orderdelivery_delete
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-delivery\\-options/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_orderdelivery_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'orderdelivery_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_orderdelivery_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/scan-order-processor-comments')) {
                                // processorcomment-list
                                if ('/scan/admin/list/scan-order-processor-comments' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_processorcommentlist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'processorcomment-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'processorcomment-list',);
                                }
                                not_processorcommentlist:

                                // processorcomment_create
                                if ('/scan/admin/list/scan-order-processor-comments/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_processorcomment_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'processorcomment_create',);
                                }
                                not_processorcomment_create:

                                // processorcomment_new
                                if ('/scan/admin/list/scan-order-processor-comments/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_processorcomment_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'processorcomment_new',);
                                }
                                not_processorcomment_new:

                                // processorcomment_show
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-processor\\-comments/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_processorcomment_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'processorcomment_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_processorcomment_show:

                                // processorcomment_edit
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-processor\\-comments/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_processorcomment_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'processorcomment_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_processorcomment_edit:

                                // processorcomment_update
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-processor\\-comments/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_processorcomment_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'processorcomment_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_processorcomment_update:

                                // processorcomment_delete
                                if (preg_match('#^/scan/admin/list/scan\\-order\\-processor\\-comments/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_processorcomment_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'processorcomment_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_processorcomment_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/suggested-message-categories')) {
                                // suggestedmessagecategorys-list
                                if ('/scan/admin/list/suggested-message-categories' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suggestedmessagecategoryslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'suggestedmessagecategorys-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'suggestedmessagecategorys-list',);
                                }
                                not_suggestedmessagecategoryslist:

                                // suggestedmessagecategorys_create
                                if ('/scan/admin/list/suggested-message-categories/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_suggestedmessagecategorys_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'suggestedmessagecategorys_create',);
                                }
                                not_suggestedmessagecategorys_create:

                                // suggestedmessagecategorys_new
                                if ('/scan/admin/list/suggested-message-categories' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suggestedmessagecategorys_new;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'suggestedmessagecategorys_new');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'suggestedmessagecategorys_new',);
                                }
                                not_suggestedmessagecategorys_new:

                                // suggestedmessagecategorys_show
                                if (preg_match('#^/scan/admin/list/suggested\\-message\\-categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suggestedmessagecategorys_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suggestedmessagecategorys_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_suggestedmessagecategorys_show:

                                // suggestedmessagecategorys_edit
                                if (preg_match('#^/scan/admin/list/suggested\\-message\\-categories/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_suggestedmessagecategorys_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suggestedmessagecategorys_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_suggestedmessagecategorys_edit:

                                // suggestedmessagecategorys_update
                                if (preg_match('#^/scan/admin/list/suggested\\-message\\-categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_suggestedmessagecategorys_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suggestedmessagecategorys_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_suggestedmessagecategorys_update:

                                // suggestedmessagecategorys_delete
                                if (preg_match('#^/scan/admin/list/suggested\\-message\\-categories/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_suggestedmessagecategorys_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'suggestedmessagecategorys_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_suggestedmessagecategorys_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/a')) {
                            if (0 === strpos($pathinfo, '/scan/admin/list/accession-types')) {
                                // accessiontype-list
                                if ('/scan/admin/list/accession-types' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accessiontypelist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'accessiontype-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'accessiontype-list',);
                                }
                                not_accessiontypelist:

                                // accessiontype_create
                                if ('/scan/admin/list/accession-types/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_accessiontype_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'accessiontype_create',);
                                }
                                not_accessiontype_create:

                                // accessiontype_new
                                if ('/scan/admin/list/accession-types/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accessiontype_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'accessiontype_new',);
                                }
                                not_accessiontype_new:

                                // accessiontype_show
                                if (preg_match('#^/scan/admin/list/accession\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accessiontype_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accessiontype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_accessiontype_show:

                                // accessiontype_edit
                                if (preg_match('#^/scan/admin/list/accession\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accessiontype_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accessiontype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_accessiontype_edit:

                                // accessiontype_update
                                if (preg_match('#^/scan/admin/list/accession\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_accessiontype_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accessiontype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_accessiontype_update:

                                // accessiontype_delete
                                if (preg_match('#^/scan/admin/list/accession\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_accessiontype_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accessiontype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_accessiontype_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/account-numbers')) {
                                // accounts-list
                                if ('/scan/admin/list/account-numbers' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accountslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'accounts-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'accounts-list',);
                                }
                                not_accountslist:

                                // accounts_create
                                if ('/scan/admin/list/account-numbers/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_accounts_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'accounts_create',);
                                }
                                not_accounts_create:

                                // accounts_new
                                if ('/scan/admin/list/account-numbers/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accounts_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'accounts_new',);
                                }
                                not_accounts_new:

                                // accounts_show
                                if (preg_match('#^/scan/admin/list/account\\-numbers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accounts_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accounts_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_accounts_show:

                                // accounts_edit
                                if (preg_match('#^/scan/admin/list/account\\-numbers/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_accounts_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accounts_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_accounts_edit:

                                // accounts_update
                                if (preg_match('#^/scan/admin/list/account\\-numbers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_accounts_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accounts_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_accounts_update:

                                // accounts_delete
                                if (preg_match('#^/scan/admin/list/account\\-numbers/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_accounts_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'accounts_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_accounts_delete:

                            }

                            elseif (0 === strpos($pathinfo, '/scan/admin/list/amendment-reasons')) {
                                // amendmentreasons-list
                                if ('/scan/admin/list/amendment-reasons' === $trimmedPathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_amendmentreasonslist;
                                    }

                                    if (substr($pathinfo, -1) !== '/') {
                                        return $this->redirect($pathinfo.'/', 'amendmentreasons-list');
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'amendmentreasons-list',);
                                }
                                not_amendmentreasonslist:

                                // amendmentreasons_create
                                if ('/scan/admin/list/amendment-reasons/' === $pathinfo) {
                                    if ('POST' !== $canonicalMethod) {
                                        $allow[] = 'POST';
                                        goto not_amendmentreasons_create;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'amendmentreasons_create',);
                                }
                                not_amendmentreasons_create:

                                // amendmentreasons_new
                                if ('/scan/admin/list/amendment-reasons/new' === $pathinfo) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_amendmentreasons_new;
                                    }

                                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'amendmentreasons_new',);
                                }
                                not_amendmentreasons_new:

                                // amendmentreasons_show
                                if (preg_match('#^/scan/admin/list/amendment\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_amendmentreasons_show;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'amendmentreasons_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                                }
                                not_amendmentreasons_show:

                                // amendmentreasons_edit
                                if (preg_match('#^/scan/admin/list/amendment\\-reasons/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                    if ('GET' !== $canonicalMethod) {
                                        $allow[] = 'GET';
                                        goto not_amendmentreasons_edit;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'amendmentreasons_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                                }
                                not_amendmentreasons_edit:

                                // amendmentreasons_update
                                if (preg_match('#^/scan/admin/list/amendment\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('PUT' !== $canonicalMethod) {
                                        $allow[] = 'PUT';
                                        goto not_amendmentreasons_update;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'amendmentreasons_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                                }
                                not_amendmentreasons_update:

                                // amendmentreasons_delete
                                if (preg_match('#^/scan/admin/list/amendment\\-reasons/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                    if ('DELETE' !== $canonicalMethod) {
                                        $allow[] = 'DELETE';
                                        goto not_amendmentreasons_delete;
                                    }

                                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'amendmentreasons_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                                }
                                not_amendmentreasons_delete:

                            }

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/organs')) {
                            // organ-list
                            if ('/scan/admin/list/organs' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_organlist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'organ-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'organ-list',);
                            }
                            not_organlist:

                            // organ_create
                            if ('/scan/admin/list/organs/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_organ_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'organ_create',);
                            }
                            not_organ_create:

                            // organ_new
                            if ('/scan/admin/list/organs/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_organ_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'organ_new',);
                            }
                            not_organ_new:

                            // organ_show
                            if (preg_match('#^/scan/admin/list/organs/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_organ_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'organ_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_organ_show:

                            // organ_edit
                            if (preg_match('#^/scan/admin/list/organs/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_organ_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'organ_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_organ_edit:

                            // organ_update
                            if (preg_match('#^/scan/admin/list/organs/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_organ_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'organ_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_organ_update:

                            // organ_delete
                            if (preg_match('#^/scan/admin/list/organs/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_organ_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'organ_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_organ_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/urgency-types')) {
                            // urgency-list
                            if ('/scan/admin/list/urgency-types' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_urgencylist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'urgency-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'urgency-list',);
                            }
                            not_urgencylist:

                            // urgency_create
                            if ('/scan/admin/list/urgency-types/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_urgency_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'urgency_create',);
                            }
                            not_urgency_create:

                            // urgency_new
                            if ('/scan/admin/list/urgency-types/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_urgency_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'urgency_new',);
                            }
                            not_urgency_new:

                            // urgency_show
                            if (preg_match('#^/scan/admin/list/urgency\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_urgency_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'urgency_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_urgency_show:

                            // urgency_edit
                            if (preg_match('#^/scan/admin/list/urgency\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_urgency_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'urgency_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_urgency_edit:

                            // urgency_update
                            if (preg_match('#^/scan/admin/list/urgency\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_urgency_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'urgency_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_urgency_update:

                            // urgency_delete
                            if (preg_match('#^/scan/admin/list/urgency\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_urgency_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'urgency_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_urgency_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/instructions-for-embedder')) {
                            // instruction-list
                            if ('/scan/admin/list/instructions-for-embedder' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_instructionlist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'instruction-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'instruction-list',);
                            }
                            not_instructionlist:

                            // instruction_create
                            if ('/scan/admin/list/instructions-for-embedder/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_instruction_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'instruction_create',);
                            }
                            not_instruction_create:

                            // instruction_new
                            if ('/scan/admin/list/instructions-for-embedder/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_instruction_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'instruction_new',);
                            }
                            not_instruction_new:

                            // instruction_show
                            if (preg_match('#^/scan/admin/list/instructions\\-for\\-embedder/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_instruction_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'instruction_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_instruction_show:

                            // instruction_edit
                            if (preg_match('#^/scan/admin/list/instructions\\-for\\-embedder/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_instruction_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'instruction_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_instruction_edit:

                            // instruction_update
                            if (preg_match('#^/scan/admin/list/instructions\\-for\\-embedder/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_instruction_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'instruction_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_instruction_update:

                            // instruction_delete
                            if (preg_match('#^/scan/admin/list/instructions\\-for\\-embedder/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_instruction_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'instruction_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_instruction_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/image-analysis-algorithms')) {
                            // imageanalysisalgorithm-list
                            if ('/scan/admin/list/image-analysis-algorithms' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_imageanalysisalgorithmlist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'imageanalysisalgorithm-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'imageanalysisalgorithm-list',);
                            }
                            not_imageanalysisalgorithmlist:

                            // imageanalysisalgorithm_create
                            if ('/scan/admin/list/image-analysis-algorithms/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_imageanalysisalgorithm_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'imageanalysisalgorithm_create',);
                            }
                            not_imageanalysisalgorithm_create:

                            // imageanalysisalgorithm_new
                            if ('/scan/admin/list/image-analysis-algorithms/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_imageanalysisalgorithm_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'imageanalysisalgorithm_new',);
                            }
                            not_imageanalysisalgorithm_new:

                            // imageanalysisalgorithm_show
                            if (preg_match('#^/scan/admin/list/image\\-analysis\\-algorithms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_imageanalysisalgorithm_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'imageanalysisalgorithm_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_imageanalysisalgorithm_show:

                            // imageanalysisalgorithm_edit
                            if (preg_match('#^/scan/admin/list/image\\-analysis\\-algorithms/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_imageanalysisalgorithm_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'imageanalysisalgorithm_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_imageanalysisalgorithm_edit:

                            // imageanalysisalgorithm_update
                            if (preg_match('#^/scan/admin/list/image\\-analysis\\-algorithms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_imageanalysisalgorithm_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'imageanalysisalgorithm_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_imageanalysisalgorithm_update:

                            // imageanalysisalgorithm_delete
                            if (preg_match('#^/scan/admin/list/image\\-analysis\\-algorithms/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_imageanalysisalgorithm_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'imageanalysisalgorithm_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_imageanalysisalgorithm_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/disease-types')) {
                            // diseasetypes-list
                            if ('/scan/admin/list/disease-types' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseasetypeslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'diseasetypes-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'diseasetypes-list',);
                            }
                            not_diseasetypeslist:

                            // diseasetypes_create
                            if ('/scan/admin/list/disease-types/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_diseasetypes_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'diseasetypes_create',);
                            }
                            not_diseasetypes_create:

                            // diseasetypes_new
                            if ('/scan/admin/list/disease-types/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseasetypes_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'diseasetypes_new',);
                            }
                            not_diseasetypes_new:

                            // diseasetypes_show
                            if (preg_match('#^/scan/admin/list/disease\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseasetypes_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseasetypes_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_diseasetypes_show:

                            // diseasetypes_edit
                            if (preg_match('#^/scan/admin/list/disease\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseasetypes_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseasetypes_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_diseasetypes_edit:

                            // diseasetypes_update
                            if (preg_match('#^/scan/admin/list/disease\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_diseasetypes_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseasetypes_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_diseasetypes_update:

                            // diseasetypes_delete
                            if (preg_match('#^/scan/admin/list/disease\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_diseasetypes_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseasetypes_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_diseasetypes_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/disease-origins')) {
                            // diseaseorigins-list
                            if ('/scan/admin/list/disease-origins' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseaseoriginslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'diseaseorigins-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'diseaseorigins-list',);
                            }
                            not_diseaseoriginslist:

                            // diseaseorigins_create
                            if ('/scan/admin/list/disease-origins/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_diseaseorigins_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'diseaseorigins_create',);
                            }
                            not_diseaseorigins_create:

                            // diseaseorigins_new
                            if ('/scan/admin/list/disease-origins/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseaseorigins_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'diseaseorigins_new',);
                            }
                            not_diseaseorigins_new:

                            // diseaseorigins_show
                            if (preg_match('#^/scan/admin/list/disease\\-origins/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseaseorigins_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseaseorigins_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_diseaseorigins_show:

                            // diseaseorigins_edit
                            if (preg_match('#^/scan/admin/list/disease\\-origins/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_diseaseorigins_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseaseorigins_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_diseaseorigins_edit:

                            // diseaseorigins_update
                            if (preg_match('#^/scan/admin/list/disease\\-origins/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_diseaseorigins_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseaseorigins_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_diseaseorigins_update:

                            // diseaseorigins_delete
                            if (preg_match('#^/scan/admin/list/disease\\-origins/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_diseaseorigins_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'diseaseorigins_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_diseaseorigins_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/laboratory-test-id-types')) {
                            // labtesttype-list
                            if ('/scan/admin/list/laboratory-test-id-types' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_labtesttypelist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'labtesttype-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'labtesttype-list',);
                            }
                            not_labtesttypelist:

                            // labtesttype_create
                            if ('/scan/admin/list/laboratory-test-id-types/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_labtesttype_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'labtesttype_create',);
                            }
                            not_labtesttype_create:

                            // labtesttype_new
                            if ('/scan/admin/list/laboratory-test-id-types/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_labtesttype_new;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'labtesttype_new',);
                            }
                            not_labtesttype_new:

                            // labtesttype_show
                            if (preg_match('#^/scan/admin/list/laboratory\\-test\\-id\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_labtesttype_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'labtesttype_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_labtesttype_show:

                            // labtesttype_edit
                            if (preg_match('#^/scan/admin/list/laboratory\\-test\\-id\\-types/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_labtesttype_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'labtesttype_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_labtesttype_edit:

                            // labtesttype_update
                            if (preg_match('#^/scan/admin/list/laboratory\\-test\\-id\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_labtesttype_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'labtesttype_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_labtesttype_update:

                            // labtesttype_delete
                            if (preg_match('#^/scan/admin/list/laboratory\\-test\\-id\\-types/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_labtesttype_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'labtesttype_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_labtesttype_delete:

                        }

                        elseif (0 === strpos($pathinfo, '/scan/admin/list/calllog-entry-tags')) {
                            // calllogentrytags-list
                            if ('/scan/admin/list/calllog-entry-tags' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_calllogentrytagslist;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'calllogentrytags-list');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::indexAction',  '_route' => 'calllogentrytags-list',);
                            }
                            not_calllogentrytagslist:

                            // calllogentrytags_create
                            if ('/scan/admin/list/calllog-entry-tags/' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_calllogentrytags_create;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::createAction',  '_route' => 'calllogentrytags_create',);
                            }
                            not_calllogentrytags_create:

                            // calllogentrytags_new
                            if ('/scan/admin/list/calllog-entry-tags' === $trimmedPathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_calllogentrytags_new;
                                }

                                if (substr($pathinfo, -1) !== '/') {
                                    return $this->redirect($pathinfo.'/', 'calllogentrytags_new');
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::newAction',  '_route' => 'calllogentrytags_new',);
                            }
                            not_calllogentrytags_new:

                            // calllogentrytags_show
                            if (preg_match('#^/scan/admin/list/calllog\\-entry\\-tags/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_calllogentrytags_show;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllogentrytags_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::showAction',));
                            }
                            not_calllogentrytags_show:

                            // calllogentrytags_edit
                            if (preg_match('#^/scan/admin/list/calllog\\-entry\\-tags/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_calllogentrytags_edit;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllogentrytags_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::editAction',));
                            }
                            not_calllogentrytags_edit:

                            // calllogentrytags_update
                            if (preg_match('#^/scan/admin/list/calllog\\-entry\\-tags/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('PUT' !== $canonicalMethod) {
                                    $allow[] = 'PUT';
                                    goto not_calllogentrytags_update;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllogentrytags_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::updateAction',));
                            }
                            not_calllogentrytags_update:

                            // calllogentrytags_delete
                            if (preg_match('#^/scan/admin/list/calllog\\-entry\\-tags/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                                if ('DELETE' !== $canonicalMethod) {
                                    $allow[] = 'DELETE';
                                    goto not_calllogentrytags_delete;
                                }

                                return $this->mergeDefaults(array_replace($matches, array('_route' => 'calllogentrytags_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanListController::deleteAction',));
                            }
                            not_calllogentrytags_delete:

                        }

                    }

                    elseif (0 === strpos($pathinfo, '/scan/admin/laboratory-tests')) {
                        // scan_labtests_pathaction_edit_standalone
                        if (0 === strpos($pathinfo, '/scan/admin/laboratory-tests/edit') && preg_match('#^/scan/admin/laboratory\\-tests/edit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_labtests_pathaction_edit_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_labtests_pathaction_edit_standalone')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanComplexListController::showListAction',));
                        }
                        not_scan_labtests_pathaction_edit_standalone:

                        if (0 === strpos($pathinfo, '/scan/admin/laboratory-tests/new')) {
                            // scan_labtests_pathaction_new_standalone
                            if ('/scan/admin/laboratory-tests/new' === $pathinfo) {
                                if ('GET' !== $canonicalMethod) {
                                    $allow[] = 'GET';
                                    goto not_scan_labtests_pathaction_new_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanComplexListController::newListAction',  '_route' => 'scan_labtests_pathaction_new_standalone',);
                            }
                            not_scan_labtests_pathaction_new_standalone:

                            // scan_labtests_pathaction_new_post_standalone
                            if ('/scan/admin/laboratory-tests/new' === $pathinfo) {
                                if ('POST' !== $canonicalMethod) {
                                    $allow[] = 'POST';
                                    goto not_scan_labtests_pathaction_new_post_standalone;
                                }

                                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanComplexListController::createListAction',  '_route' => 'scan_labtests_pathaction_new_post_standalone',);
                            }
                            not_scan_labtests_pathaction_new_post_standalone:

                        }

                        // scan_labtests_pathaction_edit_put_standalone
                        if (preg_match('#^/scan/admin/laboratory\\-tests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                            if ('PUT' !== $canonicalMethod) {
                                $allow[] = 'PUT';
                                goto not_scan_labtests_pathaction_edit_put_standalone;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_labtests_pathaction_edit_put_standalone')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanComplexListController::updateListAction',));
                        }
                        not_scan_labtests_pathaction_edit_put_standalone:

                    }

                    // scan_admin_hierarchy_index
                    if ('/scan/admin/hierarchies' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_admin_hierarchy_index;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'scan_admin_hierarchy_index');
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::indexHierarchyAction',  '_route' => 'scan_admin_hierarchy_index',);
                    }
                    not_scan_admin_hierarchy_index:

                    if (0 === strpos($pathinfo, '/scan/admin/populate-')) {
                        // generate_all
                        if ('/scan/admin/populate-all-lists-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_generate_all;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::generateAllAction',  '_route' => 'generate_all',);
                        }
                        not_generate_all:

                        // generate_stain
                        if ('/scan/admin/populate-stain-list-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_generate_stain;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::generateStainAction',  '_route' => 'generate_stain',);
                        }
                        not_generate_stain:

                        // generate_organ
                        if ('/scan/admin/populate-organ-list-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_generate_organ;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::generateOrganAction',  '_route' => 'generate_organ',);
                        }
                        not_generate_organ:

                        // generate_procedure
                        if ('/scan/admin/populate-procedure-types-list-with-default-values' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_generate_procedure;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::generateProcedureAction',  '_route' => 'generate_procedure',);
                        }
                        not_generate_procedure:

                    }

                    // generate_slidetype
                    if ('/scan/admin/genslidetype' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_generate_slidetype;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::generateSlideTypeAction',  '_route' => 'generate_slidetype',);
                    }
                    not_generate_slidetype:

                    // generate_mrntype
                    if ('/scan/admin/genmrntype' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_generate_mrntype;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::generateMrnTypeAction',  '_route' => 'generate_mrntype',);
                    }
                    not_generate_mrntype:

                    // remove-all-stains
                    if ('/scan/admin/remove-all-stains' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_removeallstains;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::removeAllOrdersStainsAction',  '_route' => 'remove-all-stains',);
                    }
                    not_removeallstains:

                    // scan_admin_fix-autogenerated-id
                    if ('/scan/admin/fix-autogenerated-id' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_admin_fixautogeneratedid;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'scan_admin_fix-autogenerated-id');
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAdminController::fixAutogeneratedIdAction',  '_route' => 'scan_admin_fix-autogenerated-id',);
                    }
                    not_scan_admin_fixautogeneratedid:

                }

                // scan_about_page
                if ('/scan/about' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::aboutAction',  '_route' => 'scan_about_page',);
                }

            }

            // scan_accessrequest_remove
            if (0 === strpos($pathinfo, '/scan/deny-access-request') && preg_match('#^/scan/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_accessrequest_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_accessrequest_remove')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanAccessRequestController::accessRequestRemoveAction',));
            }
            not_scan_accessrequest_remove:

            // scan_labtests_pathaction_list
            if ('/scan/list/laboratoty-tests' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_labtests_pathaction_list;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'scan_labtests_pathaction_list');
                }

                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanComplexListController::indexAction',  '_route' => 'scan_labtests_pathaction_list',);
            }
            not_scan_labtests_pathaction_list:

            // scan_labtests_pathaction_show_standalone
            if (0 === strpos($pathinfo, '/scan/laboratory-tests/show') && preg_match('#^/scan/laboratory\\-tests/show/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_labtests_pathaction_show_standalone;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_labtests_pathaction_show_standalone')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanComplexListController::showListAction',));
            }
            not_scan_labtests_pathaction_show_standalone:

            // scan_home
            if ('/scan' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_home;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'scan_home');
                }

                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::indexAction',  '_route' => 'scan_home',);
            }
            not_scan_home:

            // my-scan-orders
            if ('/scan/my-scan-orders' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_myscanorders;
                }

                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::orderListAction',  '_route' => 'my-scan-orders',);
            }
            not_myscanorders:

            // my-slide-return-requests
            if ('/scan/my-slide-return-requests' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_myslidereturnrequests;
                }

                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::userRequestedSlidesAction',  '_route' => 'my-slide-return-requests',);
            }
            not_myslidereturnrequests:

            if (0 === strpos($pathinfo, '/scan/i')) {
                // incoming-scan-orders
                if ('/scan/incoming-scan-orders' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_incomingscanorders;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::orderListAction',  '_route' => 'incoming-scan-orders',);
                }
                not_incomingscanorders:

                // incoming-slide-return-requests
                if ('/scan/incoming-slide-return-requests' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_incomingslidereturnrequests;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::allRequestedSlidesAction',  '_route' => 'incoming-slide-return-requests',);
                }
                not_incomingslidereturnrequests:

                if (0 === strpos($pathinfo, '/scan/idlelogout')) {
                    // scan_idlelogout
                    if ('/scan/idlelogout' === $pathinfo) {
                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSecurityController::idlelogoutAction',  '_route' => 'scan_idlelogout',);
                    }

                    // scan_idlelogout-saveorder
                    if (preg_match('#^/scan/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSecurityController::idlelogoutAction',));
                    }

                }

                // scan_image_viewer
                if (0 === strpos($pathinfo, '/scan/image-viewer') && preg_match('#^/scan/image\\-viewer/(?P<system>[^/]++)/(?P<type>[^/]++)/(?P<tablename>[^/]++)/(?P<imageid>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_image_viewer;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_image_viewer')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUploadController::imageFileAction',));
                }
                not_scan_image_viewer:

            }

            elseif (0 === strpos($pathinfo, '/scan/s')) {
                if (0 === strpos($pathinfo, '/scan/scan-order')) {
                    // scanorder_delete
                    if (preg_match('#^/scan/scan\\-order/(?P<id>[^/]++)/delete$#s', $pathinfo, $matches)) {
                        if ('DELETE' !== $canonicalMethod) {
                            $allow[] = 'DELETE';
                            goto not_scanorder_delete;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scanorder_delete')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::deleteAction',));
                    }
                    not_scanorder_delete:

                    // scanorder_status
                    if (preg_match('#^/scan/scan\\-order/(?P<id>[^/]++)/status/(?P<status>[^/]++)/?$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scanorder_status;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'scanorder_status');
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scanorder_status')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::statusAction',));
                    }
                    not_scanorder_status:

                    // scan-nopermission
                    if ('/scan/scan-order/no-permission' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scannopermission;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSecurityController::actionNoPermission',  '_route' => 'scan-nopermission',);
                    }
                    not_scannopermission:

                    if (0 === strpos($pathinfo, '/scan/scan-order/multi-slide-table-view')) {
                        // table_amend
                        if (preg_match('#^/scan/scan\\-order/multi\\-slide\\-table\\-view/(?P<id>\\d+)/amend$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'table_amend')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\TableController::multiTableShowAction',));
                        }

                        // table_show
                        if (preg_match('#^/scan/scan\\-order/multi\\-slide\\-table\\-view/(?P<id>\\d+)/show$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'table_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\TableController::multiTableShowAction',));
                        }

                        // table_edit
                        if (preg_match('#^/scan/scan\\-order/multi\\-slide\\-table\\-view/(?P<id>\\d+)/edit$#s', $pathinfo, $matches)) {
                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'table_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\TableController::multiTableShowAction',));
                        }

                        // table_create
                        if ('/scan/scan-order/multi-slide-table-view/new' === $pathinfo) {
                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\TableController::multiTableCreationAction',  '_route' => 'table_create',);
                        }

                        // table_create_submit
                        if ('/scan/scan-order/multi-slide-table-view/submit' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_table_create_submit;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\TableController::multyCreateAction',  '_route' => 'table_create_submit',);
                        }
                        not_table_create_submit:

                    }

                }

                // scanorder-complex-search
                if ('/scan/scanorder-complex-search' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_scanordercomplexsearch;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::getSearchViewAjaxAction',  '_route' => 'scanorder-complex-search',);
                }
                not_scanordercomplexsearch:

                // scan_setloginvisit
                if ('/scan/setloginvisit' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_setloginvisit;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'scan_setloginvisit');
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSecurityController::setAjaxLoginVisit',  '_route' => 'scan_setloginvisit',);
                }
                not_scan_setloginvisit:

                if (0 === strpos($pathinfo, '/scan/settings')) {
                    // scan_siteparameters
                    if ('/scan/settings' === $trimmedPathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_siteparameters;
                        }

                        if (substr($pathinfo, -1) !== '/') {
                            return $this->redirect($pathinfo.'/', 'scan_siteparameters');
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSiteParametersController::indexAction',  '_route' => 'scan_siteparameters',);
                    }
                    not_scan_siteparameters:

                    // scan_siteparameters_edit
                    if (preg_match('#^/scan/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_siteparameters_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_siteparameters_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSiteParametersController::editAction',));
                    }
                    not_scan_siteparameters_edit:

                    // scan_siteparameters_update
                    if (preg_match('#^/scan/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_scan_siteparameters_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_siteparameters_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSiteParametersController::updateAction',));
                    }
                    not_scan_siteparameters_update:

                }

                // scan_order_settings_show
                if (0 === strpos($pathinfo, '/scan/site-settings/show/user') && preg_match('#^/scan/site\\-settings/show/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_order_settings_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_order_settings_show')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::showScanSettingsAction',));
                }
                not_scan_order_settings_show:

                if (0 === strpos($pathinfo, '/scan/site-settings/edit/user')) {
                    // scan_order_settings_edit
                    if (preg_match('#^/scan/site\\-settings/edit/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_order_settings_edit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_order_settings_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::editScanSettingsAction',));
                    }
                    not_scan_order_settings_edit:

                    // scan_order_settings_update
                    if (preg_match('#^/scan/site\\-settings/edit/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('PUT' !== $canonicalMethod) {
                            $allow[] = 'PUT';
                            goto not_scan_order_settings_update;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_order_settings_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::updateScanSettingsAction',));
                    }
                    not_scan_order_settings_update:

                }

                elseif (0 === strpos($pathinfo, '/scan/slide-return-request')) {
                    // slide-return-request-table
                    if ('/scan/slide-return-request/new' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_slidereturnrequesttable;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::newRequestSlideReturnTableAction',  '_route' => 'slide-return-request-table',);
                    }
                    not_slidereturnrequesttable:

                    // slide-return-request-table-submit
                    if ('/scan/slide-return-request/submit' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_slidereturnrequesttablesubmit;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::submitRequestSlideReturnTableAction',  '_route' => 'slide-return-request-table-submit',);
                    }
                    not_slidereturnrequesttablesubmit:

                    // slide-return-request
                    if (preg_match('#^/scan/slide\\-return\\-request/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_slidereturnrequest;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'slide-return-request')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::indexAction',));
                    }
                    not_slidereturnrequest:

                    // slide-return-request_create
                    if (preg_match('#^/scan/slide\\-return\\-request/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_slidereturnrequest_create;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'slide-return-request_create')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::createSlideReturnRequestAction',));
                    }
                    not_slidereturnrequest_create:

                    // sliderequest_status
                    if (preg_match('#^/scan/slide\\-return\\-request/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_sliderequest_status;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'sliderequest_status')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::statusAction',));
                    }
                    not_sliderequest_status:

                    // slide-return-request-comment-create
                    if ('/scan/slide-return-request/comment/create' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_slidereturnrequestcommentcreate;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SlideReturnRequestController::createSlideReturnRequestCommentAction',  '_route' => 'slide-return-request-comment-create',);
                    }
                    not_slidereturnrequestcommentcreate:

                }

            }

            // thanks
            if ('/scan/thanks' === $pathinfo) {
                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanOrderController::thanksAction',  '_route' => 'thanks',);
            }

            if (0 === strpos($pathinfo, '/scan/lo')) {
                if (0 === strpos($pathinfo, '/scan/login')) {
                    // scan_login
                    if ('/scan/login' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_login;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSecurityController::loginAction',  '_route' => 'scan_login',);
                    }
                    not_scan_login:

                    // scan_login_check
                    if ('/scan/login_check' === $pathinfo) {
                        return array('_route' => 'scan_login_check');
                    }

                }

                // scan_logout
                if ('/scan/logout' === $pathinfo) {
                    return array('_route' => 'scan_logout');
                }

                // scan_lockunlock_change
                if (0 === strpos($pathinfo, '/scan/lockunlock/change') && preg_match('#^/scan/lockunlock/change/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_lockunlock_change;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_lockunlock_change')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::lockUnlockChangeAction',));
                }
                not_scan_lockunlock_change:

            }

            // load-roles-from-aperio
            if ('/scan/admin/load-roles-from-aperio' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_loadrolesfromaperio;
                }

                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanSecurityController::loadRolesFromAperioAction',  '_route' => 'load-roles-from-aperio',);
            }
            not_loadrolesfromaperio:

            if (0 === strpos($pathinfo, '/scan/account-requests')) {
                if (0 === strpos($pathinfo, '/scan/account-requests/new')) {
                    // scan_accountrequest_new
                    if ('/scan/account-requests/new' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_accountrequest_new;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserRequestController::newAction',  '_route' => 'scan_accountrequest_new',);
                    }
                    not_scan_accountrequest_new:

                    // scan_accountrequest_create
                    if ('/scan/account-requests/new' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_scan_accountrequest_create;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserRequestController::createAction',  '_route' => 'scan_accountrequest_create',);
                    }
                    not_scan_accountrequest_create:

                }

                // scan_accountrequest
                if ('/scan/account-requests' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_accountrequest;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserRequestController::indexAction',  '_route' => 'scan_accountrequest',);
                }
                not_scan_accountrequest:

                // scan_accountrequest_status
                if (preg_match('#^/scan/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_accountrequest_status;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_accountrequest_status')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserRequestController::statusAction',));
                }
                not_scan_accountrequest_status:

                // scan_accountrequest_approve
                if ('/scan/account-requests-approve' === $pathinfo) {
                    if ('POST' !== $canonicalMethod) {
                        $allow[] = 'POST';
                        goto not_scan_accountrequest_approve;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserRequestController::approveUserAccountRequestAction',  '_route' => 'scan_accountrequest_approve',);
                }
                not_scan_accountrequest_approve:

            }

            elseif (0 === strpos($pathinfo, '/scan/file-')) {
                // scan_file_delete
                if ('/scan/file-delete' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST', 'DELETE'))) {
                        $allow = array_merge($allow, array('GET', 'POST', 'DELETE'));
                        goto not_scan_file_delete;
                    }

                    return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUploadController::deleteFileAction',  '_route' => 'scan_file_delete',);
                }
                not_scan_file_delete:

                // scan_file_download
                if (0 === strpos($pathinfo, '/scan/file-download') && preg_match('#^/scan/file\\-download/(?P<id>\\d+)(?:/(?P<eventtype>[^/]++))?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_file_download;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_file_download')), array (  'eventtype' => NULL,  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUploadController::downloadFileAction',));
                }
                not_scan_file_download:

                // scan_file_view
                if (0 === strpos($pathinfo, '/scan/file-view') && preg_match('#^/scan/file\\-view/(?P<id>\\d+)(?:/(?P<viewType>[^/]++)(?:/(?P<eventtype>[^/]++))?)?$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_file_view;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_file_view')), array (  'eventtype' => NULL,  'viewType' => NULL,  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUploadController::viewFileAction',));
                }
                not_scan_file_view:

            }

            elseif (0 === strpos($pathinfo, '/scan/u')) {
                if (0 === strpos($pathinfo, '/scan/users')) {
                    // scan_listusers
                    if ('/scan/users' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_listusers;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::indexUserAction',  '_route' => 'scan_listusers',);
                    }
                    not_scan_listusers:

                    // scan_listusers_previous
                    if ('/scan/users/previous' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_listusers_previous;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::indexUserAction',  '_route' => 'scan_listusers_previous',);
                    }
                    not_scan_listusers_previous:

                }

                // scan_showuser
                if (0 === strpos($pathinfo, '/scan/user') && preg_match('#^/scan/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_showuser;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_showuser')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::showUserAction',));
                }
                not_scan_showuser:

                if (0 === strpos($pathinfo, '/scan/util')) {
                    if (0 === strpos($pathinfo, '/scan/util/common')) {
                        // scan_get_generic_select2
                        if (0 === strpos($pathinfo, '/scan/util/common/generic') && preg_match('#^/scan/util/common/generic/(?P<name>[^/]++)$#s', $pathinfo, $matches)) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_get_generic_select2;
                            }

                            return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_get_generic_select2')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getGenericAction',));
                        }
                        not_scan_get_generic_select2:

                        // scan_get_encounterreferringprovider
                        if ('/scan/util/common/get-encounter-referring-provider' === $trimmedPathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_get_encounterreferringprovider;
                            }

                            if (substr($pathinfo, -1) !== '/') {
                                return $this->redirect($pathinfo.'/', 'scan_get_encounterreferringprovider');
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getEncounterReferringProviderByNameAction',  '_route' => 'scan_get_encounterreferringprovider',);
                        }
                        not_scan_get_encounterreferringprovider:

                        // scan_get_proxyuser
                        if ('/scan/util/common/proxyuser' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_get_proxyuser;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getProxyusersAction',  '_route' => 'scan_get_proxyuser',);
                        }
                        not_scan_get_proxyuser:

                        // scan_get_encounterReferringProvider
                        if ('/scan/util/common/encounterReferringProvider' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_get_encounterReferringProvider;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getEncounterReferringProvidersAction',  '_route' => 'scan_get_encounterReferringProvider',);
                        }
                        not_scan_get_encounterReferringProvider:

                        // scan_get_encounterAttendingPhysician
                        if ('/scan/util/common/encounterAttendingPhysician' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_scan_get_encounterAttendingPhysician;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getEncounterAttendingPhysiciansAction',  '_route' => 'scan_get_encounterAttendingPhysician',);
                        }
                        not_scan_get_encounterAttendingPhysician:

                    }

                    elseif (0 === strpos($pathinfo, '/scan/util/s')) {
                        // get-stain
                        if ('/scan/util/stain' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_getstain;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getStainsAction',  '_route' => 'get-stain',);
                        }
                        not_getstain:

                        // get-scanregion
                        if ('/scan/util/scanregion' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_getscanregion;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getScanRegionAction',  '_route' => 'get-scanregion',);
                        }
                        not_getscanregion:

                        // get-slidetype
                        if ('/scan/util/slidetype' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_getslidetype;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getSlideTypesAction',  '_route' => 'get-slidetype',);
                        }
                        not_getslidetype:

                    }

                    // get-procedure
                    if ('/scan/util/procedure' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getprocedure;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getProcedureAction',  '_route' => 'get-procedure',);
                    }
                    not_getprocedure:

                    // get-partname
                    if ('/scan/util/partname' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getpartname;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getPartnameAction',  '_route' => 'get-partname',);
                    }
                    not_getpartname:

                    if (0 === strpos($pathinfo, '/scan/util/o')) {
                        // get-organ
                        if ('/scan/util/organ' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_getorgan;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getOrgansAction',  '_route' => 'get-organ',);
                        }
                        not_getorgan:

                        // get-optionalusereducational
                        if ('/scan/util/optionalusereducational' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_getoptionalusereducational;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getOptionalUserAction',  '_route' => 'get-optionalusereducational',);
                        }
                        not_getoptionalusereducational:

                        // get-optionaluserresearch
                        if ('/scan/util/optionaluserresearch' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_getoptionaluserresearch;
                            }

                            return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getOptionalUserAction',  '_route' => 'get-optionaluserresearch',);
                        }
                        not_getoptionaluserresearch:

                    }

                    // get-orderdelivery
                    if ('/scan/util/delivery' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getorderdelivery;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getOrderDeliveryAction',  '_route' => 'get-orderdelivery',);
                    }
                    not_getorderdelivery:

                    // get-blockname
                    if ('/scan/util/blockname' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getblockname;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getBlocknameAction',  '_route' => 'get-blockname',);
                    }
                    not_getblockname:

                    // get-accessiontype
                    if ('/scan/util/accessiontype' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getaccessiontype;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getAccessionTypeAction',  '_route' => 'get-accessiontype',);
                    }
                    not_getaccessiontype:

                    // get-account
                    if ('/scan/util/account' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getaccount;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getAccountAction',  '_route' => 'get-account',);
                    }
                    not_getaccount:

                    // get-mrntype
                    if ('/scan/util/mrntype' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_getmrntype;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getMrnTypeAction',  '_route' => 'get-mrntype',);
                    }
                    not_getmrntype:

                    // get-urgency
                    if ('/scan/util/urgency' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_geturgency;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getUrgencyAction',  '_route' => 'get-urgency',);
                    }
                    not_geturgency:

                    // scan_get_returnlocation
                    if ('/scan/util/returnlocation' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_scan_get_returnlocation;
                        }

                        return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUtilController::getReturnLocationAction',  '_route' => 'scan_get_returnlocation',);
                    }
                    not_scan_get_returnlocation:

                }

            }

            elseif (0 === strpos($pathinfo, '/scan/edit-user-profile')) {
                // scan_user_edit
                if (preg_match('#^/scan/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_scan_user_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_user_edit')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::editUserAction',));
                }
                not_scan_user_edit:

                // scan_user_update
                if (preg_match('#^/scan/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_scan_user_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'scan_user_update')), array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\ScanUserController::updateUserAction',));
                }
                not_scan_user_update:

            }

            // scan_search_patients
            if ('/scan/patients/search' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_scan_search_patients;
                }

                return array (  '_controller' => 'Oleg\\OrderformBundle\\Controller\\SearchController::searchPatientAction',  '_route' => 'scan_search_patients',);
            }
            not_scan_search_patients:

        }

        elseif (0 === strpos($pathinfo, '/translational-research')) {
            if (0 === strpos($pathinfo, '/translational-research/a')) {
                // translationalresearch_about_page
                if ('/translational-research/about' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\DefaultController::aboutAction',  '_route' => 'translationalresearch_about_page',);
                }

                if (0 === strpos($pathinfo, '/translational-research/account-requests')) {
                    if (0 === strpos($pathinfo, '/translational-research/account-requests/new')) {
                        // translationalresearch_accountrequest_new
                        if ('/translational-research/account-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_translationalresearch_accountrequest_new;
                            }

                            return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TransResUserRequestController::newAction',  '_route' => 'translationalresearch_accountrequest_new',);
                        }
                        not_translationalresearch_accountrequest_new:

                        // translationalresearch_accountrequest_create
                        if ('/translational-research/account-requests/new' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_translationalresearch_accountrequest_create;
                            }

                            return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TransResUserRequestController::createAction',  '_route' => 'translationalresearch_accountrequest_create',);
                        }
                        not_translationalresearch_accountrequest_create:

                    }

                    // translationalresearch_accountrequest
                    if ('/translational-research/account-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_translationalresearch_accountrequest;
                        }

                        return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TransResUserRequestController::indexAction',  '_route' => 'translationalresearch_accountrequest',);
                    }
                    not_translationalresearch_accountrequest:

                    // translationalresearch_accountrequest_status
                    if (preg_match('#^/translational\\-research/account\\-requests/(?P<id>\\d+)/(?P<status>[^/]++)/status$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_translationalresearch_accountrequest_status;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_accountrequest_status')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TransResUserRequestController::statusAction',));
                    }
                    not_translationalresearch_accountrequest_status:

                    // translationalresearch_accountrequest_approve
                    if ('/translational-research/account-requests-approve' === $pathinfo) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_translationalresearch_accountrequest_approve;
                        }

                        return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TransResUserRequestController::approveUserAccountRequestAction',  '_route' => 'translationalresearch_accountrequest_approve',);
                    }
                    not_translationalresearch_accountrequest_approve:

                }

                elseif (0 === strpos($pathinfo, '/translational-research/access-requests')) {
                    if (0 === strpos($pathinfo, '/translational-research/access-requests/new')) {
                        // translationalresearch_access_request_new_plain
                        if ('/translational-research/access-requests/new/create' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_translationalresearch_access_request_new_plain;
                            }

                            return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestCreatePlainAction',  '_route' => 'translationalresearch_access_request_new_plain',);
                        }
                        not_translationalresearch_access_request_new_plain:

                        // translationalresearch_access_request_new
                        if ('/translational-research/access-requests/new' === $pathinfo) {
                            if ('GET' !== $canonicalMethod) {
                                $allow[] = 'GET';
                                goto not_translationalresearch_access_request_new;
                            }

                            return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestCreateAction',  '_route' => 'translationalresearch_access_request_new',);
                        }
                        not_translationalresearch_access_request_new:

                        // translationalresearch_access_request_create
                        if ('/translational-research/access-requests/new/pending' === $pathinfo) {
                            if ('POST' !== $canonicalMethod) {
                                $allow[] = 'POST';
                                goto not_translationalresearch_access_request_create;
                            }

                            return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestAction',  '_route' => 'translationalresearch_access_request_create',);
                        }
                        not_translationalresearch_access_request_create:

                    }

                    // translationalresearch_accessrequest_list
                    if ('/translational-research/access-requests' === $pathinfo) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_translationalresearch_accessrequest_list;
                        }

                        return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestIndexAction',  '_route' => 'translationalresearch_accessrequest_list',);
                    }
                    not_translationalresearch_accessrequest_list:

                    // translationalresearch_accessrequest_change
                    if (0 === strpos($pathinfo, '/translational-research/access-requests/change-status') && preg_match('#^/translational\\-research/access\\-requests/change\\-status/(?P<id>\\d+)/(?P<status>[^/]++)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_translationalresearch_accessrequest_change;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_accessrequest_change')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestChangeAction',));
                    }
                    not_translationalresearch_accessrequest_change:

                    // translationalresearch_accessrequest_management
                    if (preg_match('#^/translational\\-research/access\\-requests/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_translationalresearch_accessrequest_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_accessrequest_management')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestManagementAction',));
                    }
                    not_translationalresearch_accessrequest_management:

                    // translationalresearch_accessrequest_management_submit
                    if (0 === strpos($pathinfo, '/translational-research/access-requests/submit') && preg_match('#^/translational\\-research/access\\-requests/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_translationalresearch_accessrequest_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_accessrequest_management_submit')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestManagementSubmitAction',));
                    }
                    not_translationalresearch_accessrequest_management_submit:

                }

                // translationalresearch_authorized_users
                if ('/translational-research/authorized-users' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_authorized_users;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'translationalresearch_authorized_users');
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::authorizedUsersAction',  '_route' => 'translationalresearch_authorized_users',);
                }
                not_translationalresearch_authorized_users:

                if (0 === strpos($pathinfo, '/translational-research/authorization-user-manager')) {
                    // translationalresearch_authorization_user_management
                    if (preg_match('#^/translational\\-research/authorization\\-user\\-manager/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('GET' !== $canonicalMethod) {
                            $allow[] = 'GET';
                            goto not_translationalresearch_authorization_user_management;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_authorization_user_management')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::authorizationManagementAction',));
                    }
                    not_translationalresearch_authorization_user_management:

                    // translationalresearch_authorization_user_management_submit
                    if (0 === strpos($pathinfo, '/translational-research/authorization-user-manager/submit') && preg_match('#^/translational\\-research/authorization\\-user\\-manager/submit/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                        if ('POST' !== $canonicalMethod) {
                            $allow[] = 'POST';
                            goto not_translationalresearch_authorization_user_management_submit;
                        }

                        return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_authorization_user_management_submit')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::authorizationManagementSubmitAction',));
                    }
                    not_translationalresearch_authorization_user_management_submit:

                }

                // translationalresearch_add_authorized_user
                if ('/translational-research/add-authorized-user' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_add_authorized_user;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'translationalresearch_add_authorized_user');
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::addAuthorizedUserAction',  '_route' => 'translationalresearch_add_authorized_user',);
                }
                not_translationalresearch_add_authorized_user:

            }

            elseif (0 === strpos($pathinfo, '/translational-research/project')) {
                // translationalresearch_home
                if ('/translational-research/project/home' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_home;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'translationalresearch_home');
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\ProjectController::homeAction',  '_route' => 'translationalresearch_home',);
                }
                not_translationalresearch_home:

                // translationalresearch_project_index
                if ('/translational-research/project' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_project_index;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'translationalresearch_project_index');
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\ProjectController::indexAction',  '_route' => 'translationalresearch_project_index',);
                }
                not_translationalresearch_project_index:

                // translationalresearch_project_new
                if ('/translational-research/project/new' === $pathinfo) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_translationalresearch_project_new;
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\ProjectController::newAction',  '_route' => 'translationalresearch_project_new',);
                }
                not_translationalresearch_project_new:

                // translationalresearch_project_show
                if (preg_match('#^/translational\\-research/project/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_project_show;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_project_show')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\ProjectController::showAction',));
                }
                not_translationalresearch_project_show:

                // translationalresearch_project_edit
                if (preg_match('#^/translational\\-research/project/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if (!in_array($canonicalMethod, array('GET', 'POST'))) {
                        $allow = array_merge($allow, array('GET', 'POST'));
                        goto not_translationalresearch_project_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_project_edit')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\ProjectController::editAction',));
                }
                not_translationalresearch_project_edit:

                // translationalresearch_project_delete
                if (preg_match('#^/translational\\-research/project/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('DELETE' !== $canonicalMethod) {
                        $allow[] = 'DELETE';
                        goto not_translationalresearch_project_delete;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_project_delete')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\ProjectController::deleteAction',));
                }
                not_translationalresearch_project_delete:

            }

            // translationalresearch_accessrequest_remove
            if (0 === strpos($pathinfo, '/translational-research/deny-access-request') && preg_match('#^/translational\\-research/deny\\-access\\-request/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_translationalresearch_accessrequest_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_accessrequest_remove')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::accessRequestRemoveAction',));
            }
            not_translationalresearch_accessrequest_remove:

            // translationalresearch_authorization_remove
            if (0 === strpos($pathinfo, '/translational-research/revoke-access-authorization') && preg_match('#^/translational\\-research/revoke\\-access\\-authorization/(?P<userId>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_translationalresearch_authorization_remove;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_authorization_remove')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchAccessRequestController::authorizationRemoveAction',));
            }
            not_translationalresearch_authorization_remove:

            if (0 === strpos($pathinfo, '/translational-research/event-log')) {
                // translationalresearch_logger
                if ('/translational-research/event-log' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_logger;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'translationalresearch_logger');
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchLoggerController::indexAction',  '_route' => 'translationalresearch_logger',);
                }
                not_translationalresearch_logger:

                // translationalresearch_logger_user_all
                if (0 === strpos($pathinfo, '/translational-research/event-log/user') && preg_match('#^/translational\\-research/event\\-log/user/(?P<id>[^/]++)/all$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_logger_user_all;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_logger_user_all')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchLoggerController::getAuditLogAllAction',));
                }
                not_translationalresearch_logger_user_all:

            }

            elseif (0 === strpos($pathinfo, '/translational-research/edit-user-profile')) {
                // translationalresearch_user_edit
                if (preg_match('#^/translational\\-research/edit\\-user\\-profile/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_user_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_user_edit')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchUserController::editUserAction',));
                }
                not_translationalresearch_user_edit:

                // translationalresearch_user_update
                if (preg_match('#^/translational\\-research/edit\\-user\\-profile/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_translationalresearch_user_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_user_update')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchUserController::updateUserAction',));
                }
                not_translationalresearch_user_update:

            }

            elseif (0 === strpos($pathinfo, '/translational-research/login')) {
                // translationalresearch_login
                if ('/translational-research/login' === $pathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_login;
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSecurityController::loginAction',  '_route' => 'translationalresearch_login',);
                }
                not_translationalresearch_login:

                // translationalresearch_login_check
                if ('/translational-research/login_check' === $pathinfo) {
                    return array('_route' => 'translationalresearch_login_check');
                }

            }

            // translationalresearch_logout
            if ('/translational-research/logout' === $pathinfo) {
                return array('_route' => 'translationalresearch_logout');
            }

            // translationalresearch_setloginvisit
            if ('/translational-research/setloginvisit' === $trimmedPathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_translationalresearch_setloginvisit;
                }

                if (substr($pathinfo, -1) !== '/') {
                    return $this->redirect($pathinfo.'/', 'translationalresearch_setloginvisit');
                }

                return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSecurityController::setAjaxLoginVisit',  '_route' => 'translationalresearch_setloginvisit',);
            }
            not_translationalresearch_setloginvisit:

            if (0 === strpos($pathinfo, '/translational-research/settings')) {
                // translationalresearch_siteparameters
                if ('/translational-research/settings' === $trimmedPathinfo) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_siteparameters;
                    }

                    if (substr($pathinfo, -1) !== '/') {
                        return $this->redirect($pathinfo.'/', 'translationalresearch_siteparameters');
                    }

                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSiteParametersController::indexAction',  '_route' => 'translationalresearch_siteparameters',);
                }
                not_translationalresearch_siteparameters:

                // translationalresearch_siteparameters_edit
                if (preg_match('#^/translational\\-research/settings/(?P<id>[^/]++)/edit$#s', $pathinfo, $matches)) {
                    if ('GET' !== $canonicalMethod) {
                        $allow[] = 'GET';
                        goto not_translationalresearch_siteparameters_edit;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_siteparameters_edit')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSiteParametersController::editAction',));
                }
                not_translationalresearch_siteparameters_edit:

                // translationalresearch_siteparameters_update
                if (preg_match('#^/translational\\-research/settings/(?P<id>[^/]++)$#s', $pathinfo, $matches)) {
                    if ('PUT' !== $canonicalMethod) {
                        $allow[] = 'PUT';
                        goto not_translationalresearch_siteparameters_update;
                    }

                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_siteparameters_update')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSiteParametersController::updateAction',));
                }
                not_translationalresearch_siteparameters_update:

            }

            // translationalresearch-nopermission
            if ('/translational-research/no-permission' === $pathinfo) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_translationalresearchnopermission;
                }

                return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSecurityController::actionNoPermission',  '_route' => 'translationalresearch-nopermission',);
            }
            not_translationalresearchnopermission:

            if (0 === strpos($pathinfo, '/translational-research/idlelogout')) {
                // translationalresearch_idlelogout
                if ('/translational-research/idlelogout' === $pathinfo) {
                    return array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSecurityController::idlelogoutAction',  '_route' => 'translationalresearch_idlelogout',);
                }

                // translationalresearch_idlelogout-saveorder
                if (preg_match('#^/translational\\-research/idlelogout(?:/(?P<flag>[^/]++))?$#s', $pathinfo, $matches)) {
                    return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_idlelogout-saveorder')), array (  'flag' => NULL,  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchSecurityController::idlelogoutAction',));
                }

            }

            // translationalresearch_showuser
            if (0 === strpos($pathinfo, '/translational-research/user') && preg_match('#^/translational\\-research/user/(?P<id>\\d+)$#s', $pathinfo, $matches)) {
                if ('GET' !== $canonicalMethod) {
                    $allow[] = 'GET';
                    goto not_translationalresearch_showuser;
                }

                return $this->mergeDefaults(array_replace($matches, array('_route' => 'translationalresearch_showuser')), array (  '_controller' => 'Oleg\\TranslationalResearchBundle\\Controller\\TranslationalResearchUserController::showUserOptimizedAction',));
            }
            not_translationalresearch_showuser:

        }

        elseif (0 === strpos($pathinfo, '/_uploader')) {
            // _uploader_upload_employees_gallery
            if ('/_uploader/employees_gallery/upload' === $pathinfo) {
                if (!in_array($requestMethod, array('POST', 'PUT', 'PATCH'))) {
                    $allow = array_merge($allow, array('POST', 'PUT', 'PATCH'));
                    goto not__uploader_upload_employees_gallery;
                }

                return array (  '_controller' => 'oneup_uploader.controller.employees_gallery:upload',  '_format' => 'json',  '_route' => '_uploader_upload_employees_gallery',);
            }
            not__uploader_upload_employees_gallery:

            // _uploader_upload_scan_gallery
            if ('/_uploader/scan_gallery/upload' === $pathinfo) {
                if (!in_array($requestMethod, array('POST', 'PUT', 'PATCH'))) {
                    $allow = array_merge($allow, array('POST', 'PUT', 'PATCH'));
                    goto not__uploader_upload_scan_gallery;
                }

                return array (  '_controller' => 'oneup_uploader.controller.scan_gallery:upload',  '_format' => 'json',  '_route' => '_uploader_upload_scan_gallery',);
            }
            not__uploader_upload_scan_gallery:

            // _uploader_upload_fellapp_gallery
            if ('/_uploader/fellapp_gallery/upload' === $pathinfo) {
                if (!in_array($requestMethod, array('POST', 'PUT', 'PATCH'))) {
                    $allow = array_merge($allow, array('POST', 'PUT', 'PATCH'));
                    goto not__uploader_upload_fellapp_gallery;
                }

                return array (  '_controller' => 'oneup_uploader.controller.fellapp_gallery:upload',  '_format' => 'json',  '_route' => '_uploader_upload_fellapp_gallery',);
            }
            not__uploader_upload_fellapp_gallery:

            // _uploader_upload_vacreq_gallery
            if ('/_uploader/vacreq_gallery/upload' === $pathinfo) {
                if (!in_array($requestMethod, array('POST', 'PUT', 'PATCH'))) {
                    $allow = array_merge($allow, array('POST', 'PUT', 'PATCH'));
                    goto not__uploader_upload_vacreq_gallery;
                }

                return array (  '_controller' => 'oneup_uploader.controller.vacreq_gallery:upload',  '_format' => 'json',  '_route' => '_uploader_upload_vacreq_gallery',);
            }
            not__uploader_upload_vacreq_gallery:

        }

        // fos_js_routing_js
        if (0 === strpos($pathinfo, '/js/routing') && preg_match('#^/js/routing(?:\\.(?P<_format>js|json))?$#s', $pathinfo, $matches)) {
            return $this->mergeDefaults(array_replace($matches, array('_route' => 'fos_js_routing_js')), array (  '_controller' => 'fos_js_routing.controller:indexAction',  '_format' => 'js',));
        }

        throw 0 < count($allow) ? new MethodNotAllowedException(array_unique($allow)) : new ResourceNotFoundException();
    }
}
