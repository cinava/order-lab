<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StateLicense extends \Oleg\UserdirectoryBundle\Entity\StateLicense implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'state', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'country', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'licenseNumber', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'licenseIssuedDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'licenseExpirationDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'credentials', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'active', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'attachmentContainer'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'state', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'country', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'licenseNumber', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'licenseIssuedDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'licenseExpirationDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'credentials', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'active', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\StateLicense' . "\0" . 'attachmentContainer'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StateLicense $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setCredentials($credentials)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCredentials', [$credentials]);

        return parent::setCredentials($credentials);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredentials', []);

        return parent::getCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLicenseExpirationDate($licenseExpirationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLicenseExpirationDate', [$licenseExpirationDate]);

        return parent::setLicenseExpirationDate($licenseExpirationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLicenseExpirationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLicenseExpirationDate', []);

        return parent::getLicenseExpirationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLicenseNumber($licenseNumber)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLicenseNumber', [$licenseNumber]);

        return parent::setLicenseNumber($licenseNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getLicenseNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLicenseNumber', []);

        return parent::getLicenseNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setLicenseIssuedDate($licenseIssuedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLicenseIssuedDate', [$licenseIssuedDate]);

        return parent::setLicenseIssuedDate($licenseIssuedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLicenseIssuedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLicenseIssuedDate', []);

        return parent::getLicenseIssuedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentContainer', []);

        return parent::getAttachmentContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentContainer($attachmentContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentContainer', [$attachmentContainer]);

        return parent::setAttachmentContainer($attachmentContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function createAttachmentDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createAttachmentDocument', []);

        return parent::createAttachmentDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
