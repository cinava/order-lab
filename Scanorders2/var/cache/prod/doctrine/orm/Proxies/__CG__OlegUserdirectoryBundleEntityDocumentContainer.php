<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DocumentContainer extends \Oleg\UserdirectoryBundle\Entity\DocumentContainer implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'attachmentContainer', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'documents', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'title', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'comments', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'device', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'datetime', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'time', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'provider', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'type', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'links', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'imageId', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'source'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'attachmentContainer', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'documents', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'title', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'comments', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'device', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'datetime', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'time', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'provider', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'type', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'links', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'imageId', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\DocumentContainer' . "\0" . 'source'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DocumentContainer $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentContainer($attachmentContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentContainer', [$attachmentContainer]);

        return parent::setAttachmentContainer($attachmentContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentContainer', []);

        return parent::getAttachmentContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function getDocuments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocuments', []);

        return parent::getDocuments();
    }

    /**
     * {@inheritDoc}
     */
    public function addDocument($document)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDocument', [$document]);

        return parent::addDocument($document);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDocument($document)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDocument', [$document]);

        return parent::removeDocument($document);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function addComment($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComment', [$comment]);

        return parent::addComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComment($comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComment', [$comment]);

        return parent::removeComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function setDatetime($datetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatetime', [$datetime]);

        return parent::setDatetime($datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatetime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatetime', []);

        return parent::getDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setTime($time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTime', [$time]);

        return parent::setTime($time);
    }

    /**
     * {@inheritDoc}
     */
    public function getTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTime', []);

        return parent::getTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setDevice($device)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDevice', [$device]);

        return parent::setDevice($device);
    }

    /**
     * {@inheritDoc}
     */
    public function getDevice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDevice', []);

        return parent::getDevice();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider($provider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$provider]);

        return parent::setProvider($provider);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getLinks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinks', []);

        return parent::getLinks();
    }

    /**
     * {@inheritDoc}
     */
    public function addLink($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLink', [$item]);

        return parent::addLink($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLink($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLink', [$item]);

        return parent::removeLink($item);
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', [$source]);

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', []);

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageId($imageId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageId', [$imageId]);

        return parent::setImageId($imageId);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageId', []);

        return parent::getImageId();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
