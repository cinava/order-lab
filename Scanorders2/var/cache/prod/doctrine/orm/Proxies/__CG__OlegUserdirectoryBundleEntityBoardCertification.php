<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BoardCertification extends \Oleg\UserdirectoryBundle\Entity\BoardCertification implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'specialty', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'issueDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'expirationDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'recertificationDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'credentials', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'certifyingBoardOrganization', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'attachmentContainer'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'specialty', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'issueDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'expirationDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'recertificationDate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'credentials', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'certifyingBoardOrganization', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\BoardCertification' . "\0" . 'attachmentContainer'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BoardCertification $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setCredentials($credentials)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCredentials', [$credentials]);

        return parent::setCredentials($credentials);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredentials', []);

        return parent::getCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpirationDate($expirationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpirationDate', [$expirationDate]);

        return parent::setExpirationDate($expirationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpirationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpirationDate', []);

        return parent::getExpirationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setIssueDate($issueDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIssueDate', [$issueDate]);

        return parent::setIssueDate($issueDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getIssueDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIssueDate', []);

        return parent::getIssueDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpecialty($specialty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpecialty', [$specialty]);

        return parent::setSpecialty($specialty);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecialty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecialty', []);

        return parent::getSpecialty();
    }

    /**
     * {@inheritDoc}
     */
    public function setCertifyingBoardOrganization($certifyingBoardOrganization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCertifyingBoardOrganization', [$certifyingBoardOrganization]);

        return parent::setCertifyingBoardOrganization($certifyingBoardOrganization);
    }

    /**
     * {@inheritDoc}
     */
    public function getCertifyingBoardOrganization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCertifyingBoardOrganization', []);

        return parent::getCertifyingBoardOrganization();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecertificationDate($recertificationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecertificationDate', [$recertificationDate]);

        return parent::setRecertificationDate($recertificationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecertificationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecertificationDate', []);

        return parent::getRecertificationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentContainer', []);

        return parent::getAttachmentContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentContainer($attachmentContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentContainer', [$attachmentContainer]);

        return parent::setAttachmentContainer($attachmentContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function createAttachmentDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createAttachmentDocument', []);

        return parent::createAttachmentDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
