<?php

namespace Proxies\__CG__\Oleg\FellAppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Reference extends \Oleg\FellAppBundle\Entity\Reference implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'id', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'fellapp', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'creationDate', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'createdBy', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'name', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'firstName', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'degree', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'title', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'institution', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'geoLocation', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'documents', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'email', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'phone'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'id', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'fellapp', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'creationDate', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'createdBy', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'name', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'firstName', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'degree', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'title', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'institution', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'geoLocation', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'documents', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'email', '' . "\0" . 'Oleg\\FellAppBundle\\Entity\\Reference' . "\0" . 'phone'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Reference $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setCreatedBy($createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationDate($creationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationDate', [$creationDate]);

        return parent::setCreationDate($creationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setGeoLocation($geoLocation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGeoLocation', [$geoLocation]);

        return parent::setGeoLocation($geoLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function getGeoLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGeoLocation', []);

        return parent::getGeoLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setInstitution($institution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInstitution', [$institution]);

        return parent::setInstitution($institution);
    }

    /**
     * {@inheritDoc}
     */
    public function getInstitution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstitution', []);

        return parent::getInstitution();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', []);

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName($firstName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', [$firstName]);

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function getDegree()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDegree', []);

        return parent::getDegree();
    }

    /**
     * {@inheritDoc}
     */
    public function setDegree($degree)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDegree', [$degree]);

        return parent::setDegree($degree);
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setFellapp($fellapp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFellapp', [$fellapp]);

        return parent::setFellapp($fellapp);
    }

    /**
     * {@inheritDoc}
     */
    public function getFellapp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFellapp', []);

        return parent::getFellapp();
    }

    /**
     * {@inheritDoc}
     */
    public function addDocument($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDocument', [$item]);

        return parent::addDocument($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDocument($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDocument', [$item]);

        return parent::removeDocument($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getDocuments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocuments', []);

        return parent::getDocuments();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone($phone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$phone]);

        return parent::setPhone($phone);
    }

}
