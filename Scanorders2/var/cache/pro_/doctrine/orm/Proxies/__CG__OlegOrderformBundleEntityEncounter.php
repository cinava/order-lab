<?php

namespace Proxies\__CG__\Oleg\OrderformBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Encounter extends \Oleg\OrderformBundle\Entity\Encounter implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'name', 'number', 'patient', 'procedure', 'message', 'date', 'patsuffix', 'patlastname', 'patfirstname', 'patmiddlename', 'patsex', 'patage', 'pathistory', 'referringProviders', 'attendingPhysicians', 'encounterInfoTypes', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'patientDob', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'location', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'inpatientinfo', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'encounterStatus', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'version', 'id', 'status', 'creationdate', 'provider', 'source', 'institution', 'attachmentContainer', 'tracker', 'changeObjectArr', 'tempSource', 'tempUser'];
        }

        return ['__isInitialized__', 'name', 'number', 'patient', 'procedure', 'message', 'date', 'patsuffix', 'patlastname', 'patfirstname', 'patmiddlename', 'patsex', 'patage', 'pathistory', 'referringProviders', 'attendingPhysicians', 'encounterInfoTypes', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'patientDob', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'location', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'inpatientinfo', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'encounterStatus', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\Encounter' . "\0" . 'version', 'id', 'status', 'creationdate', 'provider', 'source', 'institution', 'attachmentContainer', 'tracker', 'changeObjectArr', 'tempSource', 'tempUser'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Encounter $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function makeDependClone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeDependClone', []);

        return parent::makeDependClone();
    }

    /**
     * {@inheritDoc}
     */
    public function getPatientDob()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatientDob', []);

        return parent::getPatientDob();
    }

    /**
     * {@inheritDoc}
     */
    public function setPatientDob($patientDob)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatientDob', [$patientDob]);

        return parent::setPatientDob($patientDob);
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function addDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDate', [$date]);

        return parent::addDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDate', [$date]);

        return parent::removeDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function setPatage($patage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatage', [$patage]);

        return parent::setPatage($patage);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatage', []);

        return parent::getPatage();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatage($patage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatage', [$patage]);

        return parent::addPatage($patage);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatage($patage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatage', [$patage]);

        return parent::removePatage($patage);
    }

    /**
     * {@inheritDoc}
     */
    public function setPathistory($pathistory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPathistory', [$pathistory]);

        return parent::setPathistory($pathistory);
    }

    /**
     * {@inheritDoc}
     */
    public function getPathistory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPathistory', []);

        return parent::getPathistory();
    }

    /**
     * {@inheritDoc}
     */
    public function addPathistory($pathistory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPathistory', [$pathistory]);

        return parent::addPathistory($pathistory);
    }

    /**
     * {@inheritDoc}
     */
    public function removePathistory($pathistory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePathistory', [$pathistory]);

        return parent::removePathistory($pathistory);
    }

    /**
     * {@inheritDoc}
     */
    public function setPatsuffix($patsuffix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatsuffix', [$patsuffix]);

        return parent::setPatsuffix($patsuffix);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatsuffix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatsuffix', []);

        return parent::getPatsuffix();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatsuffix($patsuffix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatsuffix', [$patsuffix]);

        return parent::addPatsuffix($patsuffix);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatsuffix($patsuffix)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatsuffix', [$patsuffix]);

        return parent::removePatsuffix($patsuffix);
    }

    /**
     * {@inheritDoc}
     */
    public function setPatlastname($patlastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatlastname', [$patlastname]);

        return parent::setPatlastname($patlastname);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatlastname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatlastname', []);

        return parent::getPatlastname();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatlastname($patlastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatlastname', [$patlastname]);

        return parent::addPatlastname($patlastname);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatlastname($patlastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatlastname', [$patlastname]);

        return parent::removePatlastname($patlastname);
    }

    /**
     * {@inheritDoc}
     */
    public function setPatfirstname($patfirstname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatfirstname', [$patfirstname]);

        return parent::setPatfirstname($patfirstname);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatfirstname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatfirstname', []);

        return parent::getPatfirstname();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatfirstname($patfirstname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatfirstname', [$patfirstname]);

        return parent::addPatfirstname($patfirstname);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatfirstname($patfirstname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatfirstname', [$patfirstname]);

        return parent::removePatfirstname($patfirstname);
    }

    /**
     * {@inheritDoc}
     */
    public function setPatmiddlename($patmiddlename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatmiddlename', [$patmiddlename]);

        return parent::setPatmiddlename($patmiddlename);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatmiddlename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatmiddlename', []);

        return parent::getPatmiddlename();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatmiddlename($patmiddlename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatmiddlename', [$patmiddlename]);

        return parent::addPatmiddlename($patmiddlename);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatmiddlename($patmiddlename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatmiddlename', [$patmiddlename]);

        return parent::removePatmiddlename($patmiddlename);
    }

    /**
     * {@inheritDoc}
     */
    public function setPatsex($patsex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatsex', [$patsex]);

        return parent::setPatsex($patsex);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatsex()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatsex', []);

        return parent::getPatsex();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatsex($patsex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatsex', [$patsex]);

        return parent::addPatsex($patsex);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatsex($patsex)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatsex', [$patsex]);

        return parent::removePatsex($patsex);
    }

    /**
     * {@inheritDoc}
     */
    public function getEncounterInfoTypes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncounterInfoTypes', []);

        return parent::getEncounterInfoTypes();
    }

    /**
     * {@inheritDoc}
     */
    public function addEncounterInfoType($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEncounterInfoType', [$item]);

        return parent::addEncounterInfoType($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEncounterInfoType($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEncounterInfoType', [$item]);

        return parent::removeEncounterInfoType($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function addName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addName', [$name]);

        return parent::addName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function removeName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeName', [$name]);

        return parent::removeName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function clearName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearName', []);

        return parent::clearName();
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function addNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNumber', [$number]);

        return parent::addNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function removeNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeNumber', [$number]);

        return parent::removeNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function clearNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearNumber', []);

        return parent::clearNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function addProcedure(\Oleg\OrderformBundle\Entity\Procedure $procedure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProcedure', [$procedure]);

        return parent::addProcedure($procedure);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProcedure(\Oleg\OrderformBundle\Entity\Procedure $procedure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProcedure', [$procedure]);

        return parent::removeProcedure($procedure);
    }

    /**
     * {@inheritDoc}
     */
    public function getProcedure()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProcedure', []);

        return parent::getProcedure();
    }

    /**
     * {@inheritDoc}
     */
    public function setProcedure(\Doctrine\Common\Collections\ArrayCollection $procedure)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProcedure', [$procedure]);

        return parent::setProcedure($procedure);
    }

    /**
     * {@inheritDoc}
     */
    public function clearProcedure()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearProcedure', []);

        return parent::clearProcedure();
    }

    /**
     * {@inheritDoc}
     */
    public function setPatient(\Oleg\OrderformBundle\Entity\Patient $patient = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPatient', [$patient]);

        return parent::setPatient($patient);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatient', []);

        return parent::getPatient();
    }

    /**
     * {@inheritDoc}
     */
    public function getReferringProviders()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReferringProviders', []);

        return parent::getReferringProviders();
    }

    /**
     * {@inheritDoc}
     */
    public function addReferringProvider($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addReferringProvider', [$item]);

        return parent::addReferringProvider($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeReferringProvider($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeReferringProvider', [$item]);

        return parent::removeReferringProvider($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttendingPhysicians()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttendingPhysicians', []);

        return parent::getAttendingPhysicians();
    }

    /**
     * {@inheritDoc}
     */
    public function addAttendingPhysician($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAttendingPhysician', [$item]);

        return parent::addAttendingPhysician($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAttendingPhysician($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAttendingPhysician', [$item]);

        return parent::removeAttendingPhysician($item);
    }

    /**
     * {@inheritDoc}
     */
    public function addExtraFields($status, $provider, $source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addExtraFields', [$status, $provider, $source]);

        return parent::addExtraFields($status, $provider, $source);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocation', []);

        return parent::getLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function addLocation($location)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLocation', [$location]);

        return parent::addLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLocation($location)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLocation', [$location]);

        return parent::removeLocation($location);
    }

    /**
     * {@inheritDoc}
     */
    public function getEncounterStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncounterStatus', []);

        return parent::getEncounterStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncounterStatus($encounterStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncounterStatus', [$encounterStatus]);

        return parent::setEncounterStatus($encounterStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', [$version]);

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getInpatientinfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInpatientinfo', []);

        return parent::getInpatientinfo();
    }

    /**
     * {@inheritDoc}
     */
    public function addInpatientinfo($inpatientinfo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addInpatientinfo', [$inpatientinfo]);

        return parent::addInpatientinfo($inpatientinfo);
    }

    /**
     * {@inheritDoc}
     */
    public function removeInpatientinfo($inpatientinfo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeInpatientinfo', [$inpatientinfo]);

        return parent::removeInpatientinfo($inpatientinfo);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainEncounterNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainEncounterNames', []);

        return parent::obtainEncounterNames();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function addChildren($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChildren', [$child]);

        return parent::addChildren($child);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChildren($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChildren', [$child]);

        return parent::removeChildren($child);
    }

    /**
     * {@inheritDoc}
     */
    public function setChildren($children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildren', [$children]);

        return parent::setChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainFullObjectName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainFullObjectName', []);

        return parent::obtainFullObjectName();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainEncounterNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainEncounterNumber', []);

        return parent::obtainEncounterNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainLocationInfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainLocationInfo', []);

        return parent::obtainLocationInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainTrackerSpotsLocations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainTrackerSpotsLocations', []);

        return parent::obtainTrackerSpotsLocations();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainTrackerSpotsLocationId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainTrackerSpotsLocationId', []);

        return parent::obtainTrackerSpotsLocationId();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainReferringProviderInfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainReferringProviderInfo', []);

        return parent::obtainReferringProviderInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainAttendingPhysicianInfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainAttendingPhysicianInfo', []);

        return parent::obtainAttendingPhysicianInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function hasPatientInfo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasPatientInfo', []);

        return parent::hasPatientInfo();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainKeyField()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainKeyField', []);

        return parent::obtainKeyField();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainKeyFieldName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainKeyFieldName', []);

        return parent::obtainKeyFieldName();
    }

    /**
     * {@inheritDoc}
     */
    public function createKeyField()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createKeyField', []);

        return parent::createKeyField();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainNoprovidedKeyPrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainNoprovidedKeyPrefix', []);

        return parent::obtainNoprovidedKeyPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayFields', []);

        return parent::getArrayFields();
    }

    /**
     * {@inheritDoc}
     */
    public function cloneChildren($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneChildren', [$message]);

        return parent::cloneChildren($message);
    }

    /**
     * {@inheritDoc}
     */
    public function cloneDepend($depends, $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneDepend', [$depends, $parent]);

        return parent::cloneDepend($depends, $parent);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationdate', []);

        return parent::setCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationdate', []);

        return parent::getCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function addMessage(\Oleg\OrderformBundle\Entity\Message $message = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMessage', [$message]);

        return parent::addMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMessage(\Oleg\OrderformBundle\Entity\Message $message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMessage', [$message]);

        return parent::removeMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', []);

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function clearMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearMessage', []);

        return parent::clearMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider($provider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$provider]);

        return parent::setProvider($provider);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', [$source]);

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', []);

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setInstitution($institution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInstitution', [$institution]);

        return parent::setInstitution($institution);
    }

    /**
     * {@inheritDoc}
     */
    public function getInstitution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstitution', []);

        return parent::getInstitution();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentContainer($attachmentContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentContainer', [$attachmentContainer]);

        return parent::setAttachmentContainer($attachmentContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentContainer', []);

        return parent::getAttachmentContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setTracker($tracker)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTracker', [$tracker]);

        return parent::setTracker($tracker);
    }

    /**
     * {@inheritDoc}
     */
    public function getTracker()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTracker', []);

        return parent::getTracker();
    }

    /**
     * {@inheritDoc}
     */
    public function getTempSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempSource', []);

        return parent::getTempSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempSource($tempSource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempSource', [$tempSource]);

        return parent::setTempSource($tempSource);
    }

    /**
     * {@inheritDoc}
     */
    public function getTempUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempUser', []);

        return parent::getTempUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempUser($tempUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempUser', [$tempUser]);

        return parent::setTempUser($tempUser);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneChild($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneChild', [$child]);

        return parent::setOneChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function cleanEmptyArrayFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cleanEmptyArrayFields', []);

        return parent::cleanEmptyArrayFields();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainValidChild()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainValidChild', []);

        return parent::obtainValidChild();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainValidKeyfield()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainValidKeyfield', []);

        return parent::obtainValidKeyfield();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainAllKeyfield()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainAllKeyfield', []);

        return parent::obtainAllKeyfield();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusAllKeyfield($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusAllKeyfield', [$status]);

        return parent::setStatusAllKeyfield($status);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainArrayFieldNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainArrayFieldNames', []);

        return parent::obtainArrayFieldNames();
    }

    /**
     * {@inheritDoc}
     */
    public function filterArrayFields($user, $strict = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'filterArrayFields', [$user, $strict]);

        return parent::filterArrayFields($user, $strict);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainExistingFields($strict = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainExistingFields', [$strict]);

        return parent::obtainExistingFields($strict);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainValidField($fieldname, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainValidField', [$fieldname, $orderid]);

        return parent::obtainValidField($fieldname, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainStatusField($fieldname, $status, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainStatusField', [$fieldname, $status, $orderid]);

        return parent::obtainStatusField($fieldname, $status, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainStatusFieldArray($fieldname, $status, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainStatusFieldArray', [$fieldname, $status, $orderid]);

        return parent::obtainStatusFieldArray($fieldname, $status, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainStatusFieldArrayOrAll($fieldname, $status, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainStatusFieldArrayOrAll', [$fieldname, $status, $orderid]);

        return parent::obtainStatusFieldArrayOrAll($fieldname, $status, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainOneValidObject($fields, $asarray = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainOneValidObject', [$fields, $asarray]);

        return parent::obtainOneValidObject($fields, $asarray);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainClassName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainClassName', []);

        return parent::obtainClassName();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainFullClassName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainFullClassName', []);

        return parent::obtainFullClassName();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusAllFields($fields, $status, $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusAllFields', [$fields, $status, $user]);

        return parent::setStatusAllFields($fields, $status, $user);
    }

    /**
     * {@inheritDoc}
     */
    public function changeStatusAllFields($fields, $statusOld, $statusNew)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'changeStatusAllFields', [$fields, $statusOld, $statusNew]);

        return parent::changeStatusAllFields($fields, $statusOld, $statusNew);
    }

    /**
     * {@inheritDoc}
     */
    public function getHolderPatient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHolderPatient', []);

        return parent::getHolderPatient();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainChangeObjectArr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainChangeObjectArr', []);

        return parent::obtainChangeObjectArr();
    }

    /**
     * {@inheritDoc}
     */
    public function setChangeObjectArr($changeObjectArr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChangeObjectArr', [$changeObjectArr]);

        return parent::setChangeObjectArr($changeObjectArr);
    }

    /**
     * {@inheritDoc}
     */
    public function addChangeObjectArr($arr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChangeObjectArr', [$arr]);

        return parent::addChangeObjectArr($arr);
    }

    /**
     * {@inheritDoc}
     */
    public function array_merge_recursive_distinct_changed(array &$array1, array &$array2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'array_merge_recursive_distinct_changed', [$array1, $array2]);

        return parent::array_merge_recursive_distinct_changed($array1, $array2);
    }

    /**
     * {@inheritDoc}
     */
    public function array_merge_recursive_distinct(array &$array1, array &$array2, $unique = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'array_merge_recursive_distinct', [$array1, $array2, $unique]);

        return parent::array_merge_recursive_distinct($array1, $array2, $unique);
    }

    /**
     * {@inheritDoc}
     */
    public function array_merge_assoc($array1, $array2, $unique = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'array_merge_assoc', [$array1, $array2, $unique]);

        return parent::array_merge_assoc($array1, $array2, $unique);
    }

    /**
     * {@inheritDoc}
     */
    public function setArrayFieldObjectChange($fieldName, $action, $addedObject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArrayFieldObjectChange', [$fieldName, $action, $addedObject]);

        return parent::setArrayFieldObjectChange($fieldName, $action, $addedObject);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainChangeObjectStr($asArr = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainChangeObjectStr', [$asArr]);

        return parent::obtainChangeObjectStr($asArr);
    }

    /**
     * {@inheritDoc}
     */
    public function var_dump_ret($mixed = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'var_dump_ret', [$mixed]);

        return parent::var_dump_ret($mixed);
    }

    /**
     * {@inheritDoc}
     */
    public function addContactinfoByTypeAndName($user, $system, $locationType = NULL, $locationName = NULL, $spotEntity = NULL, $withdummyfields = false, $em = NULL, $removable = 1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addContactinfoByTypeAndName', [$user, $system, $locationType, $locationName, $spotEntity, $withdummyfields, $em, $removable]);

        return parent::addContactinfoByTypeAndName($user, $system, $locationType, $locationName, $spotEntity, $withdummyfields, $em, $removable);
    }

}
