<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserPreferences extends \Oleg\UserdirectoryBundle\Entity\UserPreferences implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'user', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'timezone', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'languages', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'locale', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'excludeFromSearch', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'hide', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'showToInstitutions', 'showToRoles', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'noAttendingEmail', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'lifeForm'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'user', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'timezone', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'languages', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'locale', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'excludeFromSearch', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'hide', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'showToInstitutions', 'showToRoles', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'noAttendingEmail', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\UserPreferences' . "\0" . 'lifeForm'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserPreferences $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimezone($timezone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimezone', [$timezone]);

        return parent::setTimezone($timezone);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimezone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimezone', []);

        return parent::getTimezone();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function addLanguage($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLanguage', [$item]);

        return parent::addLanguage($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLanguage($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLanguage', [$item]);

        return parent::removeLanguage($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguages', []);

        return parent::getLanguages();
    }

    /**
     * {@inheritDoc}
     */
    public function addShowToInstitution($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addShowToInstitution', [$item]);

        return parent::addShowToInstitution($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeShowToInstitution($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeShowToInstitution', [$item]);

        return parent::removeShowToInstitution($item);
    }

    /**
     * {@inheritDoc}
     */
    public function getShowToInstitutions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowToInstitutions', []);

        return parent::getShowToInstitutions();
    }

    /**
     * {@inheritDoc}
     */
    public function getShowToRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowToRoles', []);

        return parent::getShowToRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addShowToRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addShowToRole', [$role]);

        return parent::addShowToRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function removeShowToRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeShowToRole', [$role]);

        return parent::removeShowToRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function setShowToRoles($roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShowToRoles', [$roles]);

        return parent::setShowToRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function setHide($hide)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHide', [$hide]);

        return parent::setHide($hide);
    }

    /**
     * {@inheritDoc}
     */
    public function getHide()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHide', []);

        return parent::getHide();
    }

    /**
     * {@inheritDoc}
     */
    public function setExcludeFromSearch($excludeFromSearch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExcludeFromSearch', [$excludeFromSearch]);

        return parent::setExcludeFromSearch($excludeFromSearch);
    }

    /**
     * {@inheritDoc}
     */
    public function getExcludeFromSearch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExcludeFromSearch', []);

        return parent::getExcludeFromSearch();
    }

    /**
     * {@inheritDoc}
     */
    public function getNoAttendingEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNoAttendingEmail', []);

        return parent::getNoAttendingEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setNoAttendingEmail($noAttendingEmail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNoAttendingEmail', [$noAttendingEmail]);

        return parent::setNoAttendingEmail($noAttendingEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function getLifeForm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLifeForm', []);

        return parent::getLifeForm();
    }

    /**
     * {@inheritDoc}
     */
    public function setLifeForm($lifeForm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLifeForm', [$lifeForm]);

        return parent::setLifeForm($lifeForm);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
