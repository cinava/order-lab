<?php

namespace Proxies\__CG__\Oleg\OrderformBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class History extends \Oleg\OrderformBundle\Entity\History implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'id', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'currentid', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'changedate', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'provider', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'currentstatus', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'roles', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'note', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'selectednote', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'viewed', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'vieweddate', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'eventtype', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'message'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'id', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'currentid', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'changedate', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'provider', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'currentstatus', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'roles', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'note', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'selectednote', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'viewed', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'vieweddate', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'eventtype', '' . "\0" . 'Oleg\\OrderformBundle\\Entity\\History' . "\0" . 'message'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (History $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles($roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function hasProviderRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasProviderRole', [$role]);

        return parent::hasProviderRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function setChangedate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChangedate', []);

        return parent::setChangedate();
    }

    /**
     * {@inheritDoc}
     */
    public function getChangedate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChangedate', []);

        return parent::getChangedate();
    }

    /**
     * {@inheritDoc}
     */
    public function setNote($note)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNote', [$note]);

        return parent::setNote($note);
    }

    /**
     * {@inheritDoc}
     */
    public function getNote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNote', []);

        return parent::getNote();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentstatus($currentstatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentstatus', [$currentstatus]);

        return parent::setCurrentstatus($currentstatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentstatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentstatus', []);

        return parent::getCurrentstatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider($provider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$provider]);

        return parent::setProvider($provider);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentid($currentid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentid', [$currentid]);

        return parent::setCurrentid($currentid);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentid', []);

        return parent::getCurrentid();
    }

    /**
     * {@inheritDoc}
     */
    public function setViewed($viewed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViewed', [$viewed]);

        return parent::setViewed($viewed);
    }

    /**
     * {@inheritDoc}
     */
    public function getViewed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViewed', []);

        return parent::getViewed();
    }

    /**
     * {@inheritDoc}
     */
    public function setVieweddate($vieweddate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVieweddate', [$vieweddate]);

        return parent::setVieweddate($vieweddate);
    }

    /**
     * {@inheritDoc}
     */
    public function getVieweddate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVieweddate', []);

        return parent::getVieweddate();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($order)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', [$order]);

        return parent::setMessage($order);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', []);

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setSelectednote($selectednote)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSelectednote', [$selectednote]);

        return parent::setSelectednote($selectednote);
    }

    /**
     * {@inheritDoc}
     */
    public function getSelectednote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSelectednote', []);

        return parent::getSelectednote();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventtype($eventtype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventtype', [$eventtype]);

        return parent::setEventtype($eventtype);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventtype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventtype', []);

        return parent::getEventtype();
    }

}
