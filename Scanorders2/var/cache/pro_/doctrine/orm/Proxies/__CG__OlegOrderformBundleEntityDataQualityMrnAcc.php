<?php

namespace Proxies\__CG__\Oleg\OrderformBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DataQualityMrnAcc extends \Oleg\OrderformBundle\Entity\DataQualityMrnAcc implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'message', 'accession', 'accessiontype', 'newaccession', 'newaccessiontype', 'mrn', 'mrntype', 'description', 'status', 'provider'];
        }

        return ['__isInitialized__', 'message', 'accession', 'accessiontype', 'newaccession', 'newaccessiontype', 'mrn', 'mrntype', 'description', 'status', 'provider'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DataQualityMrnAcc $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setMessage($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', [$message]);

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', []);

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccession($accession)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccession', [$accession]);

        return parent::setAccession($accession);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccession()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccession', []);

        return parent::getAccession();
    }

    /**
     * {@inheritDoc}
     */
    public function setMrn($mrn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMrn', [$mrn]);

        return parent::setMrn($mrn);
    }

    /**
     * {@inheritDoc}
     */
    public function getMrn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMrn', []);

        return parent::getMrn();
    }

    /**
     * {@inheritDoc}
     */
    public function setMrntype($mrntype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMrntype', [$mrntype]);

        return parent::setMrntype($mrntype);
    }

    /**
     * {@inheritDoc}
     */
    public function getMrntype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMrntype', []);

        return parent::getMrntype();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewaccession($newaccession)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewaccession', [$newaccession]);

        return parent::setNewaccession($newaccession);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewaccession()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewaccession', []);

        return parent::getNewaccession();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessiontype($accessiontype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessiontype', [$accessiontype]);

        return parent::setAccessiontype($accessiontype);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessiontype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessiontype', []);

        return parent::getAccessiontype();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewaccessiontype($newaccessiontype)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewaccessiontype', [$newaccessiontype]);

        return parent::setNewaccessiontype($newaccessiontype);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewaccessiontype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewaccessiontype', []);

        return parent::getNewaccessiontype();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationdate', []);

        return parent::setCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationdate', []);

        return parent::getCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider($provider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$provider]);

        return parent::setProvider($provider);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setResolver($resolver)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResolver', [$resolver]);

        return parent::setResolver($resolver);
    }

    /**
     * {@inheritDoc}
     */
    public function getResolver()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResolver', []);

        return parent::getResolver();
    }

    /**
     * {@inheritDoc}
     */
    public function setResolvedate($resolvedate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResolvedate', [$resolvedate]);

        return parent::setResolvedate($resolvedate);
    }

    /**
     * {@inheritDoc}
     */
    public function getResolvedate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResolvedate', []);

        return parent::getResolvedate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

}
