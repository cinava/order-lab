<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Logger extends \Oleg\UserdirectoryBundle\Entity\Logger implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'siteName', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'site', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'creationdate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'user', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'roles', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'username', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'ip', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'useragent', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'width', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'height', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'eventType', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'event', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'serverresponse', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'entityNamespace', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'entityName', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'objectType', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'entityId', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'institutionTrees'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'siteName', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'site', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'creationdate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'user', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'roles', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'username', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'ip', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'useragent', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'width', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'height', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'eventType', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'event', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'serverresponse', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'entityNamespace', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'entityName', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'objectType', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'entityId', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Logger' . "\0" . 'institutionTrees'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Logger $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSiteName($siteName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSiteName', [$siteName]);

        return parent::setSiteName($siteName);
    }

    /**
     * {@inheritDoc}
     */
    public function getSiteName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSiteName', []);

        return parent::getSiteName();
    }

    /**
     * {@inheritDoc}
     */
    public function getSite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSite', []);

        return parent::getSite();
    }

    /**
     * {@inheritDoc}
     */
    public function setSite($site)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSite', [$site]);

        return parent::setSite($site);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationdate', []);

        return parent::setCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationdate', []);

        return parent::getCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvent($event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvent', [$event]);

        return parent::setEvent($event);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvent', []);

        return parent::getEvent();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventType($eventType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventType', [$eventType]);

        return parent::setEventType($eventType);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventType', []);

        return parent::getEventType();
    }

    /**
     * {@inheritDoc}
     */
    public function setHeight($height)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHeight', [$height]);

        return parent::setHeight($height);
    }

    /**
     * {@inheritDoc}
     */
    public function getHeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHeight', []);

        return parent::getHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setIp($ip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIp', [$ip]);

        return parent::setIp($ip);
    }

    /**
     * {@inheritDoc}
     */
    public function getIp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIp', []);

        return parent::getIp();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles($roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$role]);

        return parent::hasRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function setUseragent($useragent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUseragent', [$useragent]);

        return parent::setUseragent($useragent);
    }

    /**
     * {@inheritDoc}
     */
    public function getUseragent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUseragent', []);

        return parent::getUseragent();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', [$username]);

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setWidth($width)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidth', [$width]);

        return parent::setWidth($width);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidth', []);

        return parent::getWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function setServerresponse($serverresponse)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setServerresponse', [$serverresponse]);

        return parent::setServerresponse($serverresponse);
    }

    /**
     * {@inheritDoc}
     */
    public function getServerresponse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServerresponse', []);

        return parent::getServerresponse();
    }

    /**
     * {@inheritDoc}
     */
    public function addEvent($newEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEvent', [$newEvent]);

        return parent::addEvent($newEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityNamespace($entityNamespace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityNamespace', [$entityNamespace]);

        return parent::setEntityNamespace($entityNamespace);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityNamespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityNamespace', []);

        return parent::getEntityNamespace();
    }

    /**
     * {@inheritDoc}
     */
    public function getObjectType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjectType', []);

        return parent::getObjectType();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjectType($objectType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjectType', [$objectType]);

        return parent::setObjectType($objectType);
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityId($entityId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityId', [$entityId]);

        return parent::setEntityId($entityId);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityId', []);

        return parent::getEntityId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityName($entityName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityName', [$entityName]);

        return parent::setEntityName($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', []);

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function getInstitutionTrees()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstitutionTrees', []);

        return parent::getInstitutionTrees();
    }

    /**
     * {@inheritDoc}
     */
    public function addInstitutionTree($tree)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addInstitutionTree', [$tree]);

        return parent::addInstitutionTree($tree);
    }

    /**
     * {@inheritDoc}
     */
    public function removeInstitutionTree($tree)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeInstitutionTree', [$tree]);

        return parent::removeInstitutionTree($tree);
    }

    /**
     * {@inheritDoc}
     */
    public function getInstitutionTreesByType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstitutionTreesByType', [$type]);

        return parent::getInstitutionTreesByType($type);
    }

}
