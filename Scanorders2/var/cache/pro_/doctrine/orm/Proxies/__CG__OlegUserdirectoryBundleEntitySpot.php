<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Spot extends \Oleg\UserdirectoryBundle\Entity\Spot implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'tracker', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'source', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'creation', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'spottedOn', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'updatedOn', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'author', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'updatedBy', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'spotPurpose', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'currentLocation', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'intendedLocation'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'tracker', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'source', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'creation', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'spottedOn', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'updatedOn', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'author', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'updatedBy', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'spotPurpose', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'currentLocation', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Spot' . "\0" . 'intendedLocation'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Spot $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedOn', []);

        return parent::setUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedOn', []);

        return parent::getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy($updatedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreation($creation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreation', [$creation]);

        return parent::setCreation($creation);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreation', []);

        return parent::getCreation();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpottedOn($spottedOn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpottedOn', [$spottedOn]);

        return parent::setSpottedOn($spottedOn);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpottedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpottedOn', []);

        return parent::getSpottedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentLocation($currentLocation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentLocation', [$currentLocation]);

        return parent::setCurrentLocation($currentLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentLocation', []);

        return parent::getCurrentLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setIntendedLocation($intendedLocation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIntendedLocation', [$intendedLocation]);

        return parent::setIntendedLocation($intendedLocation);
    }

    /**
     * {@inheritDoc}
     */
    public function getIntendedLocation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIntendedLocation', []);

        return parent::getIntendedLocation();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpotPurpose($spotPurpose)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpotPurpose', [$spotPurpose]);

        return parent::setSpotPurpose($spotPurpose);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpotPurpose()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpotPurpose', []);

        return parent::getSpotPurpose();
    }

    /**
     * {@inheritDoc}
     */
    public function setTracker($tracker)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTracker', [$tracker]);

        return parent::setTracker($tracker);
    }

    /**
     * {@inheritDoc}
     */
    public function getTracker()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTracker', []);

        return parent::getTracker();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', [$source]);

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', []);

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

}
