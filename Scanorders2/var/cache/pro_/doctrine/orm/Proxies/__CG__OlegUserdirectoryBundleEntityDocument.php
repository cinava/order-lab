<?php

namespace Proxies\__CG__\Oleg\UserdirectoryBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Document extends \Oleg\UserdirectoryBundle\Entity\Document implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'originalname', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'uniquename', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'uploadDirectory', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'size', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'file', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'type', 'creator', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'createdate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'title', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'uniqueid', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'entityNamespace', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'entityName', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'entityId'];
        }

        return ['__isInitialized__', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'id', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'originalname', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'uniquename', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'uploadDirectory', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'size', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'file', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'type', 'creator', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'createdate', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'title', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'uniqueid', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'entityNamespace', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'entityName', '' . "\0" . 'Oleg\\UserdirectoryBundle\\Entity\\Document' . "\0" . 'entityId'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Document $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile($file)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', [$file]);

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', []);

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function setOriginalname($originalname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOriginalname', [$originalname]);

        return parent::setOriginalname($originalname);
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalname', []);

        return parent::getOriginalname();
    }

    /**
     * {@inheritDoc}
     */
    public function setUniquename($uniquename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUniquename', [$uniquename]);

        return parent::setUniquename($uniquename);
    }

    /**
     * {@inheritDoc}
     */
    public function getUniquename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniquename', []);

        return parent::getUniquename();
    }

    /**
     * {@inheritDoc}
     */
    public function setSize($size)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSize', [$size]);

        return parent::setSize($size);
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', []);

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setUniqueid($uniqueid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUniqueid', [$uniqueid]);

        return parent::setUniqueid($uniqueid);
    }

    /**
     * {@inheritDoc}
     */
    public function getUniqueid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUniqueid', []);

        return parent::getUniqueid();
    }

    /**
     * {@inheritDoc}
     */
    public function setUploadDirectory($uploadDirectory)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUploadDirectory', [$uploadDirectory]);

        return parent::setUploadDirectory($uploadDirectory);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploadDirectory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploadDirectory', []);

        return parent::getUploadDirectory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedate', [$date]);

        return parent::setCreatedate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedate', []);

        return parent::getCreatedate();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreator($creator)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreator', [$creator]);

        return parent::setCreator($creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreator', []);

        return parent::getCreator();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityNamespace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityNamespace', []);

        return parent::getEntityNamespace();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityNamespace($entityNamespace)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityNamespace', [$entityNamespace]);

        return parent::setEntityNamespace($entityNamespace);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityName', []);

        return parent::getEntityName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityName($entityName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityName', [$entityName]);

        return parent::setEntityName($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityId', []);

        return parent::getEntityId();
    }

    /**
     * {@inheritDoc}
     */
    public function setEntityId($entityId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEntityId', [$entityId]);

        return parent::setEntityId($entityId);
    }

    /**
     * {@inheritDoc}
     */
    public function isOrphan()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isOrphan', []);

        return parent::isOrphan();
    }

    /**
     * {@inheritDoc}
     */
    public function createUseObject($object)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createUseObject', [$object]);

        return parent::createUseObject($object);
    }

    /**
     * {@inheritDoc}
     */
    public function setObject($object)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObject', [$object]);

        return parent::setObject($object);
    }

    /**
     * {@inheritDoc}
     */
    public function clearUseObject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearUseObject', []);

        return parent::clearUseObject();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getServerPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServerPath', []);

        return parent::getServerPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullServerPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullServerPath', []);

        return parent::getFullServerPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbsoluteUploadFullPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsoluteUploadFullPath', []);

        return parent::getAbsoluteUploadFullPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getRelativeUploadFullPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelativeUploadFullPath', []);

        return parent::getRelativeUploadFullPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getFileSystemPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileSystemPath', []);

        return parent::getFileSystemPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getSizeStr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSizeStr', []);

        return parent::getSizeStr();
    }

    /**
     * {@inheritDoc}
     */
    public function Size($size)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'Size', [$size]);

        return parent::Size($size);
    }

    /**
     * {@inheritDoc}
     */
    public function getWidthByHeight($newHeight)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidthByHeight', [$newHeight]);

        return parent::getWidthByHeight($newHeight);
    }

    /**
     * {@inheritDoc}
     */
    public function getFullDescriptionStr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullDescriptionStr', []);

        return parent::getFullDescriptionStr();
    }

    /**
     * {@inheritDoc}
     */
    public function getOriginalnameClean()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOriginalnameClean', []);

        return parent::getOriginalnameClean();
    }

    /**
     * {@inheritDoc}
     */
    public function setCleanOriginalname($filename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCleanOriginalname', [$filename]);

        return parent::setCleanOriginalname($filename);
    }

    /**
     * {@inheritDoc}
     */
    public function cleanFileName($filename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cleanFileName', [$filename]);

        return parent::cleanFileName($filename);
    }

}
