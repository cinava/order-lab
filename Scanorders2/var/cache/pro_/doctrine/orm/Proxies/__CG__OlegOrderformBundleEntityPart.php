<?php

namespace Proxies\__CG__\Oleg\OrderformBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Part extends \Oleg\OrderformBundle\Entity\Part implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'accession', 'partname', 'parttitle', 'sourceOrgan', 'description', 'disident', 'paper', 'diffDisident', 'diseaseType', 'block', 'message', 'slide', 'id', 'status', 'creationdate', 'provider', 'source', 'institution', 'attachmentContainer', 'tracker', 'changeObjectArr', 'tempSource', 'tempUser'];
        }

        return ['__isInitialized__', 'accession', 'partname', 'parttitle', 'sourceOrgan', 'description', 'disident', 'paper', 'diffDisident', 'diseaseType', 'block', 'message', 'slide', 'id', 'status', 'creationdate', 'provider', 'source', 'institution', 'attachmentContainer', 'tracker', 'changeObjectArr', 'tempSource', 'tempUser'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Part $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function makeDependClone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'makeDependClone', []);

        return parent::makeDependClone();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getAccession()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccession', []);

        return parent::getAccession();
    }

    /**
     * {@inheritDoc}
     */
    public function getPartname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPartname', []);

        return parent::getPartname();
    }

    /**
     * {@inheritDoc}
     */
    public function getSourceOrgan()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSourceOrgan', []);

        return parent::getSourceOrgan();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getDiseaseType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiseaseType', []);

        return parent::getDiseaseType();
    }

    /**
     * {@inheritDoc}
     */
    public function setDiseaseType($diseaseType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDiseaseType', [$diseaseType]);

        return parent::setDiseaseType($diseaseType);
    }

    /**
     * {@inheritDoc}
     */
    public function addDiseaseType($diseaseType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDiseaseType', [$diseaseType]);

        return parent::addDiseaseType($diseaseType);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDiseaseType($diseaseType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDiseaseType', [$diseaseType]);

        return parent::removeDiseaseType($diseaseType);
    }

    /**
     * {@inheritDoc}
     */
    public function setAccession(\Oleg\OrderformBundle\Entity\Accession $accession = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccession', [$accession]);

        return parent::setAccession($accession);
    }

    /**
     * {@inheritDoc}
     */
    public function setPartname($partname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPartname', [$partname]);

        return parent::setPartname($partname);
    }

    /**
     * {@inheritDoc}
     */
    public function addPartname($partname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPartname', [$partname]);

        return parent::addPartname($partname);
    }

    /**
     * {@inheritDoc}
     */
    public function removePartname($partname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePartname', [$partname]);

        return parent::removePartname($partname);
    }

    /**
     * {@inheritDoc}
     */
    public function clearPartname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearPartname', []);

        return parent::clearPartname();
    }

    /**
     * {@inheritDoc}
     */
    public function getParttitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParttitle', []);

        return parent::getParttitle();
    }

    /**
     * {@inheritDoc}
     */
    public function addParttitle($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addParttitle', [$item]);

        return parent::addParttitle($item);
    }

    /**
     * {@inheritDoc}
     */
    public function removeParttitle($item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeParttitle', [$item]);

        return parent::removeParttitle($item);
    }

    /**
     * {@inheritDoc}
     */
    public function setSourceOrgan($sourceOrgan)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSourceOrgan', [$sourceOrgan]);

        return parent::setSourceOrgan($sourceOrgan);
    }

    /**
     * {@inheritDoc}
     */
    public function addSourceOrgan($sourceOrgan)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSourceOrgan', [$sourceOrgan]);

        return parent::addSourceOrgan($sourceOrgan);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSourceOrgan($sourceOrgan)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSourceOrgan', [$sourceOrgan]);

        return parent::removeSourceOrgan($sourceOrgan);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function addDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDescription', [$description]);

        return parent::addDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDescription', [$description]);

        return parent::removeDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function addBlock(\Oleg\OrderformBundle\Entity\Block $block)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBlock', [$block]);

        return parent::addBlock($block);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBlock(\Oleg\OrderformBundle\Entity\Block $block)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBlock', [$block]);

        return parent::removeBlock($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlock', []);

        return parent::getBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlock(\Doctrine\Common\Collections\ArrayCollection $block)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlock', [$block]);

        return parent::setBlock($block);
    }

    /**
     * {@inheritDoc}
     */
    public function clearBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearBlock', []);

        return parent::clearBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setDiffDisident($diffDisident)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDiffDisident', [$diffDisident]);

        return parent::setDiffDisident($diffDisident);
    }

    /**
     * {@inheritDoc}
     */
    public function adddiffDisident($diffDisident)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'adddiffDisident', [$diffDisident]);

        return parent::adddiffDisident($diffDisident);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDiffDisident($diffDisident)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDiffDisident', [$diffDisident]);

        return parent::removeDiffDisident($diffDisident);
    }

    /**
     * {@inheritDoc}
     */
    public function getDiffDisident()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDiffDisident', []);

        return parent::getDiffDisident();
    }

    /**
     * {@inheritDoc}
     */
    public function cleanEmptyArrayFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cleanEmptyArrayFields', []);

        return parent::cleanEmptyArrayFields();
    }

    /**
     * {@inheritDoc}
     */
    public function createEmptyArrayFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createEmptyArrayFields', []);

        return parent::createEmptyArrayFields();
    }

    /**
     * {@inheritDoc}
     */
    public function addPaper($paper)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPaper', [$paper]);

        return parent::addPaper($paper);
    }

    /**
     * {@inheritDoc}
     */
    public function removePaper($paper)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePaper', [$paper]);

        return parent::removePaper($paper);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaper()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaper', []);

        return parent::getPaper();
    }

    /**
     * {@inheritDoc}
     */
    public function getDisident()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisident', []);

        return parent::getDisident();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisident($disident)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisident', [$disident]);

        return parent::setDisident($disident);
    }

    /**
     * {@inheritDoc}
     */
    public function addDisident($disident)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDisident', [$disident]);

        return parent::addDisident($disident);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDisident($disident)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDisident', [$disident]);

        return parent::removeDisident($disident);
    }

    /**
     * {@inheritDoc}
     */
    public function addSlide(\Oleg\OrderformBundle\Entity\Slide $slide)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSlide', [$slide]);

        return parent::addSlide($slide);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSlide(\Oleg\OrderformBundle\Entity\Slide $slide)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSlide', [$slide]);

        return parent::removeSlide($slide);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlide()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlide', []);

        return parent::getSlide();
    }

    /**
     * {@inheritDoc}
     */
    public function clearSlide()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearSlide', []);

        return parent::clearSlide();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlide($slide)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlide', [$slide]);

        return parent::setSlide($slide);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function addChildren($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChildren', [$child]);

        return parent::addChildren($child);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChildren($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChildren', [$child]);

        return parent::removeChildren($child);
    }

    /**
     * {@inheritDoc}
     */
    public function setChildren($children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildren', [$children]);

        return parent::setChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainFullObjectName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainFullObjectName', []);

        return parent::obtainFullObjectName();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainKeyField()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainKeyField', []);

        return parent::obtainKeyField();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainKeyFieldName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainKeyFieldName', []);

        return parent::obtainKeyFieldName();
    }

    /**
     * {@inheritDoc}
     */
    public function createKeyField()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createKeyField', []);

        return parent::createKeyField();
    }

    /**
     * {@inheritDoc}
     */
    public function getArrayFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArrayFields', []);

        return parent::getArrayFields();
    }

    /**
     * {@inheritDoc}
     */
    public function cloneChildren($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneChildren', [$message]);

        return parent::cloneChildren($message);
    }

    /**
     * {@inheritDoc}
     */
    public function cloneDepend($depends, $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cloneDepend', [$depends, $parent]);

        return parent::cloneDepend($depends, $parent);
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationdate', []);

        return parent::setCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationdate', []);

        return parent::getCreationdate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function addMessage(\Oleg\OrderformBundle\Entity\Message $message = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMessage', [$message]);

        return parent::addMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMessage(\Oleg\OrderformBundle\Entity\Message $message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMessage', [$message]);

        return parent::removeMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', []);

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function clearMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearMessage', []);

        return parent::clearMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider($provider)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$provider]);

        return parent::setProvider($provider);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', [$source]);

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', []);

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setInstitution($institution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInstitution', [$institution]);

        return parent::setInstitution($institution);
    }

    /**
     * {@inheritDoc}
     */
    public function getInstitution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInstitution', []);

        return parent::getInstitution();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachmentContainer($attachmentContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachmentContainer', [$attachmentContainer]);

        return parent::setAttachmentContainer($attachmentContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachmentContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachmentContainer', []);

        return parent::getAttachmentContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setTracker($tracker)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTracker', [$tracker]);

        return parent::setTracker($tracker);
    }

    /**
     * {@inheritDoc}
     */
    public function getTracker()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTracker', []);

        return parent::getTracker();
    }

    /**
     * {@inheritDoc}
     */
    public function getTempSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempSource', []);

        return parent::getTempSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempSource($tempSource)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempSource', [$tempSource]);

        return parent::setTempSource($tempSource);
    }

    /**
     * {@inheritDoc}
     */
    public function getTempUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTempUser', []);

        return parent::getTempUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setTempUser($tempUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTempUser', [$tempUser]);

        return parent::setTempUser($tempUser);
    }

    /**
     * {@inheritDoc}
     */
    public function setOneChild($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneChild', [$child]);

        return parent::setOneChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainValidChild()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainValidChild', []);

        return parent::obtainValidChild();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainValidKeyfield()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainValidKeyfield', []);

        return parent::obtainValidKeyfield();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainAllKeyfield()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainAllKeyfield', []);

        return parent::obtainAllKeyfield();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusAllKeyfield($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusAllKeyfield', [$status]);

        return parent::setStatusAllKeyfield($status);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainArrayFieldNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainArrayFieldNames', []);

        return parent::obtainArrayFieldNames();
    }

    /**
     * {@inheritDoc}
     */
    public function filterArrayFields($user, $strict = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'filterArrayFields', [$user, $strict]);

        return parent::filterArrayFields($user, $strict);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainExistingFields($strict = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainExistingFields', [$strict]);

        return parent::obtainExistingFields($strict);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainValidField($fieldname, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainValidField', [$fieldname, $orderid]);

        return parent::obtainValidField($fieldname, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainStatusField($fieldname, $status, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainStatusField', [$fieldname, $status, $orderid]);

        return parent::obtainStatusField($fieldname, $status, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainStatusFieldArray($fieldname, $status, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainStatusFieldArray', [$fieldname, $status, $orderid]);

        return parent::obtainStatusFieldArray($fieldname, $status, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainStatusFieldArrayOrAll($fieldname, $status, $orderid = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainStatusFieldArrayOrAll', [$fieldname, $status, $orderid]);

        return parent::obtainStatusFieldArrayOrAll($fieldname, $status, $orderid);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainOneValidObject($fields, $asarray = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainOneValidObject', [$fields, $asarray]);

        return parent::obtainOneValidObject($fields, $asarray);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainClassName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainClassName', []);

        return parent::obtainClassName();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainFullClassName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainFullClassName', []);

        return parent::obtainFullClassName();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainNoprovidedKeyPrefix()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainNoprovidedKeyPrefix', []);

        return parent::obtainNoprovidedKeyPrefix();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusAllFields($fields, $status, $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusAllFields', [$fields, $status, $user]);

        return parent::setStatusAllFields($fields, $status, $user);
    }

    /**
     * {@inheritDoc}
     */
    public function changeStatusAllFields($fields, $statusOld, $statusNew)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'changeStatusAllFields', [$fields, $statusOld, $statusNew]);

        return parent::changeStatusAllFields($fields, $statusOld, $statusNew);
    }

    /**
     * {@inheritDoc}
     */
    public function getHolderPatient()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHolderPatient', []);

        return parent::getHolderPatient();
    }

    /**
     * {@inheritDoc}
     */
    public function obtainChangeObjectArr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainChangeObjectArr', []);

        return parent::obtainChangeObjectArr();
    }

    /**
     * {@inheritDoc}
     */
    public function setChangeObjectArr($changeObjectArr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChangeObjectArr', [$changeObjectArr]);

        return parent::setChangeObjectArr($changeObjectArr);
    }

    /**
     * {@inheritDoc}
     */
    public function addChangeObjectArr($arr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChangeObjectArr', [$arr]);

        return parent::addChangeObjectArr($arr);
    }

    /**
     * {@inheritDoc}
     */
    public function array_merge_recursive_distinct_changed(array &$array1, array &$array2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'array_merge_recursive_distinct_changed', [$array1, $array2]);

        return parent::array_merge_recursive_distinct_changed($array1, $array2);
    }

    /**
     * {@inheritDoc}
     */
    public function array_merge_recursive_distinct(array &$array1, array &$array2, $unique = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'array_merge_recursive_distinct', [$array1, $array2, $unique]);

        return parent::array_merge_recursive_distinct($array1, $array2, $unique);
    }

    /**
     * {@inheritDoc}
     */
    public function array_merge_assoc($array1, $array2, $unique = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'array_merge_assoc', [$array1, $array2, $unique]);

        return parent::array_merge_assoc($array1, $array2, $unique);
    }

    /**
     * {@inheritDoc}
     */
    public function setArrayFieldObjectChange($fieldName, $action, $addedObject)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArrayFieldObjectChange', [$fieldName, $action, $addedObject]);

        return parent::setArrayFieldObjectChange($fieldName, $action, $addedObject);
    }

    /**
     * {@inheritDoc}
     */
    public function obtainChangeObjectStr($asArr = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'obtainChangeObjectStr', [$asArr]);

        return parent::obtainChangeObjectStr($asArr);
    }

    /**
     * {@inheritDoc}
     */
    public function var_dump_ret($mixed = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'var_dump_ret', [$mixed]);

        return parent::var_dump_ret($mixed);
    }

    /**
     * {@inheritDoc}
     */
    public function addContactinfoByTypeAndName($user, $system, $locationType = NULL, $locationName = NULL, $spotEntity = NULL, $withdummyfields = false, $em = NULL, $removable = 1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addContactinfoByTypeAndName', [$user, $system, $locationType, $locationName, $spotEntity, $withdummyfields, $em, $removable]);

        return parent::addContactinfoByTypeAndName($user, $system, $locationType, $locationName, $spotEntity, $withdummyfields, $em, $removable);
    }

}
