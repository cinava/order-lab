<?php
/**
 * Copyright (c) 2017 Cornell University
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Oleg\CallLogBundle\Form;

use Doctrine\ORM\EntityRepository;
//use Oleg\CallLogBundle\Form\EncounterType;
use Oleg\OrderformBundle\Form\CustomType\ScanCustomSelectorType;
use Oleg\OrderformBundle\Form\GenericFieldType;
use Oleg\OrderformBundle\Form\PatientDobType;
use Oleg\OrderformBundle\Form\PatientSexType;
use Oleg\UserdirectoryBundle\Form\TrackerType;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
//use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormEvent;

class CalllogSinglePatientType extends AbstractType
{

    protected $params;

    public function formConstructor( $params=null )
    {
        $this->params = $params;
    }
    
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->formConstructor($options['form_custom_value']);

//        $builder->add('id', HiddenType::class, array(
//            'label' => false,
//            'required' => false,
//            'attr' => array('class' => 'form-control patienttype-patient-id', 'type' => 'hidden'),
//        ));

//        $builder->add('keytype', EntityType::class, array(
//            'class' => 'OlegOrderformBundle:MrnType',
//            'label' => "MRN Type:",
//            'required' => false,
//            //'attr' => array('class' => 'ajax-combobox combobox mrntype-combobox mrntype-exception-existingautogenerated'),
//            'attr' => array('class' => 'combobox'),
//            'query_builder' => function(EntityRepository $er) {
//                return $er->createQueryBuilder('list')
//                    ->where("list.type = :typedef OR list.type = :typeadd")
//                    ->orderBy("list.orderinlist","ASC")
//                    ->setParameters( array(
//                        'typedef' => 'default',
//                        'typeadd' => 'user-added',
//                    ));
//            },
//        ));
        $builder->add('keytype', ChoiceType::class, array(
            'choices' => $this->params['keytypes'],
            'label' => "MRN Type:",
            'required' => true,
            //'required' => false,
            'attr' => array('class' => 'combobox'),
        ));

        $builder->add('mrn', TextType::class, array(
            'required' => true,
            'label' => "MRN:",
            'attr' => array('class' => 'form-control'),
        ));

        $builder->add('dob', DateType::class, array(
            'label' => "DOB:",
            'widget' => 'single_text',
            'required' => false,
            'format' => 'MM/dd/yyyy',   //used for birth day only (no hours), so we don't need to set view_timezone
            'attr' => array('class' => 'datepicker form-control patient-dob-date'),
        ));

        $builder->add('lastname', TextType::class, array(
            'required' => false,
            'label' => "Last Name:",
            'attr' => array('class' => 'form-control'),
        ));

        $builder->add('firstname', TextType::class, array(
            'required' => false,
            'label' => "First Name:",
            'attr' => array('class' => 'form-control'),
        ));

        $builder->add('middlename', TextType::class, array(
            'required' => false,
            'label' => "Middle Name:",
            'attr' => array('class' => 'form-control'),
        ));

        $builder->add('suffix', TextType::class, array(
            'required' => false,
            'label' => "Suffix:",
            'attr' => array('class' => 'form-control'),
        ));

//        $builder->add('gender', EntityType::class, array(
//            'class' => 'Oleg\UserdirectoryBundle\Entity\SexList',
//            'label' => "Gender:",
//            'required' => false,
//            'choice_label' => 'name',
//            //'attr' => array('class' => 'ajax-combobox combobox mrntype-combobox mrntype-exception-existingautogenerated'),
//            'attr' => array('class' => 'combobox'),
//            'query_builder' => function(EntityRepository $er) {
//                return $er->createQueryBuilder('list')
//                    ->where("list.type = :typedef OR list.type = :typeadd")
//                    ->orderBy("list.orderinlist","ASC")
//                    ->setParameters( array(
//                        'typedef' => 'default',
//                        'typeadd' => 'user-added',
//                    ));
//            },
//        ));
        $builder->add('gender', ChoiceType::class, array(
            'choices' => $this->params['genders'],
            'label' => "Gender:",
            'required' => false,
            'attr' => array('class' => 'combobox'),
        ));

        if ($this->params['update']) {
            $builder->add('update', SubmitType::class, array(
                'label' => 'Update',
                'attr' => array('class' => 'btn btn-warning')
            ));
        }


    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => 'Oleg\CallLogBundle\Entity\SinglePatient',
            'form_custom_value' => null,
            //'csrf_protection' => false
        ));
    }

    public function getBlockPrefix()
    {
        return 'oleg_single_patient';
    }
}
