/*
 * Copyright (c) 2017 Cornell University
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * Created with JetBrains PhpStorm.
 * User: oli2002
 * Date: 2/12/14
 * Time: 3:36 PM
 * To change this template use File | Settings | File Templates.
 */

var _htableid = "#transresDataTable";

var _sotable = null;    //scan order table
var _tableMainIndexes = null; //table indexes for main columns: Acc Type, Acc, MRN Type, MRN, Part ID, Block ID
var _colHeader = [];
var _rowToProcessArr = [];

var _accessiontypes_simple = [];
var _mrntypes_simple = [];
var _partname_simple = [];
var _blockname_simple = [];
var _stains_simple = [];
var _procedures_simple = [];
var _organs_simple = [];
var _parttitle_simple = [];
var _scanregions_simple = [];
var _slidetypes_simple = [];

var _slidetypes = [];

var _errorValidatorRows = []; //keep rows with validator error

//these globals are set by setAutoGeneratedTypes()
var _auto_generated_mrn_type = null;    //13;
var _auto_generated_accession_type = null;  //8;

var _institution = null;

var _btnClickedName = null;

//var ip_validator_regexp = /^(?:\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b|null)$/;

//accession validator
var accession_validator = function (value) {
    //console.log('acc validator: value='+value);
    if( isValueEmpty(value) ) {
        //console.log('acc validator: empty => ret true');
        return true;
    }
    var notzeros = notAllZeros(value);
    var res = value.match(/^[a-zA-Z]{1,2}[0-9]{2}[-][1-9]{1}[0-9]{0,5}$/);      //S11-1, SS11-1, S1-10, not S11-01
    //console.log('acc validator: res='+res+', notzeros='+notzeros);
    if( res != null && notzeros ) {
        //console.log('acc validator: ret true');
        return true;
    }
    else {
        //console.log('acc validator: ret false');
        return false;
    }
}
var accession_validator_fn = function (value, callback) {
    callback( accession_validator(value) );
};
////////////////////////////

//25 non zeros characters
var general_validator = function (value) {
    if( isValueEmpty(value) ) {
        return true;
    }
    var notzeros = notAllZeros(value);
    var res = value.match(/^[a-zA-Z1-9][a-zA-Z0-9-]{0,23}[a-zA-Z0-9]{0,1}$/);
    //console.log('general validator: res='+res+', notzeros='+notzeros);
    if( res != null && notzeros ) {
        return true;
    }
    else {
        return false;
    }
};
var general_validator_fn = function (value, callback) {
    callback( general_validator(value) );
};
////////////////////////////

//noaccession-provided and nomrn-provided non zeros characters not limited
var generated_validator = function (value) {
    if( isValueEmpty(value) ) {
        return true;
    }
    var notzeros = notAllZeros(value);
    var res = value.match(/^[a-zA-Z1-9][a-zA-Z0-9-]{1,}$/);
    //console.log('general validator: res='+res+', notzeros='+notzeros);
    if( res != null && notzeros ) {
        return true;
    }
    else {
        return false;
    }
};
var generated_validator_fn = function (value, callback) {
    callback( generated_validator(value) );
};
////////////////////////////

//mm/dd/yyyy
var date_validator = function (value) {
    //console.log('value=('+value+')');
    if( isValueEmpty(value) ) {
        return true;
    }
    var res = value.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
    var notzeros = notAllZeros(value);
    //console.log('date validator: res='+res+', notzeros='+notzeros);
    if( res != null && notzeros ) {
        //console.log('date2 ok');
        return true;
    }
    else {
        //console.log('date not ok');
        return false;
    }
};
var date_validator_fn = function (value, callback) {
    callback( date_validator(value) );
};
//////////////////////

//age validator 0-999
var age_validator = function (value) {
    if( isValueEmpty(value) ) {
        return true;
    }

    var res = value.match(/^[0-9]{0,3}$/);

    if( res != null ) {
        return true;
    }
    else {
        return false;
    }
};
var age_validator_fn = function (value, callback) {
    callback( age_validator(value) );
};
////////////////////////////

function notAllZeros(value) {
    if( isValueEmpty(value) ) {
        return true;
    }

    var allzeros = value.match(/^[0]+$/);
    //console.log('allzeros='+allzeros);
    if( allzeros != null ) {
        return false;
    }
    else {
        return true;
    }
};


//renderers
var redRendererAutocomplete = function (instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.AutocompleteRenderer.apply(this, arguments);
    if( !validateCell(row,col,null) ) {
        //console.log('add error');
        $(td).addClass('ht-validation-error');
    } else {
        //console.log('remove error');
        $(td).removeClass('ht-validation-error');
    }
};

var redRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    if( !validateCell(row,col,null) ) {
        $(td).addClass('ht-validation-error');
    } else {
        $(td).removeClass('ht-validation-error');
    }

    //capitalizeAccession( row, col, value );
};

var forcegeneral_validator_fn = function (instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    $(td).addClass('ht-validation-error');
};

var conflictRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    $(td).addClass('ht-conflict-error');
};

var conflictBorderRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    $(td).addClass('ht-conflictborder-error');
};

var redWithBorderRenderer = function (instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.TextRenderer.apply(this, arguments);
    if( !validateCell(row,col,null) ) {
        $(td).addClass('ht-redwithconflictborder-error');
    } else {
        $(td).addClass('ht-conflictborder-error');
    }
};

//total 33
var _columnData_scanorder = [
    { header:'System', columns:{} },
    { header:'Accession ID', columns:{} },
    { header:'Barcode', columns:{} }
];

$(document).ready(function() {

//    //console.log(JSON.stringify(_handsometableDataArr));
//    if( typeof _handsometableDataArr != 'undefined' ) {
//        console.log(_handsometableDataArr);
//        console.log('_handsometableDataArr len='+_handsometableDataArr.length);
//        for( var n in _handsometableDataArr ) {
//            console.log("n="+n);
//            console.log(_handsometableDataArr[n]);
//        }
//    }

    //attachResearchEducationalTooltip();

    //holder,name,globalDataArray,multipleFlag,urlprefix,sitename,force
    //getComboboxGeneric(null,'parttitle',_parttitle,false,null,'scan',true); //get _parttitle from selectAjax.js

    $(function(){
        var datepicker = $.fn.datepicker.noConflict;
        $.fn.bootstrapDP = datepicker;
        $('#priority_option').find('.datepicker').bootstrapDP();
    });

    //Handsontable.renderers.registerRenderer('redRenderer', redRenderer); //maps function to lookup string

    // Wait until idle (busy must be false)
    //console.log('before waiting for handsonTable Init');
    // var _TIMEOUT = 100; // 300 waitfor test rate [msec]
    // waitfor( ajaxFinishedCondition, true, _TIMEOUT, 0, 'play->busy false', function() {
    //     //console.log('The show can resume => handsonTable Init');
    //     handsonTableInit();
    // });

    handsonTableInit();

    // var data = [
    //     ["", "Tesla", "Volvo", "Toyota", "Honda"],
    //     ["2017", 10, 11, 12, 13],
    //     ["2018", 20, 11, 14, 13],
    //     ["2019", 30, 15, 12, 13]
    // ];

    //var container = document.getElementById('transresDataTable');
    // var hot = new Handsontable(container, {
    //     data: data,
    //     rowHeaders: true,
    //     colHeaders: true
    // });

    // $(_htableid).handsontable({
    //     data: data,
    //     rowHeaders: true,
    //     colHeaders: _colHeader,
    //     columns: columnsType,
    //     minSpareRows: 1,
    //     contextMenu: ['row_above', 'row_below', 'remove_row'],
    //     manualColumnMove: true,
    //     manualColumnResize: true,
    //     autoWrapRow: true,
    //     currentRowClassName: 'currentRowScanorder',
    //     currentColClassName: 'currentColScanorder',
    //     stretchH: 'all',
    // });

    //validation on form submit
    // $(_htableid).on("submit", function () {
    //     return validateHandsonTable();
    // });

});

// function ajaxFinishedCondition() {
//
//     //console.log('_parttitle='+_parttitle);
//     //console.log('_accessiontype.length='+_accessiontype.length);
//     //console.log('_mrntype.length='+_mrntype.length);
//     //console.log('_partname.length='+_partname.length);
//     //console.log('_blockname.length='+_blockname.length);
//     //console.log('_stain.length='+_stain.length);
//     //console.log('_procedure.length='+_procedure.length);
//     //console.log('_organ.length='+_organ.length);
//     //console.log('_scanregion.length='+_scanregion.length);
//     //console.log('_slidetypes.length='+_slidetypes.length);
//
//     if( !(_accessiontype.length > 0) ) { console.log('NULL _accessiontype.length='+_accessiontype.length); }
//     if( !(_procedure.length > 0) ) { console.log('NULL _procedure.length='+_procedure.length); }
//     if( !(_mrntype.length > 0) ) { console.log('NULL _mrntype.length='+_mrntype.length); }
//     if( !(_partname.length > 0) ) { console.log('NULL _partname.length='+_partname.length); }
//     if( !(_blockname.length > 0) ) { console.log('NULL _blockname.length='+_blockname.length); }
//     if( !(_stain.length > 0) ) { console.log('NULL _stain.length='+_stain.length); }
//     if( !(_organ.length > 0) ) { console.log('NULL _organ.length='+_organ.length); }
//     if( !(_scanregion.length > 0) ) { console.log('NULL _scanregion.length='+_scanregion.length); }
//     if( !(_slidetypes.length > 0) ) { console.log('NULL _slidetypes.length='+_slidetypes.length); }
//     if( !(_parttitle.length > 0) ) { console.log('NULL _parttitle.length='+_parttitle.length); }
//
//     if(
//             _accessiontype.length > 0 &&
//             _procedure.length > 0 &&
//             _mrntype.length > 0 &&
//             _partname.length > 0 &&
//             _blockname.length > 0 &&
//             _stain.length > 0 &&
//             _organ.length > 0 &&
//             _scanregion.length > 0 &&
//             _slidetypes.length > 0
//             //&& _parttitle != null //_parttitle might have no element
//     ) {
//
//         for(var i = 0; i < _accessiontype.length; i++) {
//             _accessiontypes_simple.push( _accessiontype[i].text );
//         }
//
//         for(var i = 0; i < _mrntype.length; i++) {
//             _mrntypes_simple.push( _mrntype[i].text );
//         }
//
//         _partname_simple.push('');  //insert first empty value
//         for(var i = 0; i < _partname.length; i++) {
//             _partname_simple.push( _partname[i].text );
//         }
//
//         _blockname_simple.push(''); //insert first empty value
//         for(var i = 0; i < _blockname.length; i++) {
//             _blockname_simple.push( _blockname[i].text );
//         }
//
//         for(var i = 0; i < _stain.length; i++) {
//             _stains_simple.push( _stain[i].text );
//         }
//
//         _procedures_simple.push('');
//         for(var i = 0; i < _procedure.length; i++) {
//             _procedures_simple.push( _procedure[i].text );
//         }
//
//         for(var i = 0; i < _scanregion.length; i++) {
//             _scanregions_simple.push( _scanregion[i].text );
//         }
//
//         for(var i = 0; i < _slidetypes.length; i++) {
//             _slidetypes_simple.push( _slidetypes[i].text );
//         }
//
//         for(var i = 0; i < _organ.length; i++) {
//             _organs_simple.push( _organ[i].text );
//         }
//
//         for(var i = 0; i < _parttitle.length; i++) {
//             _parttitle_simple.push( _parttitle[i].text ); //get _parttitle from selectAjax.js
//         }
//
//         return true;
//
//     } else {
//
//         return false;
//     }
// }


function handsonTableInit() {

    //set institution
    //_institution = $('.combobox-institution').select2('val');
    //console.log('_institution='+_institution);

    var data = [];
    var columnsType = [];
    //var colHeader = [];
    var rows = 11;//21;//501;

    if( typeof _handsometableDataArr != 'undefined' && _handsometableDataArr.length != 0 ) {
        rows = _handsometableDataArr.length+1;
    }
    console.log('handsonTableInit rows='+rows);

    // make init data, i=0 to skip the first row
    for( var i=1; i<rows; i++ ) {   //foreach row

        var rowElement = [];
        //rowElement[0] = i;
        for( var ii=0; ii<_columnData_scanorder.length; ii++ ) {  //foreach column

            if( 'default' in _columnData_scanorder[ii] ) {
                var index = _columnData_scanorder[ii]['default'];
                rowElement[ii] = _columnData_scanorder[ii]['columns']['source'][index];
                console.log('assign rowElement='+rowElement[ii]);
            } else {
                console.log('assign rowElement is null');
                rowElement[ii] = null;
            }

            //load data
            console.log('load data for row='+i);
            //if( typeof _handsometableDataArr != 'undefined' ) {
            if( typeof _handsometableDataArr != 'undefined' && _handsometableDataArr.length > 0 ) {
                var headerTitle = _columnData_scanorder[ii]['header'];
                console.log('headerTitle='+headerTitle);
                //console.log( _handsometableDataArr[i-1] );
                if( typeof headerTitle != 'undefined' && typeof _handsometableDataArr[i-1] != 'undefined' &&
                    headerTitle != '' && (i-1<_handsometableDataArr.length) && headerTitle in _handsometableDataArr[i-1]
                ) {
                    if( _handsometableDataArr[i-1][headerTitle] ) {
                        var cellValue = _handsometableDataArr[i-1][headerTitle]["value"];
                        //var cellId = _handsometableDataArr[i-1][headerTitle]["id"];
                        console.log('cellValue='+cellValue);
                        //var value = _handsometableDataArr[i-1][headerTitle];
                        //console.log( "value="+value );
                        if( cellValue != null && cellValue != "" ) {
                            rowElement[ii] = cellValue;
                        }
                    }
                }
            }

        }//foreach column

        console.log(rowElement);
        data.push(rowElement);

    }//foreach row

    // make header and columns
    for( var i=0; i<_columnData_scanorder.length; i++ ) {
        _colHeader.push( _columnData_scanorder[i]['header'] );
        columnsType.push( _columnData_scanorder[i]['columns'] );
    }

    //console.log(columnsType);
    //$('#multi-dataTable').doubleScroll();

    //console.log(data);
    //console.log(_colHeader);
    //console.log(columnsType);

    $(_htableid).handsontable({
        data: data,
        colHeaders: _colHeader,
        columns: columnsType,
        minSpareRows: 1,
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        manualColumnMove: true,
        manualColumnResize: true,
        autoWrapRow: true,
        currentRowClassName: 'currentRowScanorder',
        currentColClassName: 'currentColScanorder',
        stretchH: 'all',
    });

    //set bs table
    //$(_htableid+' table').addClass('table-striped table-hover');
    $(_htableid+' table').addClass('table-hover');

    //set scan order table object as global reference
    _sotable = $(_htableid).handsontable('getInstance');



}




function setDataCell( row, col, value ) {

    //if( value && value != '' ) {    //set
    if( !isValueEmpty(value) ) {

        _sotable.setDataAtCell(row,col,value);
        _sotable.getCellMeta(row,col).readOnly = true;

    } else {    //clean

        var newValue = null;

        //if default exists => set to the element of source array, at the index specified by default
        if( 'default' in _columnData_scanorder[col] ) {
            var index = _columnData_scanorder[col]['default'];
            var newValue = _columnData_scanorder[col]['columns']['source'][index];
        }

        //console.log('clean data cell at '+row+","+col+", value="+newValue);

        _sotable.setDataAtCell(row,col,newValue);
        _sotable.getCellMeta(row,col).readOnly = false;

    }

}

//clean form
function processDataForm( action ) {

    var handsontable = $(_htableid).data('handsontable');

    var hdata = handsontable.getData();

    //console.log('data len='+hdata.length);
    //console.log( 'column'+'0'+',row'+'1'+':'+ hdata[0][1] );
    //console.log( 'column'+'1'+',row'+'2'+':'+ hdata[1][2] );

    //for each row (except the first one)
    for( var i=0; i<hdata.length; i++ ) {

        //console.log( 'row'+(i+1)+':' + hdata[i] );
        if( hdata[i] !== undefined && hdata[i] !== null && hdata[i] != '' ) {

            //for each column (except the first one)
            for( var ii=0; ii<hdata[i].length; ii++ ) {

                //console.log( 'column'+(ii+1)+':' + hdata[i][ii] );
                //validateCell( i, ii, hdata[i][ii], true );

                if( action == 'clean' ) {
                    cleanHTableCell(i,ii, false);
                }

            } //for column

        }

    } //for row

    //console.log( 'hdata=' + handsontable );

    //var checkcell = $(_htableid).handsontable("getCell", 1, 2);
    //checkcell.style.color = "red";
    //checkcell.style.backgroundColor = '#F2DEDE';

}

function isValueEmpty(value) {
    if( value && typeof value !== 'undefined' && value != '' ) {
        return false;
    } else {
        return true;
    }
}

function validateHandsonTable() {
    console.log("validateHandsonTable");

    var countRow = _sotable.countRows();
    console.log("countRow="+countRow);
    for( var row=0; row<countRow-1; row++ ) { //for each row (except the last one)
        console.log("row="+row);
        _rowToProcessArr.push(row);
    } //for each row

    //get rows data from _rowToProcessArr
    assignDataToDatalocker();

    console.log("END !!!!!!!!!!!");
    //return true;
    return false;
}

//get rows data from _rowToProcessArr and assign this to datalocker field
function assignDataToDatalocker() {

    var headers = _sotable.getColHeader();

    //get rows data from _rowToProcessArr
    //var data = [];
    var data = {
        header: headers,
        row: []
    };
    //data.push(headers);

    console.log("_rowToProcessArr.length="+_rowToProcessArr.length);

    for( var i=0; i<_rowToProcessArr.length; i++ ) {
        console.log("data row="+_rowToProcessArr[i]);
        //data.push( _sotable.getDataAtRow( _rowToProcessArr[i] ) );
        var row = _rowToProcessArr[i];
        var rowArr = [];
        //add cell id to datalocker for each field
        for( var col=0; col<headers.length; col++ ) {
            //var cellid = _sotable.getCellMeta(row,cell).id;
            var cellId = _sotable.getCellMeta(row,col).id;
            var cellValue =  _sotable.getDataAtCell(row,col);
            console.log("("+row+","+col+"): cellId="+cellId+", cellValue="+cellValue);
            rowArr.push({
                "id"    : cellId,
                "value" : cellValue
            });
        }

        data.row.push(rowArr);

    }
    console.log(data);

    // if( _btnClickedName != null ) {
    //     $("#oleg_orderformbundle_messagetype_clickedbtn").val( _btnClickedName );
    // }

    //provide table data to controller
    //http://itanex.blogspot.com/2013/05/saving-handsontable-data.html
    var jsonstr = JSON.stringify(data);
    console.log("jsonstr="+jsonstr);
    $("#oleg_translationalresearchbundle_request_datalocker").val( jsonstr );

}


