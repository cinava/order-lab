
{% macro siteSwitch() %}
    <li id="nav-bar-siteswitch" class="dropdown">
        {#bug:https://github.com/twbs/bootstrap/issues/13657 style="font-size:18px;" or multiple by 12#}
        <a href="#" class="dropdown-toggle" data-toggle="dropdown" style="padding-bottom:12px;">
            <span class="glyphicon glyphicon-th" style="font-size:18px;"></span>
            <b class="caret"></b>
        </a>
        <ul class="dropdown-menu">
            <li>
                <a href="{{ path('scan_home') }}">
                    <img src="{{ asset('bundles/oleguserdirectory/form/img/favicon.ico') }}" alt="Glass Slide Scan Orders" height="18" width="18">
                    Glass Slide Scan Orders
                </a>
            </li>
            <li>
                <a href="{{ path('employees_home') }}">
                    <img src="{{ asset('bundles/oleguserdirectory/form/img/users-1-64x64.png') }}" alt="Employee Directory" height="18" width="18">
                    Employee Directory
                </a>
            </li>
            <li>
                <a href="{{ path(fellapp_sitename~'_home') }}">
                    <span class="glyphicon glyphicon-file"></span> Fellowship Applications
                </a>
            </li>
        </ul>
    </li>
{% endmacro %}

{#constract full input element with label and dropzone; used only by comments macros#}
{% macro fileuploadLabelField( container, documents, cycle, classname, prototype ) %}

    {% import _self as usermacros %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}

    <p>
    {#style="height: 50px"#}
    <div class="row files-upload-holder">
        <div class="col-xs-6" align="right">
            <strong>Attached Document(s):</strong>
        </div>
        <div class="col-xs-6" align="left">

            {{ usermacros.documentsContainer(container,documents,cycle,prototype,3,'default') }}

        </div>
    </div>
    </p>

{% endmacro %}

{#dropzoneInit = 'inactive':    inactive by default#}
{#dropzoneInit = 'active':      active by default#}
{#dropzoneInit = 'default':     inactive if show or active otherwise#}
{% macro documentsContainer(container,documents,cycle,prototype,documentspercontainer,dropzoneInit) %}

    {% import "OlegUserdirectoryBundle::Default/usermacros.html.twig" as usermacros %}

    {% if documents is defined or prototype == 'prototype' %}

        {% if "show" in cycle %}
            {% set showFlag = true %}
        {% else %}
            {% set showFlag = false %}
        {% endif %}

        {% if documentspercontainer is not defined or documentspercontainer == "" or documentspercontainer == 0 %}
            {% set dz_maxFiles = 6 %}
        {% else %}
            {% set dz_maxFiles = documentspercontainer %}
        {% endif %}
        {#documentspercontainer:{{ documentspercontainer }}#}

        {#dropzoneInit:{{ dropzoneInit }}<br>#}
        {% if dropzoneInit is not defined %}
            {#dropzoneInit is not defined<br>#}
            {% set dropzoneInit = 'default' %}
            {% set addRemoveLink = 'default' %}
        {% endif %}

        {% if dropzoneInit == 'inactive' %}
            {#dropzoneInit == true<br>#}
            {% set dropzoneActiveClass = "file-upload-dropzone-inactive" %}
            {% set addRemoveLink = false %}
        {% elseif dropzoneInit == 'active' %}
            {#dropzoneInit == false<br>#}
            {% set dropzoneActiveClass = "file-upload-dropzone-active" %}
            {% set addRemoveLink = true %}
        {% elseif dropzoneInit == 'default' %}
            {#dropzoneInit == 'default'<br>#}
            {% if showFlag %}
                {% set dropzoneActiveClass = "file-upload-dropzone-inactive" %}
                {% set addRemoveLink = false %}
            {% else %}
                {% set dropzoneActiveClass = "file-upload-dropzone-active" %}
                {% set addRemoveLink = true %}
            {% endif %}
        {% else %}
            {#dropzoneInactive else<br>#}
            {% if showFlag %}
                {% set dropzoneActiveClass = "file-upload-dropzone-inactive" %}
                {% set addRemoveLink = false %}
            {% else %}
                {% set dropzoneActiveClass = "file-upload-dropzone-active" %}
                {% set addRemoveLink = true %}
            {% endif %}
        {% endif %}


        <div class="dropzone file-upload-dropzone {{ dropzoneActiveClass }}" style="min-height: 150px; margin-bottom: 5px;">

            {% if not showFlag %}

                <input type="hidden" id="documentcontainer-documentspercontainer" value="{{ dz_maxFiles }}">
                <div class="dz-message" style="padding-bottom:5px;"><span>Drag and drop files here to upload or click to select a file (Maximum {{ dz_maxFiles }} files, 10 MB each)</span></div>

            {% else %}

                <div class="dz-message" style="padding-bottom:5px;"><span></span></div>

            {% endif %}

            {{ usermacros.document( documents, cycle, prototype, addRemoveLink ) }}

            {#render field "other". id of this field will be used to get the containerid in js#}
            {% if container is not null %}
                {% if not showFlag %}
                    {% if container.others is defined %}
                        {{ form_widget(container.others) }}
                    {% endif %}
                    {{ form_rest(container) }}
                {% endif %}
            {% endif %}

        </div>

    {% endif %}

{% endmacro %}

{% macro document( documents, cycle, prototype, addRemoveLink ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import "OlegUserdirectoryBundle::Default/usermacros.html.twig" as usermacros %}

    {#get sitename#}
    {% set currentPath = path(app.request.attributes.get('_route'), app.request.attributes.get('_route_params')) %}
    {% if '/scan/' in currentPath %}
        {% set sitename = scan_sitename %}
    {% endif %}
    {% if '/directory/' in currentPath %}
        {% set sitename = employees_sitename %}
    {% endif %}
    {% if '/fellowship-applications/' in currentPath %}
        {% set sitename = employees_sitename %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% for document in documents if document.vars.value %}

        {#document:{{ document.vars.value.id }}#}

        <div class="dz-preview dz-file-preview" style="width:100%; height:220px; margin-left:1px; margin-right:0px;">
            <div class="dz-details">
                {#<div class="dz-filename"><span data-dz-name>{{ document.vars.value.uniquename }}</span></div>#}
                <div class="dz-size" data-dz-size><strong>{{ document.vars.value.getSizeStr() }}</strong></div>
                {{ usermacros.showDocumentAsImage(document.vars.value,'Document', 'data-dz-thumbnail') }}
            </div>
            <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>
            <div class="dz-success-mark"><span>✔</span></div>
            <div class="dz-error-mark"><span>✘</span></div>
            <div class="dz-error-message"><span data-dz-errormessage></span></div>

            {#link to open/download file#}
            <div class="file-upload-showlink">
                <div style="overflow:hidden; white-space:nowrap;">
                    {% if document.vars.value.id %}
                        <a target="_blank" href="{{ path(sitename~'_file_download', { 'id': document.vars.value.id }) }}">{{ document.vars.value.originalname }} ({{ document.vars.value.createdate|date('m/d/Y') }})</a>
                    {% endif %}
                </div>
            </div>

            {% if addRemoveLink or addRemoveLink == 'default' %}
                <a data-dz-remove="" href="javascript:void(0);" class="dz-remove" onclick="removeUploadedFile(this)">Remove file</a>
            {% endif %}

            {{ formmacros.field(document.id) }}
            {{ formmacros.field(document.dummyprototypefield) }}
        </div>

        {% do document.setRendered %}

    {% endfor %}

    {#use dummy-prototype-field to get id and name prototype for adding new document#}
    {{ formmacros.field(documents.vars.prototype.dummyprototypefield) }}


    {% do documents.setRendered %}

{% endmacro %}



{% macro getInstitutionalTree( entity, linktype ) %}

    {% import _self as usermacros %}

    {% if linktype is defined and linktype == 'userlink' %}
    {% else %}
        {% set linktype = 'nodelink' %}
    {% endif %}

    <ol class="breadcrumb">

        {#institution#}
        {% if entity.parent.parent.parent is defined %}
            <li>{{ usermacros.hrefLinkToNode(entity.parent.parent.parent,linktype) }}</li>
        {% endif %}
        {#department#}
        {% if entity.parent.parent is defined %}
            <li>{{ usermacros.hrefLinkToNode(entity.parent.parent,linktype) }}</li>
        {% endif %}
        {#division#}
        {% if entity.parent is defined %}
            <li>{{ usermacros.hrefLinkToNode(entity.parent,linktype) }}</li>
        {% endif %}
        {#service#}
        {% if entity is defined %}
            <li>{{ usermacros.hrefLinkToNode(entity,linktype) }}</li>
        {% endif %}

    </ol>

{% endmacro %}

{% macro hrefLinkToNode( node, linktype ) %}
    {% if node and node is defined %}
        {% if is_granted('ROLE_USERDIRECTORY_OBSERVER') %}
            {% if linktype == 'nodelink' %}
                <a href="{{ path(node.getClassName()|lower~'s_show', { 'id': node.id }) }}">{{ node.getOptimalName() }}</a>
            {% endif %}
            {% if linktype == 'userlink' %}
                <a href="{{ path( employees_sitename~'_search_same_object', { 'tablename':node.getClassName()|lower,'id': node.id, 'name': node.getOptimalName() }) }}">{{ node.getOptimalName() }}</a>
            {% endif %}
        {% else %}
            {{ node.getOptimalName() }}
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro getNestedTree( entity, linktype ) %}

    {% if entity %}

        {% import _self as usermacros %}

        {% if linktype is defined and linktype == 'userlink' %}
        {% else %}
            {% set linktype = 'nodelink' %}
        {% endif %}

        <ol class="breadcrumb">
            {{ usermacros.nestedTree(entity,linktype) }}
        </ol>

    {% endif %}

{% endmacro %}

{% macro nestedTree( entity, linktype ) %}

    {% import _self as usermacros %}

    {% if entity and entity.parent and entity.id != entity.parent.id %}
        {{ usermacros.nestedTree(entity.parent, linktype) }}
    {% endif %}

    <li>{{ usermacros.hrefLinkToNode(entity,linktype) }}</li><br>

{% endmacro %}


{% macro locationObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import "OlegUserdirectoryBundle::Tree/treemacros.html.twig" as treemacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% if   prototype == "prototype" or
            formfield.vars.value and
            (
                formfield.vars.value.removable == true or
                formfield.vars.value.removable != true and
                formfield.vars.value.name != "Home"
            )
    %}
        {% set homeLocation = false %}
    {% else %}
        {% set homeLocation = true %}
    {% endif %}


    {% if formfield.vars.value and formfield.vars.value.status == constant('Oleg\\UserdirectoryBundle\\Entity\\BaseUserAttributes::STATUS_UNVERIFIED') or prototype == 'prototype' %}
        {% set wellclass = "user-alert-warning" %}
    {% else %}
        {% set wellclass = "" %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {#Consider stanAlone for all cycles with _standalone, except new_standalone. Cycle new_standalone is exception because we don't show list attributes in creation page#}
    {% set standAloneLocation = false %}
    {% if "standalone" in cycle %}
        {% set wellclass = "" %}
        {% set standAloneLocation = true %}
    {% endif %}
    {% if cycle == "new_standalone" %}
        {% set wellclass = "" %}
    {% endif %}

    {#On "Common Location" view pages, (for locations where Inhabitant is not set)#}
    {% if not standAloneLocation or formfield.vars.value.user or cycle != 'show_standalone' %}
        {% set standAloneLocationNotView = true %}
    {% else %}
        {% set standAloneLocationNotView = false %}
    {% endif %}

    {#    Show restrictions for home location:    #}
    {#####Case1: privacy="Administration can see and edit this contact information"#}
    {#Show Home location only to subjectuser, Administrator or Editor; Hide for others.#}
    {#####Case2: privacy="Administration; Those 'on call' can see these phone numbers & email" or default (NULL)#}
    {#Show only to subjectuser, Administrator or Editor #}
    {#Show fields to users with role 'On Call' (ROLE_SCANORDER_ONCALL_TRAINEE, ROLE_SCANORDER_ONCALL_ATTENDING):#}
    {#Phone,Mobile Phone,Pager,Fax,E-Mail#}
    {#####Case3: privacy=others#}
    {#Show it as now (show all non-empty fields)#}

    {% if app.security.getToken().getUser().getId() == entity.id %}
        {% set subjectuser = true %}
    {% else %}
        {% set subjectuser = false %}
    {% endif %}

    {% if is_granted('ROLE_USERDIRECTORY_EDITOR') or is_granted('ROLE_USERDIRECTORY_ADMIN') %}
        {% set userEditor = true %}
    {% else %}
        {% set userEditor = false %}
    {% endif %}

    {% if is_granted('ROLE_SCANORDER_ONCALL_TRAINEE') or is_granted('ROLE_SCANORDER_ONCALL_ATTENDING') %}
        {% set onCallUser = true %}
    {% else %}
        {% set onCallUser = false %}
    {% endif %}

    {% set privacyCase1 = false %}
    {% set privacyCase2 = false %}
    {% if homeLocation and formfield.vars.value.privacy == "Administration can see and edit this contact information" %}
        {% set privacyCase1 = true %}
    {% endif %}
    {% if homeLocation and (formfield.vars.value.privacy == "Administration; Those 'on call' can see these phone numbers & email" or not formfield.vars.value.privacy) %}
        {% set privacyCase2 = true %}
    {% endif %}

    {% set showRegularFields1 = true %}
    {% set showRegularFields2 = true %}

    {% if privacyCase1 %}
        {% set showRegularFields1 = false %}
        {% set showRegularFields2 = false %}

        {% if userEditor or subjectuser %}
            {% set showRegularFields1 = true %}
            {% set showRegularFields2 = true %}
        {% endif %}
    {% endif %}

    {% if privacyCase2 %}
        {% set showRegularFields1 = false %}
        {% set showRegularFields2 = false %}

        {% if onCallUser %}
            {% set showRegularFields2 = true %}
        {% endif %}

        {% if userEditor or subjectuser %}
            {% set showRegularFields1 = true %}
            {% set showRegularFields2 = true %}
        {% endif %}
    {% endif %}

    {#don't use alert class for standAloneLocation#}
    {% if standAloneLocation %}
        {% set alertClass = "" %}
    {% else %}
        {% set alertClass = "alert" %}
    {% endif %}

    {% if showRegularFields1 or showRegularFields2 %}
        <div class="user-collection-holder {{ alertClass }} {{ classname }} {{ wellclass }}">

            {% if not showFlag and (prototype == "prototype" or formfield.vars.value and formfield.vars.value.removable == true) %}
                {% if not standAloneLocation and cycle != "new_standalone" %}
                    <div class="text-right">
                        <button type="button" class="btn btn-default btn-sm" onClick="removeExistingObject(this,'{{ classname }}')" >
                            <span class="glyphicon glyphicon-remove"></span>
                        </button>
                    </div>
                {% endif %}
            {% endif %}

            {% if showRegularFields1 %}
                {{ formmacros.field(formfield.id) }}
                {{ usermacros.statusVerifiedField(formfield,cycle) }}

                {% if formfield.user is defined %}
                    {#On "Common Location" view pages, (for locations where Inhabitant is not set) hide "Inhabitant" field and value (still show it on the Edit page).#}
                    {% if standAloneLocationNotView %}
                        {{ formmacros.field(formfield.user) }}
                    {% endif %}
                {% endif %}

                {% if standAloneLocation and formfield.removable is defined %}
                    {{ formmacros.field(formfield.removable) }}
                {% endif %}

                {% if standAloneLocation or prototype == "prototype" or formfield.vars.value and formfield.vars.value.removable == true %}
                    {{ formmacros.field(formfield.name) }}
                {% else %}
                    {{ formmacros.field(formfield.name,"","readonly") }}
                {% endif %}

                {% if homeLocation == true or standAloneLocation %}
                    {#Do not show "Location Privacy (who can see this contact info):" field for orphan locations (locations not connected to any user)#}
                    {% if
                        cycle != 'show_user' or
                        cycle == 'show_user' and (userEditor or subjectuser) and formfield.vars.value.user
                    %}
                        {% if cycle != 'show_standalone' or cycle == 'show_standalone' and (userEditor or subjectuser) and formfield.vars.value.user %}
                            {{ formmacros.field(formfield.privacy) }}
                        {% else %}
                            {#{% do formfield.privacy.setRendered %}#}
                        {% endif %}
                    {% endif %}
                {% else %}
                    {% do formfield.privacy.setRendered %}
                {% endif %}

                {% if formfield.locationTypes is defined %}
                    {{ formmacros.field(formfield.locationTypes) }}
                {% endif %}
            {% endif %}{#showRegularFields1#}

            {% if showRegularFields2 %}

                {{ usermacros.emailPhoneField(formfield.phone,cycle,'phone',"") }}

                {{ usermacros.emailPhoneField_notempty(formfield.pager,cycle,'phone',"") }}
                {{ usermacros.emailPhoneField_notempty(formfield.mobile,cycle,'phone',"") }}

                {% if homeLocation == false %}
                    {{ formmacros.field_notempty(formfield.ic,cycle) }}
                {% endif %}

                {{ formmacros.field_notempty(formfield.fax,cycle) }}
                {{ usermacros.emailPhoneField_notempty(formfield.email,cycle,'email',"") }}

            {% endif %}{#showRegularFields2#}

            {% if showRegularFields1 %}
                {% if homeLocation == false %}

                    {#On "Common Location" view pages, (for locations where Inhabitant is not set) hide "Assistant(s):" field and value.#}
                    {#{% if standAloneLocationNotView %}#}

                        {#assistant field#}
                        {% if formfield.assistant is defined %}
                            {% if not showFlag %}
                                {{ formmacros.field(formfield.assistant) }}
                            {% else %}
                                {% if formfield.vars.value.assistant is defined and formfield.vars.value.assistant != NULL and formfield.vars.value.assistant|length > 0 %}
                                        <div style="text-align: center;">
                                            <p>
                                                <strong>Assistant(s):</strong>
                                            </p>
                                        </div>
                                        {% for assistant in formfield.vars.value.assistant %}
                                            {{ usermacros.personInfo(assistant,cycle,sitename) }}
                                        {% endfor %}

                                {% endif %}
                            {% endif %}
                        {% endif %}

                    {#{% endif %}#}

                {% endif %}

                {% if homeLocation == false %}

                    {% if formfield.institution is defined %}
                        {{ treemacros.compositeTreeNode(formfield.institution,cycle,prototype) }}
                    {% endif %}

                    {{ formmacros.field_notempty(formfield.mailbox,cycle) }}

                    {{ formmacros.field_notempty(formfield.room,cycle) }}
                    {{ formmacros.field_notempty(formfield.suite,cycle) }}
                    {{ formmacros.field(formfield.floor) }}

                    {{ formmacros.field(formfield.building) }}

                {% endif %}

                {#Location GeoLocation#}
                {{ usermacros.geoLocation(field,cycle,prototype) }}

                {% if homeLocation == false %}
                    {{ formmacros.field_notempty(formfield.associatedCode,cycle) }}
                {% endif %}

                {#In Locations, show the CLIA, and PFI fields only to Administrators and the user himself.#}
                {% if formfield.associatedClia is defined %}
                    {{ formmacros.field_notempty(formfield.associatedClia,cycle) }}
                    {{ formmacros.fieldDateLabel_notempty(formfield.associatedCliaExpDate,cycle,'allow-future-date') }}
                    {{ formmacros.field_notempty(formfield.associatedPfi,cycle) }}
                {% endif %}

                {{ formmacros.field_notempty(formfield.comment,cycle) }}
            {% endif %} {#showRegularFields1#}

        </div>
    {% endif %}

    {#show list properties: it's empty for location#}
    {#{% if standAloneLocation %}#}
        {#{{ usermacros.listProperties(formfield) }}#}
    {#{% endif %}#}

    {% do formfield.setRendered %}

{% endmacro %}


{#entity is a location object#}
{% macro geoLocation( entity, cycle, prototype ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}

    {% if prototype == "prototype" %}
        {% set formfield = entity.vars.prototype.geoLocation %}
    {% else %}
        {% set formfield = entity.geoLocation %}
    {% endif %}

    {{ formmacros.field_notempty(formfield.street1,cycle) }}
    {{ formmacros.field_notempty(formfield.street2,cycle) }}
    {{ formmacros.field_notempty(formfield.city,cycle) }}
    {{ formmacros.field_notempty(formfield.state,cycle) }}
    {{ formmacros.field_notempty(formfield.zip,cycle) }}
    {{ formmacros.field_notempty(formfield.county,cycle) }}
    {{ formmacros.field_notempty(formfield.country,cycle) }}
{% endmacro %}

{% macro statusVerifiedField( entity, cycle, isEntity ) %}

    {% if isEntity is not defined %}
        {% set isEntity = false %}
    {% endif %}

    {% set statusValueDefined = false %}

    {% if isEntity %}
        {% set statusValueDefined = true %}
        {% set statusValue = entity.status %}
    {% else %}
        {% if entity.status is defined %}
            {% set statusValueDefined = true %}
            {% set statusValue = entity.status.vars.value %}
        {% endif %}
    {% endif %}

    {% if statusValueDefined %}

        {#On "Common Location" view pages, (for locations where Inhabitant is not set) hide "Status" field and value if it is equal to "Verified by Administration"#}
        {% if "show" in cycle %}
            {% set showFlag = true %}
        {% else %}
            {% set showFlag = false %}
        {% endif %}

        {% if not showFlag or statusValue != constant('Oleg\\UserdirectoryBundle\\Entity\\BaseUserAttributes::STATUS_VERIFIED') %}
            {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
            {% if isEntity %}
                {{ formmacros.simplefield( "Status:", entity.getStatusStr, "", "disabled" ) }}
            {% else %}
                {{ formmacros.field(entity.status) }}
            {% endif %}
        {% else %}
            {% if not isEntity %}
                {% do entity.status.setRendered %}
            {% endif %}
        {% endif %}

    {% endif %}

{% endmacro %}


{% macro checkbox_notempty(field,value,cycle) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% if value == 1 or not showFlag %}
        {{ formmacros.checkbox(field) }}
    {% else %}
        {% do field.setRendered %}
    {% endif %}
{% endmacro %}

{% macro emailPhoneField_notempty(field,cycle,type,label) %}
    {% import _self as formuser %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% if field.vars.value or not showFlag %}
        {{ formuser.emailPhoneField(field,cycle,type,label) }}
    {% else %}
        {% do field.setRendered %}
    {% endif %}
{% endmacro %}

{% macro emailPhoneField(field,cycle,type,label) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if label == "" %}
        {% set value = field.vars.value %}
    {% else %}
        {% set value = field %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% if showFlag %}
        <p>
        <div class="row">
            <div class="col-xs-6" align="right">
                {% if label == "" %}
                    {{ form_label(field) }}
                {% else %}
                    <strong>{{ label }}</strong>
                {% endif %}
            </div>
            <div class="col-xs-6" align="left">
                <div class="form-control form-control-modif" disabled>
                    {% if type == "email" %}
                        <a href="mailto:{{ value }}" target="_top">{{ value }}</a>
                    {% endif %}
                    {% if type == "phone" %}
                        {{ usermacros.phoneHref(value) }}
                    {% endif %}
                    {% if type == "link" %}
                        {% if "http" not in value %}
                            {% set weburl = "http://"~value %}
                        {% else %}
                            {% set weburl = value %}
                        {% endif %}
                        <a href="{{ weburl }}" target="_top">{{ weburl }}</a>
                    {% endif %}
                </div>
            </div>
        </div>
        </p>
        {% if label == "" %}
            {% do field.setRendered %}
        {% endif %}
    {% else %}
        {{ formmacros.field(field) }}
    {% endif %}
{% endmacro %}


{% macro phoneHref(phone) %}
    {% set valueclean = phone|replace({('+'): "", (' '): "", (')'): "", ('('): "", ('-'): ""}) %}
    <a href="tel:{{ valueclean }}" target="_top">{{ phone }}</a>
{% endmacro %}

{% macro personInfo( person, cycle, sitename ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}
    <p>
    <div class="well well-sm user-margin-block">
        {% set bossurl = path(sitename~'_showuser',{'id':person.id}) %}
        {% set bosslink = '<a href="'~bossurl~'">'~person.getUsernameOptimal()~'</a>'  %}
        {{ formmacros.simplefield( "Name:", bosslink, "", "disabled" ) }}
        {{ usermacros.emailPhoneField(person.preferredPhone,cycle,'phone',"Preferred Phone Number:") }}
        {{ usermacros.emailPhoneField(person.email,cycle,'email',"Preferred Email:") }}
    </div>
    </p>
{% endmacro %}


{% macro listProperties(formfield) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    <div class="well well-sm">
        <p>
        <h4 class="text-muted" align="center">List properties:</h4>
        </p>

        {% if formfield.list.name is defined %}
            {{ formmacros.field(formfield.list.name) }}
        {% endif %}

        {% if formfield.list.abbreviation is defined %}
            {{ formmacros.field(formfield.list.abbreviation) }}
        {% endif %}

        {% if formfield.list.shortname is defined %}
            {{ formmacros.field(formfield.list.shortname) }}
        {% endif %}

        {% if formfield.list.description is defined %}
            {{ formmacros.field(formfield.list.description) }}
        {% endif %}

        {% if formfield.list.original is defined %}
            {{ formmacros.field(formfield.list.original) }}
        {% endif %}

        {% if formfield.list.synonyms is defined %}
            {{ formmacros.field(formfield.list.synonyms) }}
        {% endif %}

        {% if formfield.list.type is defined %}
            {{ formmacros.field(formfield.list.type) }}
        {% endif %}

        {% if formfield.list.creator is defined %}
            {{ formmacros.field(formfield.list.creator) }}
        {% endif %}

        {% if formfield.list.createdate is defined %}
            {{ formmacros.field(formfield.list.createdate) }}
        {% endif %}

        {% if formfield.list.orderinlist is defined %}
            {{ formmacros.field(formfield.list.orderinlist) }}
        {% endif %}

        {% if formfield.list.updatedby is defined %}
            {{ formmacros.field(formfield.list.updatedby) }}
            {{ formmacros.field(formfield.list.updatedon) }}
        {% endif %}
    </div>
{% endmacro %}

{% macro buildingObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% set standAloneLocation = false %}
    {% if "standalone" in cycle %}
        {% set wellclass = "" %}
        {% set standAloneLocation = true %}
    {% endif %}

    {{ formmacros.field(formfield.name) }}
    {{ formmacros.field(formfield.abbreviation) }}

    {#Location GeoLocation#}
    {{ usermacros.geoLocation(field,cycle,prototype) }}

    {{ formmacros.field(formfield.institutions) }}
    {#{{ treemacros.compositeTreeNode(formfield.institution) }}#}

    <br>

    {#show list properties#}
    {% if standAloneLocation %}
        {{ usermacros.listProperties(formfield) }}
    {% endif %}

    {% do formfield.setRendered %}

{% endmacro %}


{% macro researchlabObject( field, cycle, classname, prototype, sitename, user ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% set standAloneObject = false %}
    {% if "standalone" in cycle %}
        {% set standAloneObject = true %}
    {% endif %}

    <div class="user-collection-holder well {{ classname }}">

        {% if cycle != 'show_user' %}
            <div class="text-right">
                {#btn-remove-minimumone-collection#}
                <button type="button" class="btn btn-default btn-sm  confirm-delete-with-expired" onClick="removeExistingObject(this,'{{ classname }}')" ><span class="glyphicon glyphicon-remove"></span></button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.id) }}

        {{ formmacros.field(formfield.name) }}

        {#pi#}
        {% if formfield.piDummy is defined %}
            {{ formmacros.checkbox(formfield.piDummy) }}
        {% endif %}
        {#{% if prototype == "prototype" %}#}
            {#{{ formmacros.checkbox(formfield.piDummy) }}#}
        {#{% else %}#}
            {#{% for pi in formfield.pis %}#}
                {#{{ formmacros.field(pi.isPi) }}#}
            {#{% endfor %}#}
        {#{% endif %}#}

        {{ formmacros.fieldDateLabel(formfield.foundedDate,'allow-future-date no-datepicker-events') }}
        {{ formmacros.fieldDateLabel_notempty(formfield.dissolvedDate,cycle,'allow-future-date no-datepicker-events') }}

        {#comment#}
        {% if formfield.piDummy is defined %}
            {{ formmacros.field(formfield.commentDummy) }}
        {% endif %}
        {#{% if prototype == "prototype" %}#}
            {#{{ formmacros.field(formfield.commentDummy) }}#}
        {#{% else %}#}
            {#{% for comment in formfield.comments %}#}
                {#{{ formmacros.field(comment.comment) }}#}
            {#{% endfor %}#}
        {#{% endif %}#}

        {{ formmacros.field(formfield.location) }}
        {{ usermacros.emailPhoneField_notempty(formfield.weblink,cycle,'link',"") }}

    </div>

    {#show list properties#}
    {% if standAloneObject %}
        {{ usermacros.listProperties(formfield) }}
    {% endif %}

    {% do formfield.setRendered %}

{% endmacro %}


{% macro grantObject( field, cycle, classname, prototype, sitename, user ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% set standAloneObject = false %}
    {% if "standalone" in cycle %}
        {% set standAloneObject = true %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% set dropzoneInit = 'inactive' %}
    {% if standAloneObject %}
        {% if showFlag %}
            {% set dropzoneInit = 'inactive' %}
        {% else %}
            {% set dropzoneInit = 'active' %}
        {% endif %}
    {% endif %}

    <div class="user-collection-holder well {{ classname }}">

        {% if not standAloneObject and not showFlag %}
            <div class="text-right">
                {#btn-remove-minimumone-collection#}
                <button type="button" class="btn btn-default btn-sm  confirm-delete-with-expired" onClick="removeExistingObject(this,'{{ classname }}')" ><span class="glyphicon glyphicon-remove"></span></button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.id) }}

        {{ formmacros.field(formfield.name) }}
        {{ formmacros.field(formfield.sourceOrganization) }}
        {{ formmacros.field(formfield.grantid) }}

        {% if not showFlag %}
            {{ formmacros.field_notempty(formfield.grantLink,cycle) }}
        {% else %}
            {% if formfield.vars.value and formfield.vars.value.grantLink %}
                {{ usermacros.htmlLink(formfield.vars.value.grantLink,"Link to a page with more information:") }}
            {% endif %}
            {% do formfield.grantLink.setRendered %}
        {% endif %}

        {% if formfield.effortDummy is defined %}
            {{ formmacros.field(formfield.effortDummy) }}
        {% endif %}

        {{ formmacros.fieldDateLabel(formfield.startDate,'allow-future-date no-datepicker-events') }}
        {{ formmacros.fieldDateLabel_notempty(formfield.endDate,cycle,'allow-future-date no-datepicker-events') }}

        {{ formmacros.field(formfield.currentYearDirectCost) }}
        {{ formmacros.field(formfield.currentYearIndirectCost) }}
        {{ formmacros.field(formfield.totalCurrentYearCost) }}
        {{ formmacros.field(formfield.amount) }}
        {{ formmacros.field(formfield.amountLabSpace) }}

        {% if formfield.commentDummy is defined %}
            {{ formmacros.field(formfield.commentDummy) }}
        {% endif %}

        {#grant's attachmentContainer#}
        {#grant dropzoneInit:{{ dropzoneInit }}#}
        {#documentContainers|length:{{ formfield.attachmentContainer.documentContainers|length }}#}
        {% if formfield.attachmentContainer is defined %}
            {% set count = 0 %}
            {#documentContainers|length:{{ formfield.attachmentContainer.documentContainers|length }}#}
            {% for documentContainer in formfield.attachmentContainer.documentContainers %}
                {% set count = count + 1 %}
                {% set uniqueId = count~"-"~"now"|date("mdYHisu") %}
                {{ formmacros.fieldDocumentContainer(documentContainer,cycle,'grant'~uniqueId,"",20,dropzoneInit) }}
            {% endfor %}

            {% if prototype == "prototype" %}
                {% set uniqueId = "1-"~"now"|date("mdYHisu") %}
                {{ formmacros.fieldDocumentContainer(formfield.attachmentContainer.documentContainers.vars.prototype,cycle,'grant'~uniqueId,"",20,dropzoneInit) }}
            {% endif %}

        {% endif %}

    </div>

    {#show list properties#}
    {% if standAloneObject %}
        {{ usermacros.listProperties(formfield) }}
    {% endif %}

    {% do formfield.setRendered %}

{% endmacro %}

{% macro publicationObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% set wellclass = "" %}

    <div class="user-collection-holder alert {{ classname }} {{ wellclass }}">

        {% if cycle != 'show_user' %}
            <div class="text-right">
                <button type="button" class="btn btn-default btn-sm" onClick="removeExistingObject(this,'{{ classname }}')" >
                    <span class="glyphicon glyphicon-remove"></span>
                </button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.id) }}

        {{ formmacros.field(formfield.citation) }}
        {{ formmacros.field(formfield.pubmedid) }}

        {% if not showFlag %}
            {{ formmacros.field_notempty(formfield.link,cycle) }}
        {% else %}
            {% if formfield.vars.value and formfield.vars.value.link %}
                {{ usermacros.htmlLink(formfield.vars.value.link,"PubMed or Relevant Link:") }}
            {% endif %}
            {% do formfield.link.setRendered %}
        {% endif %}

        {{ formmacros.field(formfield.importance) }}
        {{ formmacros.fieldDateLabel(formfield.publicationDate,'datepicker-only-month-year') }}

        {% if formfield.updatedate is defined %}
            {{ formmacros.fieldDateLabel(formfield.updatedate,'allow-future-date') }}
        {% endif %}

    </div>

    {% do formfield.setRendered %}

{% endmacro %}


{% macro bookObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% set wellclass = "" %}

    <div class="user-collection-holder alert {{ classname }} {{ wellclass }}">

        {% if cycle != 'show_user' %}
            <div class="text-right">
                <button type="button" class="btn btn-default btn-sm" onClick="removeExistingObject(this,'{{ classname }}')" >
                    <span class="glyphicon glyphicon-remove"></span>
                </button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.id) }}

        {{ formmacros.field(formfield.citation) }}
        {{ formmacros.field(formfield.isbn) }}

        {% if not showFlag %}
            {{ formmacros.field_notempty(formfield.link,cycle) }}
        {% else %}
            {% if formfield.vars.value and formfield.vars.value.link %}
                {{ usermacros.htmlLink(formfield.vars.value.link,"Relevant Link:") }}
            {% endif %}
            {% do formfield.link.setRendered %}
        {% endif %}

        {{ formmacros.field(formfield.authorshipRole) }}
        {{ formmacros.field(formfield.comment) }}

        {{ formmacros.fieldDateLabel(formfield.publicationDate,'datepicker-only-month-year') }}

        {% if formfield.updatedate is defined %}
            {{ formmacros.fieldDateLabel(formfield.updatedate,'allow-future-date') }}
        {% endif %}

    </div>

    {% do formfield.setRendered %}

{% endmacro %}

{% macro lectureObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {#{% if "show" in cycle %}#}
        {#{% set showFlag = true %}#}
    {#{% else %}#}
        {#{% set showFlag = false %}#}
    {#{% endif %}#}

    {% set wellclass = "" %}

    <div class="user-collection-holder alert {{ classname }} {{ wellclass }}">

        {% if cycle != 'show_user' %}
            <div class="text-right">
                <button type="button" class="btn btn-default btn-sm" onClick="removeExistingObject(this,'{{ classname }}')" >
                    <span class="glyphicon glyphicon-remove"></span>
                </button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.id) }}

        {{ formmacros.field(formfield.title) }}
        {{ formmacros.fieldDateLabel(formfield.lectureDate,'allow-future-date') }}
        {{ formmacros.field(formfield.organization) }}
        {{ formmacros.field(formfield.city) }}
        {{ formmacros.field(formfield.state) }}
        {{ formmacros.field(formfield.country) }}
        {{ formmacros.field(formfield.importance) }}

    </div>

    {% do formfield.setRendered %}

{% endmacro %}

{% macro fellowshipApplicationObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% set wellclass = "" %}

    <div class="user-collection-holder alert {{ classname }} {{ wellclass }}">

        {% if cycle != 'show_user' %}
            <div class="text-right">
                <button type="button" class="btn btn-default btn-sm" onClick="removeExistingObject(this,'{{ classname }}')" >
                    <span class="glyphicon glyphicon-remove"></span>
                </button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.fellowshipSubspecialty) }}
        {{ formmacros.fieldDateLabel(formfield.timestamp,'allow-future-date') }}
        {{ formmacros.fieldDateLabel(formfield.startDate,'allow-future-date') }}
        {{ formmacros.fieldDateLabel(formfield.endDate,'allow-future-date') }}

    </div>

    {% do formfield.setRendered %}

{% endmacro %}




{% macro htmlLink(linkvalue,label) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% if "http" in linkvalue %}
        {% set href = linkvalue %}
    {% else %}
        {% set href = "http://"~linkvalue %}
    {% endif %}
    {% set hreflink = '<a href="'~href|raw~'">'~linkvalue~'</a>' %}
    {{ formmacros.simplefield( label, hreflink, "", "disabled" ) }}
{% endmacro %}

{########################### Team #############################}
{% macro userTeam( user, type, sitename, postData, collapsein ) %}

    {% import "OlegUserdirectoryBundle::Default/usermacros.html.twig" as usermacros %}

    {#postData:{{ dump(postData) }}#}

    {% if type == "home" %}
        {% set boxnamePrefix = "My " %}
    {% else %}
        {% set boxnamePrefix = "" %}
    {% endif %}

    {% set threshold = 50 %}

    {% set myreportsShow = false %}
    {% set mygroupsShow = false %}
    {% set myservicesShow = false %}
    {% set mydepartmentsShow = false %}
    {% set mydivisionsShow = false %}
    {% set mylabsShow = false %}
    {% set myassistancesShow = false %}

    {#Reports#}
    {% set myreports = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'myreports','id':null,'name':null} ) %}
    {% if render(myreports)|length > threshold %}
        {% set myreportsShow = true %}
    {% endif %}

    {#Assistants#}
    {% set myassistants = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'assistances','id':null,'name':null} ) %}
    {% if render(myassistants)|length > threshold %}
        {% set myassistancesShow = true %}
    {% endif %}

    {#Group#}
    {% set titleBosses = user.getBosses() %}
    {% set mygroupsArr = {} %}
    {% set myTitleBossesArr = {} %}
    {% for title in titleBosses %}
        {% for myboss in title['bosses'] %}
            {% if myboss and myboss.getId() %}
                {% set table = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'myboss','id':myboss.getId(),'name':myboss} ) %}
                {% set element = {'table': table, 'element':myboss} %}
                {% set mygroupsArr = mygroupsArr|merge({ (loop.index0): element}) %}
                {% if render(table)|length > threshold %}
                    {% set mygroupsShow = true %}
                {% endif %}
            {% endif %}
        {% endfor %}
        {% set element = {'title':title['titleobject'],'bosses': title['bosses']} %}
        {% set myTitleBossesArr = myTitleBossesArr|merge({ (loop.index0): element}) %}
    {% endfor %}

    {#Department if head#}
    {#{% set departments = user.getDepartments(true) %}#}
    {#{% set mydepartmentsArr = {} %}#}
    {#{% for department in departments %}#}
        {#{% if department and department.getId() %}#}
            {#{% set table = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'department','id':department.getId(),'name':department} ) %}#}
            {#{% set element = {'table': table, 'element':department} %}#}
            {#{% set mydepartmentsArr = mydepartmentsArr|merge({ (loop.index0): element}) %}#}
            {#{% if render(table)|length > threshold %}#}
                {#{% set mydepartmentsShow = true %}#}
            {#{% endif %}#}
        {#{% endif %}#}
    {#{% endfor %}#}

    {#Division if head or service is empty#}
    {#{% set divisions = user.getDivisions(true,true) %}#}
    {#{% set mydivisionsArr = {} %}#}
    {#{% for division in divisions %}#}
        {#{% if division and division.getId() %}#}
            {#{% set table = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'division','id':division.getId(),'name':division} ) %}#}
            {#{% set element = {'table': table, 'element':division} %}#}
            {#{% set mydivisionsArr = mydivisionsArr|merge({ (loop.index0): element}) %}#}
            {#{% if render(table)|length > threshold %}#}
                {#{% set mydivisionsShow = true %}#}
            {#{% endif %}#}
        {#{% endif %}#}
    {#{% endfor %}#}

    {#Service#}
    {#{% set services = user.getServices() %}#}
    {#{% set myservicesArr = {} %}#}
    {#{% for service in services %}#}
        {#{% if service and service.getId() %}#}
            {#{% set table = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'service','id':service.getId(),'name':service} ) %}#}
            {#&#123;&#35;table:{{ dump(render(table)) }}&#35;&#125;#}
            {#&#123;&#35;{% set rowArr = render(table)|split('<tr>') %}&#35;&#125;#}
            {#&#123;&#35;rowArr length:{{ rowArr|length }}&#35;&#125;#}
            {#{% set element = {'table': table, 'element':service} %}#}
            {#{% set myservicesArr = myservicesArr|merge({ (loop.index0): element}) %}#}
            {#{% if render(table)|length > threshold %}#}
                {#{% set myservicesShow = true %}#}
            {#{% endif %}#}
        {#{% endif %}#}
    {#{% endfor %}#}

    {#Research Lab#}
    {% set labs = user.getResearchLabs() %}
    {% set mylabsArr = {} %}
    {% for lab in labs %}
        {% if lab and lab.getId() %}
            {% set table = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'researchlabs','id':lab.getId(),'name':lab} ) %}
            {% set element = {'table': table, 'element':lab} %}
            {% set mylabsArr = mylabsArr|merge({ (loop.index0): element}) %}
            {% if render(table)|length > threshold %}
                {% set mylabsShow = true %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {#myreports:{{ render(myreports)|length }}#}
    {#mygroupsArr|length:{{ mygroupsArr|length }}#}
    {#myservicesArr|length:{{ myservicesArr|length }}#}

    {#Team#} {#render(myreports)|length should be more than sitename#}
    {% if myreportsShow or mygroupsShow or myservicesShow or mydepartmentsShow or mydivisionsShow or mylabsShow or myassistancesShow %}
        <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">

                    {#centered#}
                    {#<div class="row">#}
                        {#<div class="col-xs-7" align="right" style="padding-right: 100px;">#}
                            {#<a data-toggle="collapse" href="#myteam">{{ boxnamePrefix }}Team</a>#}
                        {#</div>#}
                        {#<div class="col-xs-5" align="right">#}
                            {#<button type="button" class="btn btn-default btn-sm" onClick="collapseAll(document.getElementById('myteam-panel-body'))" >Collapse All</button>#}
                            {#<button type="button" class="btn btn-default btn-sm" onClick="extendAll(document.getElementById('myteam-panel-body'))" >Expand All</button>#}
                        {#</div>#}
                    {#</div>#}

                    <div class="row">
                        <div class="col-xs-6" align="left">
                            <a data-toggle="collapse" href="#myteam" style="color:#fff;">{{ boxnamePrefix }}Team</a>
                        </div>
                        <div class="col-xs-6" align="right">
                            <button type="button" class="btn btn-default btn-xs panel-collapse-btn" onClick="collapseAll(document.getElementById('myteam'))" >Collapse All</button>
                            <button type="button" class="btn btn-default btn-xs panel-collapse-btn" onClick="extendAll(document.getElementById('myteam'))" >Expand All</button>
                        </div>
                    </div>

            </h4>
        </div>
        <div id="myteam" class="panel-collapse collapse {{ collapsein }}">
            <div id="myteam-panel-body" class="panel-body">

                {#<p>#}
                    {#<button type="button" class="btn btn-default btn-sm" onClick="collapseAll(document.getElementById('myteam-panel-body'))" >Collapse All</button>#}
                    {#<button type="button" class="btn btn-default btn-sm" onClick="extendAll(document.getElementById('myteam-panel-body'))" >Expand All</button>#}
                {#</p>#}

                {#Assistance(s)#}
                {% if myassistancesShow %}
                    <div class="panel panel-info">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#myassistances">
                                    {{ boxnamePrefix }}Assistant(s)
                                </a>
                            </h4>
                        </div>
                        <div id="myassistances" class="panel-collapse collapse {{ collapsein }}">
                            <div class="panel-body">
                                {{ render( myassistants ) }}
                            </div>
                        </div>
                    </div>
                {% endif %}

                {#Report(s)#}
                {% if myreportsShow %}
                    <div class="panel panel-info">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" href="#myreports">
                                    {{ boxnamePrefix }}Report(s)
                                </a>
                            </h4>
                        </div>
                        <div id="myreports" class="panel-collapse collapse {{ collapsein }}">
                            <div class="panel-body">
                                {{ render( myreports ) }}
                            </div>
                        </div>
                    </div>
                {% endif %}

                {#Group#}
                {% if mygroupsArr is defined %}
                    {% for mygroup in mygroupsArr %}

                        {% if render( mygroup['table'] )|length > threshold %}
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" href="#mygroups-{{ mygroup['element'].getId() }}">
                                            {{ boxnamePrefix }}Group of <a href="{{ path(sitename~'_showuser',{'id':mygroup['element'].getId()}) }}">{{ mygroup['element'].getUsernameOptimal() }}</a>
                                        </a>
                                    </h4>
                                </div>
                                <div id="mygroups-{{ mygroup['element'].getId() }}" class="panel-collapse collapse {{ collapsein }}">
                                    <div class="panel-body">
                                        {{ render( mygroup['table'] ) }}
                                    </div>
                                </div>
                            </div>
                        {% endif %}

                    {% endfor %}
                {% endif %}


                {#If the user has people she/he reports to, list them here, but separate by the associated title of the user
                ("As a [Medical Director of Informatics] Victor Brodsky reports to: Yao Chen [listed as a search result table]";
                As a [Janitor] Victor Brodsky reports to: John Smith, Mary Jones {listed as lines of the search results table].#}
                {% if myTitleBossesArr is defined and myTitleBossesArr|length > 0 and type == 'profile' %}
                    {% for titleBosses in myTitleBossesArr %}

                        {% set bossArr = {} %}
                        {% set bossidsArr = {} %}
                        {% for boss in titleBosses['bosses'] %}
                            {% set bossHtml = '<a href="'~path(sitename~'_showuser',{'id':boss.getId()})~'">'~boss.getUsernameOptimal()~'</a>' %}
                            {% set bossArr = bossArr|merge([bossHtml]) %}
                            {% set bossidsArr = bossidsArr|merge([boss.getId]) %}
                        {% endfor %}

                        {% set mybosses = controller( 'OlegUserdirectoryBundle:User:myObjects', {'postData':postData,'tablename':'mybosses','id':bossidsArr,'name':null} ) %}

                        {% if render( mybosses )|length > threshold  %}

                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" href="#mytitlebosses-{{ titleBosses['title'].getId() }}"
                                                >As a {{ user.getTitleAndNameByTitle(titleBosses['title']) }} reports to:</a> {{ bossArr|join(",")|raw }}

                                    </h4>
                                </div>
                                <div id="mytitlebosses-{{ titleBosses['title'].getId() }}" class="panel-collapse collapse {{ collapsein }}">
                                    <div class="panel-body">
                                        {{ render( mybosses ) }}
                                    </div>
                                </div>
                            </div>

                        {% endif %}

                    {% endfor %}
                {% endif %}


                {#Department(s)#}
                {% if mydepartmentsArr is defined %}
                    {% for mydepartment in mydepartmentsArr %}

                        {% if render( mydepartment['table'] )|length > threshold %}
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" href="#mydepartments-{{ mydepartment['element'].getId() }}">
                                            {{ mydepartment['element'] }} Department
                                        </a>
                                    </h4>
                                </div>
                                <div id="mydepartments-{{ mydepartment['element'].getId() }}" class="panel-collapse collapse {{ collapsein }}">
                                    <div class="panel-body">
                                        {{ render( mydepartment['table'] ) }}
                                    </div>
                                </div>
                            </div>
                        {% endif %}

                    {% endfor %}
                {% endif %}

                {#Division(s)#}
                {% if mydivisionsArr is defined %}
                    {% for mydivision in mydivisionsArr %}

                        {% if render( mydivision['table'] )|length > threshold %}
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" href="#mydivisions-{{ mydivision['element'].getId() }}">
                                            {{ mydivision['element'] }} Division
                                        </a>
                                    </h4>
                                </div>
                                <div id="mydivisions-{{ mydivision['element'].getId() }}" class="panel-collapse collapse {{ collapsein }}">
                                    <div class="panel-body">
                                        {{ render( mydivision['table'] ) }}
                                    </div>
                                </div>
                            </div>
                        {% endif %}

                    {% endfor %}
                {% endif %}


                {#Service(s)#}
                {% if myservicesArr is defined %}
                    {% for myservice in myservicesArr %}

                        {% if render( myservice['table'] )|length > threshold %}
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" href="#myservices-{{ myservice['element'].getId() }}">
                                            {{ myservice['element'] }} Service
                                        </a>
                                    </h4>
                                </div>
                                <div id="myservices-{{ myservice['element'].getId() }}" class="panel-collapse collapse {{ collapsein }}">
                                    <div class="panel-body">
                                        {{ render( myservice['table'] ) }}
                                    </div>
                                </div>
                            </div>
                        {% endif %}

                    {% endfor %}
                {% endif %}


                {#Research Lab(s)#}
                {% if mylabsArr is defined %}
                    {% for mylab in mylabsArr %}

                        {% if render( mylab['table'] )|length > threshold %}
                            <div class="panel panel-info">
                                <div class="panel-heading">
                                    <h4 class="panel-title">
                                        <a data-toggle="collapse" href="#mylabs-{{ mylab['element'].getId() }}">
                                            {{ mylab['element'] }} Research Lab
                                        </a>
                                    </h4>
                                </div>
                                <div id="mylabs-{{ mylab['element'].getId() }}" class="panel-collapse collapse {{ collapsein }}">
                                    <div class="panel-body">
                                        {{ render( mylab['table'] ) }}
                                    </div>
                                </div>
                            </div>
                        {% endif %}

                    {% endfor %}
                {% endif %}


            </div> {#myteam-panel-body#}
        </div>{#myteam#}
        </div>{#panel panel-primary#}
    {% endif %}

    {#<br>end of myteam: getMemoryUsage: {{ user.getMemoryUsage }}<br>#}

{% endmacro %}
{########################### EOF My Team #############################}


{% macro auditLog( user, type, sitename, postData, collapsein ) %}

    {% import "OlegUserdirectoryBundle::Default/usermacros.html.twig" as usermacros %}

    {#{{ dump(postData) }}#}
    {% if postData and postData['sort'] is defined %}
        {% if ('logger.' in postData['sort']) or ('eventType.' in postData['sort']) %}
            {% set collapsein = "in" %}
        {% endif %}
    {% endif %}

    {% set auditlog = controller( 'OlegUserdirectoryBundle:Logger:getAuditLog', {'postData':postData,'id':user.id, 'onlyheader':true} ) %}

    {#Audit Log#}
    {#{% set auditlog = true %}#}
    {% if auditlog is defined and auditlog %}
        <div class="panel panel-info">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" href="#auditlog">
                        Audit Log
                    </a>
                </h4>
            </div>
            <div id="auditlog" class="panel-collapse collapse {{ collapsein }}">
                <div class="panel-body">
                    {{ render( auditlog ) }}

                    <br>

                    <div class="text-center col-xs-12">
                        <a href="{{ path(sitename~'_logger_user_all',{id:user.id}) }}">Event Log</a>
                    </div>

                </div>
            </div>
        </div>
    {% endif %}

{% endmacro %}


{% macro getLoggerTreeByType( logger, treeType, loggeraction ) %}

    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}

    {% for tree in logger.getInstitutionTreesByType(treeType) %}
        <div class="well well-sm">
            <div class="text-center col-xs-12">
                {% if treeType == 'AdministrativeTitle' %}
                    Administrative Title
                {% elseif treeType == 'AppointmentTitle' %}
                    Appointment Title
                {% elseif treeType == 'MedicalTitle' %}
                    Medical Title
                {% else %}
                    {{ treeType }}
                {% endif %}
            </div>
            {% if tree.institution %}
                {{ formmacros.simplefield( loggeraction~" by user from Institution:", tree.institution.name, "input", "disabled" ) }}
            {% endif %}
            {#{% if tree.department %}#}
                {#{{ formmacros.simplefield( loggeraction~" by user from Department:", tree.department.name, "input", "disabled" ) }}#}
            {#{% endif %}#}
            {#{% if tree.division %}#}
                {#{{ formmacros.simplefield( loggeraction~" by user from Division:", tree.division.name, "input", "disabled" ) }}#}
            {#{% endif %}#}
            {#{% if tree.service %}#}
                {#{{ formmacros.simplefield( loggeraction~" by user from Service:", tree.service.name, "input", "disabled" ) }}#}
            {#{% endif %}#}
        </div>
    {% endfor %}

{% endmacro %}


{% macro avatarForm(user,cycle) %}

    {% import "OlegUserdirectoryBundle::Default/usermacros.html.twig" as usermacros %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}

    {% if showFlag %}

        <div class="avatar-view-clean-default">
            {% if user.avatar %}
                {{ usermacros.showDocumentAsImage(user.avatar,'Avatar','') }}
            {% else %}
                {% set avatarImage = asset('bundles/oleguserdirectory/fengyuanchen-image-cropper/img/Placeholder-User-Glyph-Icon.png') %}
                <img src="{{ avatarImage }}" alt="Avatar" height="126" width="116">
            {% endif %}

        </div>

    {% else %}

        <div class="container" id="crop-avatar">

            <!-- Current avatar -->
            <div class="avatar-view" title="Change the photo" style="height:126px; width:116px;">
                {#<img src="{{ avatarImage }}" alt="Avatar" height="126" width="116">                #}
                {% if user.avatar %}
                    {{ usermacros.showDocumentAsImage(user.avatar,'Avatar','','objectFull') }}
                {% else %}
                    {% set avatarImage = asset('bundles/oleguserdirectory/fengyuanchen-image-cropper/img/Placeholder-User-Glyph-Icon.png') %}
                    <img src="{{ avatarImage }}" alt="Avatar" height="126" width="116">
                {% endif %}
            </div>

            <!-- Cropping modal -->
            <div class="modal fade" id="avatar-modal" aria-hidden="true" aria-labelledby="avatar-modal-label" role="dialog" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        {#<form class="avatar-form" action="crop-avatar.php" enctype="multipart/form-data" method="post">#}
                        <form class="avatar-form" action="{{ path("employees_save_avatar") }}" enctype="multipart/form-data" method="post">
                            <div class="modal-header">
                                <button class="close" data-dismiss="modal" type="button">&times;</button>
                                <h4 class="modal-title" id="avatar-modal-label">Profile Photo</h4>
                            </div>
                            <div class="modal-body">
                                <div class="avatar-body">

                                    <!-- Upload image and data -->
                                    <div class="avatar-upload">
                                        <input class="avatar-userid" name="avatar_userid" type="hidden" value="{{ user.id }}">
                                        <input class="avatar-src" name="avatar_src" type="hidden">
                                        <input class="avatar-data" name="avatar_data" type="hidden">
                                        <label for="avatarInput">Upload:</label>
                                        <input class="avatar-input" id="avatarInput" name="avatar_file" type="file">
                                    </div>

                                    <!-- Crop and preview -->
                                    <div class="row">
                                        <div class="col-md-9">
                                            <div class="avatar-wrapper"></div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="avatar-preview avatar-preview-default"></div>
                                            {#<div class="avatar-preview preview-lg"></div>#}
                                            {#<div class="avatar-preview preview-md"></div>#}
                                            {#<div class="avatar-preview preview-sm"></div>#}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-default" data-dismiss="modal" type="button">Cancel</button>
                                <button class="btn btn-primary avatar-save" type="button">Save</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div><!-- /.modal -->

            <!-- Loading state -->
            <div class="loading" aria-label="Loading" role="img" tabindex="-1"></div>
        </div>

    {% endif %}

{% endmacro %}


{% macro showAssistantes( user, sitename ) %}

    {% import "OlegUserdirectoryBundle::Default/usermacros.html.twig" as usermacros %}

    {% for location in user.locations %}
        {% if location.assistant %}
            {% if location.assistant|length > 0 %}
                <p style="margin-bottom:0;"><i>{{ location.name }}:</i></p>
            {% endif %}
            {% for assistant in location.assistant %}
                <a href="{{ path(sitename~'_showuser', { 'id': assistant.id }) }}">{{ assistant.getUsernameShortest() }}</a>
                {# phones #}
                {% set phones = assistant.getAllPhones() %}
                {% if phones|length > 0 %}
                    {% for phone in phones %}
                        <p style="margin-bottom:0;">{{ phone['prefix'] }}{{ usermacros.phoneHref(phone['phone']) }}</p>
                    {% endfor %}
                {% endif %}
                {# emails #}
                {% set emails = assistant.getAllEmail() %}
                {% if emails|length > 0 %}
                    {% for email in emails %}
                        <p style="margin-bottom:0;">{{ email['prefix'] }}<a href="mailto:{{ email['email'] }}" target="_top">{{ email['email'] }}</a></p>
                    {% endfor %}
                {% endif %}
            {% endfor %}
        {% endif %}
        {% if location.assistant|length > 0 %}
            <br>
        {% endif %}
    {% endfor %}

{% endmacro %}




{% macro trainingObject( field, cycle, classname, prototype, sitename, entity ) %}
    {% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}
    {% import _self as usermacros %}

    {% if prototype == "prototype" %}
        {% set formfield = field.vars.prototype %}
    {% else %}
        {% set formfield = field %}
    {% endif %}

    {% if formfield.vars.value and formfield.vars.value.status == constant('Oleg\\UserdirectoryBundle\\Entity\\BaseUserAttributes::STATUS_UNVERIFIED') or prototype == 'prototype' %}
        {% set wellclass = "user-alert-warning" %}
    {% else %}
        {% set wellclass = "" %}
    {% endif %}

    {% if "show" in cycle %}
        {% set showFlag = true %}
    {% else %}
        {% set showFlag = false %}
    {% endif %}


    <div class="user-collection-holder alert {{ classname }} {{ wellclass }}">

        {% if cycle != 'show_user' %}
            <div class="text-right">
                <button type="button" class="btn btn-default btn-sm" onClick="removeExistingObject(this,'{{ classname }}')" >
                    <span class="glyphicon glyphicon-remove"></span>
                </button>
            </div>
        {% endif %}

        {{ formmacros.field(formfield.id) }}

        {{ usermacros.statusVerifiedField(formfield,cycle) }}

        {{ formmacros.field_notempty(formfield.degree,cycle) }}

        {#do not hide if itself is empty/unchecked, however hide on the profile view page if the Degree field is empty#}
        {#if the user selects Degree="MD", this checkmark should get automatically get checked, but allow the user to uncheck it#}
        {#{% if formfield.appendDegreeToName is defined %}#}
            {#{% if formfield.vars.value and (formfield.vars.value.appendDegreeToName == 1 or not formfield.vars.value.degree) %}#}
                {#{% set value = 0 %}#}
            {#{% else %}#}
                {#{% set value = 1 %}#}
            {#{% endif %}#}
            {#{{ usermacros.checkbox_notempty(formfield.appendDegreeToName,value,cycle) }}#}
        {#{% endif %}#}
        {% if not showFlag %}
            {{ formmacros.field(formfield.appendDegreeToName) }}
        {% endif %}

        {#hide residency Specialty on view if fellowship Subspecialty is not empty#}
        {% if not showFlag or (showFlag and formfield.vars.value and not formfield.vars.value.fellowshipSubspecialty) %}
            {{ formmacros.field_notempty(formfield.residencySpecialty,cycle) }}
        {% endif %}

        {{ formmacros.field_notempty(formfield.fellowshipSubspecialty,cycle) }}

        {{ formmacros.field(formfield.institution) }}

        {{ formmacros.fieldDateLabel_notempty(formfield.startDate,cycle,'allow-future-date') }}

        {{ formmacros.fieldDateLabel(formfield.completionDate,'allow-future-date') }}
        {% if formfield.completionReason is defined %}
            {{ formmacros.field_notempty(formfield.completionReason,cycle) }}
        {% endif %}

        {{ formmacros.field_notempty(formfield.majors,cycle) }}

        {{ formmacros.field_notempty(formfield.minors,cycle) }}

        {{ formmacros.field_notempty(formfield.honors,cycle) }}

        {{ formmacros.field(formfield.fellowshipTitle) }}

        {#do not hide if itself is empty/unchecked, however hide on the profile view page if the Professional Fellowship field is empty#}
        {#{% if formfield.appendFellowshipTitleToName is defined %}#}
            {#{% if formfield.vars.value and (formfield.vars.value.appendFellowshipTitleToName == 1 or not formfield.vars.value.fellowshipTitle) %}#}
                {#{% set value = 0 %}#}
            {#{% else %}#}
                {#{% set value = 1 %}#}
            {#{% endif %}#}
            {#{{ usermacros.checkbox_notempty(formfield.appendFellowshipTitleToName,value,cycle) }}#}
        {#{% endif %}#}
        {% if not showFlag %}
            {{ formmacros.field(formfield.appendFellowshipTitleToName) }}
        {% endif %}

    </div>


    {% do formfield.setRendered %}

{% endmacro %}


{% macro addNewObjectBtn( cycle, classname, title, addClass ) %}
    {% if cycle != 'show_user' %}

        {% set addClassStr = "" %}
        {% if addClass is defined and addClass %}
            {% set addClassStr = addClass %}
        {% endif %}

        <div style="align-content: center;">
            <button class="btn btn-default {{ addClassStr }}" onClick="addNewObject(this,'{{ classname }}')" type='button'>{{ title }}</button>
        </div>
    {% endif %}
{% endmacro %}


{% macro userUrlLink() %}
    <a href="{{ path(employees_sitename~'_showuser_notstrict', { 'id': 'user_replacement_id' }) }}">{{ 'user_replacement_username' }}</a><br>
{% endmacro %}


{% macro showDocumentAsImage( documentEntity, alt, atr, objectClass ) %}

    {% if not objectClass or objectClass is not defined %}
        {% set objectClass = "objectMaxFull" %}
    {% endif %}

    {% if '.pdf' in documentEntity.getAbsoluteUploadFullPath %}
        {#pdf!!!#}
        {#<a href="{{ documentEntity.getAbsoluteUploadFullPath }}">#}
        <object {{ atr }} alt="{{ documentEntity.getOriginalname }}"
                data="{{ documentEntity.getAbsoluteUploadFullPath }}"
                type="application/pdf"
                class="{{ objectClass }}"
                {#style="display:block; max-width:100%; max-height:100%;"#}
                {#style="display:block; width:100%; height:100%;"#}
        >
        </object>
        {#</a>#}
    {% elseif '.doc' in documentEntity.getAbsoluteUploadFullPath %}
        {#doc!!!#}
        {#<a href="{{ documentEntity.getAbsoluteUploadFullPath }}">#}
        <object {{ atr }} alt="{{ documentEntity.getOriginalname }}"
                data="{{ documentEntity.getAbsoluteUploadFullPath }}"
                type="application/msword"
                {#style="display:block; max-width:100%; max-height:100%;"#}
                class="{{ objectClass }}"
        >
        </object>
        {#</a>#}
    {% else %}
        {#<a href="{{ documentEntity.getAbsoluteUploadFullPath }}">#}
        <img {{ atr }} alt="{{ documentEntity.getOriginalname }}"
             src="{{ documentEntity.getAbsoluteUploadFullPath }}"
             alt="{{ alt }}"
             {#style="display:block; max-width:100%; max-height:100%;"#}
             class="{{ objectClass }}"
        />
        {#</a>#}
    {% endif %}

{% endmacro %}

