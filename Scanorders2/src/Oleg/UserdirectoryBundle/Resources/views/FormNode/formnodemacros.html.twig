
{#add a single form node#}
{% macro addSingleFormNode( formNodeHolder, formNode, formNodeId, formNodeValue, cycle, prototype, count ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {#{% if count %}#}
        {#{% set formNodeId = formNode.id~'_'~count %}#}
    {#{% else %}#}
        {#{% set formNodeId = formNode.id %}#}
    {#{% endif %}#}

    <div id="formnode-{{ formNodeId }}"
         class="formnode-holder formnode-{{ formNodeId }} formnode-holder-{{ formNodeHolder.id }}"
         data-formnodeholderid="{{ formNodeHolder.id }}"
         data-formnodeid="{{ formNodeId }}"
         data-sectionid="{{ count }}"
    >
        {{ formnodemacros.addFormNodeByType(formNodeHolder,formNode,formNodeId,cycle,prototype,count,"single",formNodeValue) }}
    </div>

{% endmacro %}


{#NOT USED: this macro will render formnodes from top to bottom#}
{#{% macro addFormNodes( formNodeHolder, formNode, cycle, prototype ) %}#}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {#{% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}#}

    {#{% if prototype == "prototype" %}#}
        {#{% set formNodeHolder = formNodeFieldHolder.vars.prototype %}#}
    {#{% else %}#}formNodeAddSameSection
        {#{% set formNodeHolder = formNodeFieldHolder %}#}
    {#{% endif %}#}

    {#{% for formNode in formNodeHolder.formNodes %}#}
    {#{% if formNodeHolder.formNode is defined and formNodeHolder.formNode %}#}

        {#{% set rootFormNode = formNodeHolder.formNode %}#}
        {#rootFormNode={{ rootFormNode.name }}<br>#}

        {#<div id="formnode-{{ formNode.id }}"#}
             {#class="formnode-holder formnode-{{ formNode.id }} formnode-holder-{{ formNodeHolder.id }}"#}
             {#data-formnodeholderid="{{ formNodeHolder.id }}"#}
             {#data-formnodeid="{{ formNode.id }}"#}
        {#>#}
            {#{{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}#}
        {#</div>#}

    {#{% endif %}#}
    {#{% endfor %}#}
{#{% endmacro %}#}

{#{% macro addFormNodeRecursively( formNodeHolder, formNode, cycle, prototype ) %}#}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {#{% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}#}

    {#{% set children = formNode.children %}#}
    {#children:{{ children|length }}<br>#}

    {#{% if children %}#}
        {#{% for childFormNode in children %}#}
            {#childFormNode={{ childFormNode.name }}<br>#}

            {#{{ formnodemacros.addFormNodeByType(formNodeHolder,childFormNode,cycle,prototype) }}#}

            {#{% set addRecursion = true %}#}
            {#{% set formType = childFormNode.getObjectType() ~ "" %}#}
            {#{% if formType == "Form Group" %}#}
                {#{% set addRecursion = false %}#}
            {#{% endif %}#}
            {#{% if formType == "Form" %}#}
                {#{% set addRecursion = false %}#}
            {#{% endif %}#}
            {#{% if formType == "Form Section" %}#}
                {#{% set addRecursion = false %}#}
            {#{% endif %}#}
            {#{% if formType == "Form Section Array" %}#}
                {#{% set addRecursion = false %}#}
            {#{% endif %}#}
            {#{% if addRecursion %}#}
                {#{{ formnodemacros.addFormNodeRecursively(formNodeHolder,childFormNode,cycle,prototype) }}#}
            {#{% endif %}#}

        {#{% endfor %}#}
    {#{% else %}#}
        {#$this->addFormNodeByType($form,$formNode,$params);#}
        {#{{ formnodemacros.addFormNodeByType(formNodeHolder,formNode,cycle,prototype) }}#}
    {#{% endif %}#}

{#{% endmacro %}#}



{% macro addFormNodeWithChildren( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {#render form group, form, section ect as single form element (single='single') or as section with all children fields inside (single=null) #}
    {% set single = null %}

    <div id="formnode-{{ formNode.id }}"
         class="formnode-holder formnode-{{ formNode.id }} formnode-holder-{{ formNodeHolder.id }}"
         data-formnodeholderid="{{ formNodeHolder.id }}"
         data-formnodeid="{{ formNode.id }}"
         data-sectionid="0"
    >
        {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype,0,single) }}
    </div>
{% endmacro %}
{% macro addFormNodeRecursively( formNodeHolder, formNode, cycle, prototype, count, single ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {% set children = formNode.children %}
    {#children:{{ children|length }}<br>#}

    {% if children %}
        {% for childFormNode in children %}
            {#childFormNode={{ childFormNode.name }}<br>#}

            {{ formnodemacros.addFormNodeByType(formNodeHolder,childFormNode,cycle,prototype,count,single) }}

            {% set addRecursion = true %}
            {% set formType = childFormNode.getObjectType() ~ "" %}

            {% if formType == "Form Group" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if formType == "Form" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if formType == "Form Section" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if formType == "Form Section Array" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if addRecursion %}
                {{ formnodemacros.addFormNodeRecursively(formNodeHolder,childFormNode,cycle,prototype,count,single) }}
            {% endif %}

        {% endfor %}
    {% else %}
        {#$this->addFormNodeByType($form,$formNode,$params);#}
        {{ formnodemacros.addFormNodeByType(formNodeHolder,formNode,cycle,prototype,count,single) }}
    {% endif %}

{% endmacro %}

                            {#formNodeHolder, formNode, cycle, prototype,"single",0,formNodeValue#}
{% macro addFormNodeByType( formNodeHolder, formNode, formNodeId, cycle, prototype, count, single, formNodeValue ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {% if formNode.type == "default" or formNode.type == "user-added" %}

        {% set formType = null %}
        {% if formNode.objectType %}
            {% set formType = formNode.getObjectType().getName() %}
        {% endif %}
        {#formType={{ formType }}<br>#}

        {#{% if formType %}#}
            {#<p>{{ formNodeHolder.name }}</p>#}
        {#{% endif %}#}

        {% if formType == "Form" %}
            {% if single is defined and single == 'single' %}
                {{ formnodemacros.formForm(formNodeHolder,formNode,formNodeId,cycle,prototype,single) }}
            {% else %}
                {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,formNodeId,cycle,prototype) }}
            {% endif %}
        {% endif %}

        {% if formType == "Form Section" %}
            {{ formnodemacros.sectionForm(formNodeHolder,formNode,formNodeId,cycle,prototype,single) }}
        {% endif %}

        {% if formType == "Form Section Array" %}
            {{ formnodemacros.sectionArrayForm(formNodeHolder,formNode,formNodeId,count,cycle,prototype,single) }}
        {% endif %}

        {% if formType == "Form Field - Free Text" %}
            {{ formnodemacros.textareaForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}
        {% if formType == "Form Field - Free Text, RTF" %}
            {{ formnodemacros.textareaForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,"RTF") }}
        {% endif %}
        {% if formType == "Form Field - Free Text, HTML" %}
            {{ formnodemacros.textareaForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,"HTML") }}
        {% endif %}

        {% if formType == "Form Field - Free Text, Single Line" %}
            {{ formnodemacros.stringForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Dropdown Menu" %}
            {{ formnodemacros.dropdownForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}
        {% if formType == "Form Field - Dropdown Menu - Allow Multiple Selections" %}
            {{ formnodemacros.dropdownForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,"multiple") }}
        {% endif %}

        {% if formType == "Form Field - Date" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,'m/d/Y') }}
        {% endif %}
        {% if formType == "Form Field - Full Date" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,'m/d/Y') }}
        {% endif %}
        {% if formType == "Form Field - Full Date and Time" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,'m/d/Y') }}
        {% endif %}
        {% if formType == "Form Field - Year" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype,'m/d/Y') }}
        {% endif %}

        {#the same as dropdown menu#}
        {% if formType == "Form Field - Month" %}
            {{ formnodemacros.dropdownForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}
        {% if formType == "Form Field - Day of the Week" %}
            {{ formnodemacros.dropdownForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Checkbox" %}
            {{ formnodemacros.checkboxForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Radio Button" %}
            {{ formnodemacros.radioForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Time" %}
            {{ formnodemacros.timeForm(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) }}
        {% endif %}

    {% else %}
        {#<br>#}
    {% endif %}

{% endmacro %}

{% macro formForm( formNodeHolder, formNode, formNodeId, cycle, prototype, single ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#formnode-section-{{ formNodeId }}">
                    {{ formNode.name }}
                </a>
            </h4>
        </div>
        <div id="formnode-section-{{ formNodeId }}" class="panel-collapse collapse in">
            <div class="panel-body form-nodes-holder">
                <div class="row">
                    <div class="col-xs-12" align="left">

                        {#render children of this section#}
                        {% if single is defined and single == 'single' %}

                        {% else %}
                            {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
                        {% endif %}

                    </div>
                </div>
            </div> <!-- panel-body -->
        </div> <!-- panel-collapse -->
    </div> <!-- panel panel-default -->
{% endmacro %}

{% macro sectionForm( formNodeHolder, formNode, formNodeId, cycle, prototype, single ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {#History/Findings    #}
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#formnode-section-{{ formNodeId }}">
                    {{ formNode.name }}
                </a>
            </h4>
        </div>
        <div id="formnode-section-{{ formNodeId }}" class="panel-collapse collapse in">
            <div class="panel-body form-nodes-holder">
                <div class="row">
                    <div class="col-xs-12" align="left">

                        {#render children of this section#}
                        {% if single is defined and single == 'single' %}

                        {% else %}
                            {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
                        {% endif %}

                    </div>
                </div>
            </div> <!-- panel-body -->
        </div> <!-- panel-collapse -->
    </div> <!-- panel panel-default -->

{% endmacro %}


{% macro sectionArrayForm( formNodeHolder, formNode, formNodeId, count, cycle, prototype, single ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set panelId = "formnode_"~formNode.id~"_section_arraysectioncount_"~count~"_node_"~formNode.id %}

    <div id="formnode-arraysection-holder-{{ formNodeId }}" class="formnode-arraysection-holder formnode-arraysection-holder-{{ formNodeId }}" data-sectionid="{{ count }}">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#{{ panelId }}">
                    {{ formNode.name }}
                </a>

                <div class="pull-right">
                <button id="formnode-add-section-{{ formNodeId }}" type="button"
                        class="btn btn-default btn-xs formnode-add-section formnode-add-section-{{ formNodeId }}"
                        onclick="formNodeAddSameSection(this,'{{ formNodeId }}')">+</button>

                <button id="formnode-remove-section-{{ formNodeId }}" type="button"
                        class="btn btn-default btn-xs formnode-remove-section formnode-remove-section-{{ formNodeId }}"
                        style="display: none;"
                        onclick="formNodeRemoveSection(this,'{{ formNodeId }}')">-</button>
                </div>
            </h4>
        </div>
        <div id="{{ panelId }}" class="panel-collapse collapse in">
            <div class="panel-body form-nodes-holder">
                <div class="row">
                    <div class="col-xs-12" align="left">

                        {#render children of this section#}
                        {% if single is defined and single == 'single' %}

                        {% else %}
                            {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
                        {% endif %}

                    </div>
                </div>
            </div> <!-- panel-body -->
        </div> <!-- panel-collapse -->
    </div> <!-- panel panel-default -->
    </div>

{% endmacro %}

{# getFieldName array section #}
{% macro getFieldName( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% set fieldname = "formnode["~formNode.id~"]" %}
    {% set parentFormType = null %}
    {% if formNode.parent and formNode.parent.objectType %}
        {% set parentFormType = formNode.parent.getObjectType().getName() %}
        {% if parentFormType == "Form Section Array" %}
            {% set fieldname = "formnode["~formNode.parent.id~"][arraysectioncount]["~count~"][node]["~formNode.id~"]" %}
        {% endif %}{% endif %}{{fieldname}}{% endmacro %}
{# EOF getFieldName array section #}

{% macro textareaForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, type ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.textareaField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, type) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.textareaField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, type) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro textareaField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, type ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {#"oleg_userdirectorybundle_formnode[{{ formNode.id }}]"#}
    {% if formNodeValue %}
        {% set fieldValue = formNodeValue %}
    {% else %}
        {% set fieldValue = '' %}
    {% endif %}
    {#cycle={{ cycle }}<br>#}
    {% if cycle != 'show' %}
        {% set disabled = "" %}
    {% else %}
        {% set disabled = "disabled" %}
    {% endif %}
    {#disabled={{ disabled }}<br>#}

    {% if type == "HTML" %}
        {% set fieldValue = fieldValue|raw %}
    {% endif %}
    {% if type == "RTF" %}
        {#{% set fieldValue = fieldValue|raw %}#}
    {% endif %}

    <textarea
            id="oleg_userdirectorybundle_formnode_{{ formNodeId }}"
            name="{{ fieldname }}"
            class="textarea form-control"
            rows="10"
            {{ disabled }}
    >{{fieldValue}}</textarea>
{% endmacro %}

{% macro stringForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.stringField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.stringField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro stringField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {% if formNodeValue %}
        {% set fieldValue = formNodeValue %}
    {% else %}
        {% set fieldValue = user_formnode_utility.getDefaultValue(formNode) %}
    {% endif %}
    {#cycle={{ cycle }}<br>#}
    {% if cycle != 'show' %}
        {% set disabled = "" %}
        {% set placeholder = formNode.placeholder %}
    {% else %}
        {% set disabled = "disabled" %}
        {% set placeholder = " " %}
    {% endif %}
    <input
        id="oleg_userdirectorybundle_formnode_{{ formNodeId }}"
        name="{{ fieldname }}"
        class="form-control"
        value="{{ fieldValue }}"
        placeholder="{{ placeholder }}"
        {{ disabled }}
    >
    </input>
{% endmacro %}


{% macro dropdownForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, multiple ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.dropdownField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, multiple) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.dropdownField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, multiple) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro dropdownField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, multiple ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {#get dropdown values by getDropdownValue (user_formnode_utility)#}
    {% set dropdownValues = user_formnode_utility.getDropdownValue(formNode) %}

    {#dropdownValues={{ dropdownValues|length }}#}

    {% if cycle != 'show' %}
        {% set disabled = "" %}
        {% set placeholder = formNode.placeholder %}
    {% else %}
        {% set disabled = "disabled" %}
        {% set placeholder = " " %}
    {% endif %}

    {% if multiple == 'multiple' %}
        {#multiple="multiple"#}
        {% set multipleOption = 'multiple="multiple"' %}
        {% set selectName = fieldname~'[]' %}
    {% else %}
        {% set multipleOption = '' %}
        {% set selectName = fieldname %}
    {% endif %}

    <select
            id="oleg_userdirectorybundle_formnode_{{ formNodeId }}"
            name="{{ selectName }}"
            class="combobox"
            data-placeholder="{{ placeholder }}"
            {{ disabled }}
            {{ multipleOption }}
    >
        <option value=""></option>
        {% for dropdownValue in dropdownValues %}
            {% set selected = false %}
            {% if multiple == 'multiple' %}
                {% if formNodeValue and dropdownValue.id in formNodeValue %}
                    {% set selected = true %}
                {% endif %}
            {% else %}
                {% if formNodeValue and dropdownValue.id == formNodeValue %}
                    {% set selected = true %}
                {% endif %}
            {% endif %}
            {% if selected %}
                <option value="{{ dropdownValue.id }}" selected>{{ dropdownValue.text|raw }}</option>
            {% else %}
                <option value="{{ dropdownValue.id }}">{{ dropdownValue.text|raw }}</option>
            {% endif %}
        {% endfor %}
    </select>

{% endmacro %}


{% macro dateForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, dateFormat ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.dateField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, dateFormat) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.dateField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, dateFormat) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro dateField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype, dateFormat ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {% if formNodeValue %}
        {% set fieldValue = formNodeValue %}
    {% else %}
        {% set fieldValue = null %}
    {% endif %}
    {% if cycle != 'show' %}
        {% set disabled = "" %}
        {% set placeholder = formNode.placeholder %}
    {% else %}
        {% set disabled = "disabled" %}
        {% set placeholder = " " %}
    {% endif %}
    <div class="input-group input-group-reg date regular-datepicker">
        <input
                type="text"
                id="oleg_userdirectorybundle_formnode_{{ formNodeId }}"
                name="{{ fieldname }}"
                class="datepicker form-control"
                {#value="{{ fieldValue|date(dateFormat) }}"#}
                value="{{ fieldValue }}"
                placeholder="{{ placeholder }}"
                {{ disabled }}
        >
        <span class="input-group-addon calendar-icon-button"><i class="glyphicon glyphicon-calendar"></i></span>
    </div>
{% endmacro %}


{% macro checkboxForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6 text-center" align="left" style="width: 50px;">
                {{ formnodemacros.checkboxField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.checkboxField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro checkboxField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {% if formNodeValue %}
        {% set fieldValue = "checked" %}
    {% else %}
        {% set fieldValue = null %}
    {% endif %}
    {% if cycle != 'show' %}
        {% set disabled = "" %}
    {% else %}
        {% set disabled = "disabled" %}
    {% endif %}

    <input
            type="checkbox"
            id="oleg_userdirectorybundle_formnode_{{ formNodeId }}"
            name="{{ fieldname }}"
            class="form-control"
            {{ disabled }}
            {{ fieldValue }}
            value="1"
    >
{% endmacro %}


{% macro radioForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.radioField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.radioField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro radioField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {#get dropdown values by getDropdownValue (user_formnode_utility)#}
    {% set dropdownValues = user_formnode_utility.getDropdownValue(formNode) %}

    {% if cycle != 'show' %}
        {% set disabled = "" %}
    {% else %}
        {% set disabled = "disabled" %}
    {% endif %}

    <div id="oleg_orderformbundle_messagetype_purpose" class="horizontal_type">
        {% for dropdownValue in dropdownValues %}
            {% if formNodeValue and dropdownValue.id == formNodeValue %}
                {% set checked = 'checked="checked"' %}
            {% else %}
                {% set checked = '' %}
            {% endif %}
            <div class="radio_inline">
                <input
                    type="radio"
                    id="oleg_userdirectorybundle_formnode_{{ formNodeId }}"
                    name="{{ fieldname }}"
                    value="{{ dropdownValue.id }}"
                    {{ checked }}
                    {{ disabled }}
                >
                <label class="required">
                    {{ dropdownValue.text }}
                </label>
            </div>
        {% endfor %}
    </div>

{% endmacro %}

{% macro timeForm( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.timeField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.timeField(formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro timeField( formNodeHolder, formNode, formNodeId, formNodeValue, count, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {% set fieldname = formnodemacros.getFieldName(formNodeHolder,formNode,formNodeId,formNodeValue,count,cycle,prototype) %}

    {#get dropdown values by getDropdownValue (user_formnode_utility)#}
    {% set dropdownValues = user_formnode_utility.getDropdownValue(formNode) %}

    {% if cycle != 'show' %}
        {% set disabled = "" %}
    {% else %}
        {% set disabled = "disabled" %}
    {% endif %}

    {% set hour = formNodeValue|date('H') %}
    {% set minute = formNodeValue|date('i') %}

    <div>
        <select
            id="oleg_userdirectorybundle_formnode_{{ formNodeId }}_time_hour"
            name="{{ fieldname }}[time][hour]"
            {{ disabled }}
        >
            {#<option value="0">00</option>#}
            {#<option value="1">23</option>#}
            {% for i in 0..23 %}
                {% set selected = "" %}
                {% if hour == i %}
                    {% set selected = "selected" %}
                {% endif %}
                <option value="{{ i }}" {{ selected }}>{{ i }}</option>
            {% endfor %}
        </select>:<select
            id="oleg_userdirectorybundle_formnode_{{ formNodeId }}_time_minute"
            name="{{ fieldname }}[time][minute]"
            {{ disabled }}
        >
            {#<option value="0">00</option>#}
            {#<option value="1">59</option>#}
            {% for i in 0..59 %}
                {% set selected = "" %}
                {% if minute == i %}
                    {% set selected = "selected" %}
                {% endif %}
                <option value="{{ i }}" {{ selected }}>{{ i }}</option>
            {% endfor %}
        </select>
    </div>

{% endmacro %}

