
{#add a single form node#}
{% macro addSingleFormNode( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    <div id="formnode-holder-{{ formNode.id }}"
         class="formnode-holder formnode-holder-{{ formNodeHolder.id }}"
         data-formnodeholderid="{{ formNodeHolder.id }}"
         data-formnodeid="{{ formNode.id }}"
    >
        {{ formnodemacros.addFormNodeByType(formNodeHolder,formNode,cycle,prototype,"single",formNodeValue) }}
    </div>

{% endmacro %}


{#this macro will render formnodes from top to bottom#}
{% macro addFormNodes( formNodeHolder, formNode, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {#{% if prototype == "prototype" %}#}
        {#{% set formNodeHolder = formNodeFieldHolder.vars.prototype %}#}
    {#{% else %}#}
        {#{% set formNodeHolder = formNodeFieldHolder %}#}
    {#{% endif %}#}

    {#{% for formNode in formNodeHolder.formNodes %}#}
    {#{% if formNodeHolder.formNode is defined and formNodeHolder.formNode %}#}

        {#{% set rootFormNode = formNodeHolder.formNode %}#}
        {#rootFormNode={{ rootFormNode.name }}<br>#}

        <div id="formnode-holder-{{ formNode.id }}"
             class="formnode-holder formnode-holder-{{ formNodeHolder.id }}"
             data-formnodeholderid="{{ formNodeHolder.id }}"
             data-formnodeid="{{ formNode.id }}"
        >
            {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
        </div>

    {#{% endif %}#}
    {#{% endfor %}#}
{% endmacro %}

{% macro addFormNodeRecursively( formNodeHolder, formNode, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {% set children = formNode.children %}
    {#children:{{ children|length }}<br>#}

    {% if children %}
        {% for childFormNode in children %}
            {#childFormNode={{ childFormNode.name }}<br>#}

            {{ formnodemacros.addFormNodeByType(formNodeHolder,childFormNode,cycle,prototype) }}

            {% set addRecursion = true %}
            {% set formType = childFormNode.getObjectType() ~ "" %}
            {% if formType == "Form Group" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if formType == "Form" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if formType == "Form Section" %}
                {% set addRecursion = false %}
            {% endif %}
            {% if addRecursion %}
                {{ formnodemacros.addFormNodeRecursively(formNodeHolder,childFormNode,cycle,prototype) }}
            {% endif %}

        {% endfor %}
    {% else %}
        {#$this->addFormNodeByType($form,$formNode,$params);#}
        {{ formnodemacros.addFormNodeByType(formNodeHolder,formNode,cycle,prototype) }}
    {% endif %}

{% endmacro %}

{% macro addFormNodeByType( formNodeHolder, formNode, cycle, prototype, single, formNodeValue ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    {#formNode.id={{ formNode.id }}<br>#}

    {% if formNode.visible %}

        {% set formType = null %}
        {% if formNode.objectType %}
            {% set formType = formNode.getObjectType().getName() %}
        {% endif %}
        {#formType={{ formType }}<br>#}

        {#{% if formType %}#}
            {#<p>{{ formNodeHolder.name }}</p>#}
        {#{% endif %}#}

        {% if formType == "Form" %}
            {% if single is defined and single == 'single' %}
                {{ formnodemacros.formForm(formNodeHolder,formNode,cycle,prototype,single) }}
            {% else %}
                {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
            {% endif %}
        {% endif %}

        {% if formType == "Form Section" %}
            {{ formnodemacros.sectionForm(formNodeHolder,formNode,cycle,prototype,single) }}
        {% endif %}

        {% if formType == "Form Field - Free Text" %}
            {{ formnodemacros.textareaForm(formNodeHolder,formNode,formNodeValue,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Free Text, Single Line" %}
            {{ formnodemacros.stringForm(formNodeHolder,formNode,formNodeValue,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Dropdown Menu" %}
            {{ formnodemacros.dropdownForm(formNodeHolder,formNode,formNodeValue,cycle,prototype) }}
        {% endif %}

        {% if formType == "Form Field - Date" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeValue,cycle,prototype) }}
        {% endif %}
        {% if formType == "Form Field - Full Date" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeValue,cycle,prototype) }}
        {% endif %}
        {% if formType == "Form Field - Full Date and Time" %}
            {{ formnodemacros.dateForm(formNodeHolder,formNode,formNodeValue,cycle,prototype) }}
        {% endif %}

    {% else %}
        {#<br>#}
    {% endif %}

{% endmacro %}

{% macro formForm( formNodeHolder, formNode, cycle, prototype, single ) %}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#formnode-section-{{ formNode.id }}">
                    {{ formNode.name }}
                </a>
            </h4>
        </div>
        <div id="formnode-section-{{ formNode.id }}" class="panel-collapse collapse in">
            <div class="panel-body form-nodes-holder">
                <div class="row">
                    <div class="col-xs-12" align="left">

                        {#render children of this section#}
                        {% if single is defined and single == 'single' %}

                        {% else %}
                            {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
                        {% endif %}

                    </div>
                </div>
            </div> <!-- panel-body -->
        </div> <!-- panel-collapse -->
    </div> <!-- panel panel-default -->
{% endmacro %}

{% macro sectionForm( formNodeHolder, formNode, cycle, prototype, single ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}

    {#History/Findings    #}
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a data-toggle="collapse" href="#formnode-section-{{ formNode.id }}">
                    {{ formNode.name }}
                </a>
            </h4>
        </div>
        <div id="formnode-section-{{ formNode.id }}" class="panel-collapse collapse in">
            <div class="panel-body form-nodes-holder">
                <div class="row">
                    <div class="col-xs-12" align="left">

                        {#render children of this section#}
                        {% if single is defined and single == 'single' %}

                        {% else %}
                            {{ formnodemacros.addFormNodeRecursively(formNodeHolder,formNode,cycle,prototype) }}
                        {% endif %}

                    </div>
                </div>
            </div> <!-- panel-body -->
        </div> <!-- panel-collapse -->
    </div> <!-- panel panel-default -->

{% endmacro %}

{% macro textareaForm( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {#<textarea#}
                        {#id="oleg_userdirectorybundle_formnode_{{ formNode.id }}"#}
                        {#name="oleg_userdirectorybundle_formnode[{{ formNode.id }}]"#}
                        {#class="textarea form-control"#}
                {#>#}
                {#</textarea>#}
                {{ formnodemacros.textareaField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {#<div class="col-xs-12" align="left">#}
        {#<textarea#}
                {#id="oleg_userdirectorybundle_formnode_{{ formNode.id }}"#}
                {#name="oleg_userdirectorybundle_formnode[{{ formNode.id }}]"#}
                {#class="textarea form-control"#}
        {#>#}
        {#</textarea>#}
        {#</div>#}
        {{ formnodemacros.textareaField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro textareaField( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {#"oleg_userdirectorybundle_formnode[{{ formNode.id }}]"#}
    formNodeValue={{ formNodeValue }}
    {% if formNodeValue %}
        {% set fieldValue = formNodeValue %}
    {% else %}
        {% set fieldValue = null %}
    {% endif %}
    {% set fieldname = "formnode-"~formNode.id %}
    <textarea
            id="oleg_userdirectorybundle_formnode_{{ formNode.id }}"
            name="{{ fieldname }}"
            class="textarea form-control"
    >
        {{ fieldValue }}
    </textarea>
{% endmacro %}

{% macro stringForm( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.stringField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.stringField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro stringField( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {% set fieldname = "formnode-"~formNode.id %}
    formNodeValue={{ formNodeValue }}
    {% if formNodeValue %}
        {% set fieldValue = formNodeValue %}
    {% else %}
        {% set fieldValue = user_formnode_utility.getDefaultValue(formNode) %}
    {% endif %}
    <input
        id="oleg_userdirectorybundle_formnode_{{ formNode.id }}"
        name="{{ fieldname }}"
        class="form-control"
        value="{{ fieldValue }}"
        placeholder="{{ formNode.placeholder }}"
    >
    </input>
{% endmacro %}


{% macro dropdownForm( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.dropdownField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.dropdownField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro dropdownField( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {% set fieldname = "formnode-"~formNode.id %}

    {#get dropdown values by getDropdownValue (user_formnode_utility)#}
    {% set dropdownValues = user_formnode_utility.getDropdownValue(formNode) %}

    {#dropdownValues={{ dropdownValues|length }}#}

    <select
            id="oleg_userdirectorybundle_formnode_{{ formNode.id }}"
            name="{{ fieldname }}"
            class="combobox"
            data-placeholder="{{ formNode.placeholder }}"
    >
        <option value=""></option>
        {% for dropdownValue in dropdownValues %}
            {###########dropdownValue.text:{{ dropdownValue.text }}#}
            <option value="{{ dropdownValue.id }}">{{ dropdownValue.text }}</option>
        {% endfor %}
    </select>

{% endmacro %}


{% macro dateForm( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {#{% import "OlegOrderformBundle::Default/formmacros.html.twig" as formmacros %}#}
    {% import "OlegUserdirectoryBundle::FormNode/formnodemacros.html.twig" as formnodemacros %}
    <p>
    {% if formNode.showLabel %}
        <div class="row">
            <div class="col-xs-6" align="right">
                <label>{{ formNode.name }}:</label>
            </div>
            <div class="col-xs-6" align="left">
                {{ formnodemacros.dateField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
            </div>
        </div>
    {% else %}
        {{ formnodemacros.dateField(formNodeHolder, formNode, formNodeValue, cycle, prototype) }}
    {% endif %}
    </p>
{% endmacro %}
{% macro dateField( formNodeHolder, formNode, formNodeValue, cycle, prototype ) %}
    {% set fieldname = "formnode-"~formNode.id %}
    <div class="input-group input-group-reg date regular-datepicker">
        <input
                type="text"
                id="oleg_userdirectorybundle_formnode_{{ formNode.id }}"
                name="{{ fieldname }}"
                class="datepicker form-control"
        >
        <span class="input-group-addon calendar-icon-button"><i class="glyphicon glyphicon-calendar"></i></span>
    </div>
{% endmacro %}
