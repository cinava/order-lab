<?php

namespace Oleg\OrderformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Oleg\OrderformBundle\Entity\PatientMrn;
use Symfony\Component\Serializer\Exception\LogicException;
use Oleg\OrderformBundle\Entity\Patient;


/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends EntityRepository
{

    const STATUS_RESERVED = "reserved";
    const STATUS_VALID = "valid";

    //make sure the uniqueness entity. Make new or return id of existing.
    public function processEntity( $patient, $orderinfo = null ) {


        $em = $this->_em;

        $patient = $em->getRepository('OlegOrderformBundle:Specimen')->removeDuplicateEntities( $patient );

        $found = $this->isExisted($patient);

        if( $found ) {
            //case 1 - existed but empty with STATUS_RESERVED; User press check with empty MRN field => new MRN was generated
            //Case 2 - existed and STATUS_VALID; User entered existed MRN
            //echo "case 1 and 2 <br>";
            foreach( $patient->getSpecimen() as $specimen ) {
                $found->addSpecimen( $specimen );
            }
            return $this->setResult( $found, $orderinfo, $patient ); //provide found object, cause we need id
        } else {
            if( count($patient->getMrn()) > 0 ) {
                //Case 3 - User entered new MRN, not existed in DB
                //echo "case 3 <br>";
                return $this->setResult( $patient, $orderinfo );
            } else {
                //Case 4 - MRN is not provided.
                //echo "case 4 <br>";
                if( $orderinfo ) {
                    $provider = $orderinfo->getProvider()->first();
                } else {
                    $provider = null;
                }
                $newPatient = $this->createPatient(self::STATUS_VALID,$provider);
                foreach( $patient->getSpecimen() as $specimen ) {
                    $newPatient->addSpecimen( $specimen );
                }
                return $this->setResult( $newPatient, $orderinfo, $patient );
            }
        }

    }

    //patient is a patient object found in DB
    //original is a patient object provided by submitted form
    public function setResult( $patient, $orderinfo = null, $original=null ) {
              
        $em = $this->_em;

        $patient->setStatus(self::STATUS_VALID);

//        echo "patient=".$patient."<br>";
//        echo "count names=".count($patient->getName())."<br>";
//        echo "patient mrn=".$patient->getMrn()->first()."<br>";
//        echo "patient name=".$patient->getName()->first()."<br>";
//        echo "patient sex=".$patient->getSex()->first()."<br>";
//        echo "patient dob=".$patient->getDob()->first()."<br>";
//        echo "patient age=".$patient->getAge()->first()."<br>";
//        echo "patient age=".$patient->getAge()->first()."<br>";
//        echo "patient clinHist=".$patient->getClinicalHistory()->first()."<br>";

        $em->persist($patient);

        if( $orderinfo == null ) {
            return $patient;
        }

        $patient = $this->processPatientFieldArrays($patient,$orderinfo,$original);
        //echo "patient after mrn provider=".$patient->getMrn()->first()->getProvider()."<br>";

        $specimens = $patient->getSpecimen();
        //echo "specimen count in patient=".count($specimens)."<br>";
             
        foreach( $specimens as $specimen ) {   
                            
            if( $em->getRepository('OlegOrderformBundle:Specimen')->notExists($specimen) ) {     //specimen new               
                $patient->removeSpecimen( $specimen );
                //echo "specimen0: ".$specimen."<br>";
                $specimen = $em->getRepository('OlegOrderformBundle:Specimen')->processEntity( $specimen, null, $specimen->getAccession(), $orderinfo );
                //echo "specimen1: ".$specimen."<br>";
                $patient->addSpecimen($specimen);
                $orderinfo->addSpecimen($specimen);
            } else {         //specimen from DB     
                //echo "specimen from DB continue id=".$specimen->getId()."<br>";
                continue;              
            }
            
        }

//        echo "patient=".$patient."<br>";
        //echo "count mrn=".count($patient->getMrn())."<br>";
//        echo "patient id=".$patient->getId()."<br>";
//        echo "<br>patient mrn=".$patient->getMrn()->first()."<br>";
//        echo "patient mrn provider=".$patient->getMrn()->first()->getProvider()."<br>";
        //echo "original mrn provider=".$original->getMrn()->first()->getProvider()."<br>";
//        echo "patient name count=".count($patient->getName())."<br>";
//        echo "patient name=".$patient->getName()->first()."<br>";
//        echo "patient sex count=".count($patient->getSex())."<br>";
//        echo "patient sex=".$patient->getSex()->first()."<br>";
//        echo "patient dob=".$patient->getDob()->first()."<br>";
//        echo "patient age=".$patient->getAge()->first()."<br>";
//        echo "patient age=".$patient->getAge()->first()."<br>";
//        echo "patient clinHist=".$patient->getClinicalHistory()->first()."<br>";
//        echo $patient."<br>";
        //exit();

        return $patient;
    }

    //filter out duplicate virtual (in form, not in DB) patients
    //after js check form, theoretically we should not have duplicate entities submitted by the form, but let's have it just in case ...
    public function removeDuplicateEntities( $entity ) {

        $patients = $entity->getPatient();

        if( count($patients) == 1 ) {
            return $entity;
        }

        $mrns = array();

        foreach( $patients as $patient ) {

//            foreach( $patient->getClinicalHistory() as $hist ) {
//                echo "hist id=".$hist->getId()."<br>";
//            }

            $mrn = $patient->getMrn();

            if( $mrn != null && $mrn != "" ) {
                if( count($mrns) == 0 || !in_array($mrn, $mrns) ) {
                    $mrns[] = $mrn;
                    //persist the rest of entities, because they will be added to DB.
                    $em = $this->_em;
                    $em->persist($patient);
                } else {
                    //echo "remove pat:".$patient;
                    $entity->removePatient($patient);
                }
            }
        }

        return $entity;
    }

    //check by ID
    public function notExists($entity) {
        $id = $entity->getId();
        if( !$id ) {
            return true;
        }      
        $em = $this->_em;
        $found = $em->getRepository('OlegOrderformBundle:Patient')->findOneById($id);       
        if( null === $found ) {
            return true;
        } else {
            return false;
        }
    }

    //check the last NOMRNPROVIDED MRN in DB and construct next available MRN
    public function getNextMrn() {

        $query = $this->getEntityManager()
            ->createQuery('
            SELECT MAX(pmrn.field) as maxmrn FROM OlegOrderformBundle:Patient p
            JOIN p.mrn pmrn
            WHERE pmrn.field LIKE :mrn'
            )->setParameter('mrn', '%NOMRNPROVIDED%');

        $lastMrn = $query->getSingleResult();
        $lastMrnStr = $lastMrn['maxmrn'];
        //echo "lastMrnStr=".$lastMrnStr."<br>";
        $mrnIndexArr = explode("-",$lastMrnStr);
        //echo "count=".count($mrnIndexArr)."<br>";
        if( count($mrnIndexArr) > 1 ) {
            $mrnIndex = $mrnIndexArr[1];
        } else {
            $mrnIndex = 0;
        }
        $mrnIndex = ltrim($mrnIndex,'0') + 1;
        $paddedmrn = str_pad($mrnIndex,10,'0',STR_PAD_LEFT);
        //echo "paddedmrn=".$paddedmrn."<br>";
        //exit();
        return 'NOMRNPROVIDED-'.$paddedmrn;
    }

    //check if the patient with its mrn is existed in DB
    //return: null - not existed, entity object if existed
    public function isExisted( $patient ) {

        if( !$patient ) {
            //echo "patient is null <br>";
            return null;
        }

        //echo "patient mrn count=".count($patient->getMrn())."<br>";

        if( $patient->getMrn() == "" || $patient->getMrn() == null ) {
            return null;
        }

//        return $this->findOneBy(array('mrn' => $patient->getMrn()));
        $em = $this->_em;
        if( count($patient->getMrn())>0 ) {
            $entity = null;
            foreach( $patient->getMrn() as $mrn ) {
                //echo "entity mrn=".$mrn->getField()."<br>";
                $entity = $em->getRepository('OlegOrderformBundle:Patient')->findOneByIdJoinedToMrn( $mrn->getField() );
                return $entity; //return first patient. In theory we should have only one MRN in the submitting patient
            }
        } else {
            //echo "entity null <br>";
            $entity = null;
        }
        return $entity;
    }

    public function createPatient( $status = null, $provider = null ) {
        if( !$status ) {
            $status = self::STATUS_RESERVED;
        }
        $em = $this->_em;
        $mrnValue = $this->getNextMrn();
        //echo "mrnValue=".$mrnValue;

        $mrn = new PatientMrn(1);
        $mrn->setField($mrnValue);
        if( $provider ) {
            $mrn->setProvider($provider);
        }

        $patient = new Patient();
        $patient->addMrn($mrn);
        $patient->setStatus($status);
        $em->persist($patient);
        //exit();
        $em->flush();
        return $patient;
    }

    //copy all children from original to patient and assign a user provider
    public function processPatientFieldArrays( $patient, $orderinfo, $original=null ) {

        if( !$orderinfo || count($orderinfo->getProvider()) == 0 ) {
            //return $patient;
        }

        $provider = $orderinfo->getProvider()->first(); //assume orderinfo has only one provider.
        //echo "mrn=".$patient->getMrn()->first().", hist count=".count($patient->getClinicalHistory()).", provider=".$provider."<br>";

        $em = $this->_em;
        $patient = $em->getRepository('OlegOrderformBundle:PatientMrn')->processFieldArrays($patient, $provider, $original);

        return $patient;
    }

//    //TODO: make it as a generic method (move it to util class): process single array of fields (i.e. ClinicalHistory Array of Fields)
//    public function processFieldArrays($entity, $provider, $original=null) {
//
//        //$class_methods = get_class_methods($dest);
//        $class = new \ReflectionClass($entity);
//        $className = $class->getShortName();
//        //echo "className=".$className."<br>";
//        //$parent = $class->getParentClass();
//
//        $class_methods = $class->getMethods(\ReflectionMethod::IS_PUBLIC);
//        foreach( $class_methods as $method_name ) {
//
//            $methodShortName = $method_name->getShortName();    //getMrn
//
//            if( strpos($methodShortName,'get') !== false ) {    //&& $methodShortName != 'getId' ) { //filter in only "get" methods
//
//                echo " method=".$methodShortName."=>";
//                if( $original ) {
//                    $fields = $original->$methodShortName();
//                } else {
//                    $fields = $entity->$methodShortName();
//                }
//                //echo "count=".count($fields)."<br>";
//
//                if( is_object($fields) ) {  //for every field in array (usually, only one item exists)
//
//                    $validitySet = false;   //indicate that validity has not been set in this field array
//
//                    foreach( $fields as $field ) {  //original fields from submitted form
//
//                        if( is_object($field) ) {
//
//                            $fieldReflection = new \ReflectionClass($field);
//                            if( $fieldReflection->hasMethod('getProvider') ) {
//
//                                $class = new \ReflectionClass($field);
//                                $parent = $class->getParentClass();
//
//                                echo "field=".$field."<br>";
//
//                                if( $parent && $field->getField() && $field->getField() != "" ) {     //filter in all objects with parent class. assume it is "PatientArrayFieldAbstract"
//
//                                    echo "###parent exists=".$parent->getName().", method=".$methodShortName.", id=".$field->getId()."<br>";
//                                    echo "field id=".$field->getId()."<br>";
//
//                                    //set provider to the fields from submitted form
//                                    if( !$field->getProvider() || $field->getProvider() == "" ) {
//                                        echo "add provider <br>";
//                                        $field->setProvider($provider); //set provider
//                                        echo "after provider=".$field->getProvider()." <br>";
//                                    }
//
//                                    //set validity to the fields from submitted form
//                                    if( !$validitySet ) {
//                                        echo "methodShortName=".$methodShortName."<br>";
//                                        if( !$entity->getId() || !$this->hasValidity($entity->$methodShortName()) ) { //set validity for the first added field
//                                            echo "Set validity to 1 <br>";
//                                            $field->setValidity(1);
//                                        }
//                                        $validitySet = true;    //indicate that validity is already has been set in this field array
//                                    }
//
//                                    //copy processed field from submitted object to found entity in DB
//                                    if( $original ) {
//                                        echo "original yes: field=".$field."<br>";
//                                        $methodBaseName = str_replace("get", "", $methodShortName);
//                                        $entity = $this->copyField( $entity, $field, $className, $methodBaseName );
//
//                                    }
//                                }
//
//                                //echo " end mrn provider=".$entity->getMrn()->first()->getProvider().", count=".count($entity->getMrn());
//                                //echo "end name provider=".$entity->getName()->first()->getProvider().", count=".count($entity->getname())." <br>";
//                                //echo " end provider=".$field->getProvider()." <br><br>";
//
//                            }
//
//                        } //if object
//
//                    } //foreach
//
//                } //if object
//                echo "<br>";
//            }
//        }
//
//        return $entity;
//    }

//    //replace field entity if not existed from source object to destination object
//    public function copyField( $entity, $field, $className, $methodName ) {
//        $em = $this->_em;
//        //echo "class=".$className.$methodName.", id=".$field->getId().", field=".$field."<br>";
//        $found = $em->getRepository('OlegOrderformBundle:'.$className.$methodName)->findOneById($field->getId());
//
//        if( !$found ) {
//            //echo "### ".$methodName." not found !!!!!! => add <br>";
//            $methodName = "add".$methodName;
//            $entity->$methodName( $field );
//        } else {
//            //echo "### ".$methodName." entity is found in DB, validity=".$field->getValidity()."<br>";
//            $found->setProvider($field->getProvider());
//            if( $field->getValidity() && $field->getValidity() != 0 ) {
//                $found->setValidity($field->getValidity());
//            }
//            //echo "validity=".$found->getValidity()."<br>";
//        }
//
//        return $entity;
//    }
//
//    public function hasValidity( $fields ) {
//        foreach( $fields as $field ) {
//            //echo "Validity=".$field->getValidity().", field=".$field->getField()."<br>";
//            if( $field->getValidity() == 1 ) {
//                return true;
//            }
//        }
//        return false;
//    }

    public function findOneByIdJoinedToMrn($mrnStr)
    {
        //echo "mrnStr=".$mrnStr." ";
        $query = $this->getEntityManager()
            ->createQuery('
            SELECT p, pmrn FROM OlegOrderformBundle:Patient p
            JOIN p.mrn pmrn
            WHERE pmrn.field = :mrn'
            )->setParameter('mrn', $mrnStr);

        try {
            return $query->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function deleteIfReserved( $mrnStr ) {
        //echo "mrnStr=".$mrnStr." ";
        $entity = $this->findOneByIdJoinedToMrn($mrnStr);
        if( $entity->getStatus() == self::STATUS_RESERVED ) {
            //echo "id=".$entity->getId()." ";
            $em = $this->_em;
            $em->remove($entity);
            $em->flush();
            return true;
        }
        return false;
    }
    
}
