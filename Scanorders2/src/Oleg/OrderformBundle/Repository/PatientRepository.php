<?php

namespace Oleg\OrderformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Serializer\Exception\LogicException;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends EntityRepository
{
    //make sure the uniqueness entity. Make new or return id of existing.
    public function processEntity( $in_entity, $orderinfo = null ) {

        //echo "enter patient rep <br>";

        $em = $this->_em;

        $in_entity = $em->getRepository('OlegOrderformBundle:Specimen')->removeDuplicateEntities( $in_entity );

        if( strpos( $in_entity->getMrn(), 'NOMRNPROVIDED' ) !== false ) {
            //throw new LogicException('MRN cannot contain NOMRNPROVIDED string');
        }

        //echo "patient rep 1<br>";

        //set up unknown patient
        if( $in_entity->getMrn() == "" || $in_entity->getMrn() == null ) {
            $in_entity->setMrn($this->getNextMrn());
        }

        //exit();
        
        $entity = $this->findOneBy(array('mrn' => $in_entity->getMrn()));
        //$em = $this->_em;

        //create new, cause old entity was not found in db 
        if( null === $entity ) {                                        
            //$em->persist($in_entity);                            
            //return $in_entity;
            //echo "new patient<br>";
            return $this->setResult( $in_entity, $orderinfo );         
        } 

        //copy all children from form's entity to existing entity from DB
        foreach( $in_entity->getSpecimen() as $specimen ) {
            //$em->persist($specimen);
            $entity->addSpecimen( $specimen );
        }

        //$em->persist($entity);

        //return $entity;
        //echo "existing patient<br>";
        return $this->setResult( $entity, $orderinfo );     
    }
    
    public function setResult( $patient, $orderinfo = null ) {
              
        $em = $this->_em;
        $em->persist($patient);
        
        if( $orderinfo == null ) {
            return $patient;
        }
             
        $specimens = $patient->getSpecimen();
        //echo "specimen count in patient=".count($specimens)."<br>";
             
        foreach( $specimens as $specimen ) {   
                            
            if( $em->getRepository('OlegOrderformBundle:Specimen')->notExists($specimen) ) {     //specimen new               
                $patient->removeSpecimen( $specimen );
                //echo "specimen0: ".$specimen."<br>";
                $specimen = $em->getRepository('OlegOrderformBundle:Specimen')->processEntity( $specimen, null, $specimen->getAccession(), $orderinfo );
                //echo "specimen1: ".$specimen."<br>";
                $patient->addSpecimen($specimen);
                $orderinfo->addSpecimen($specimen);
            } else {         //specimen from DB     
                //echo "specimen from DB continue id=".$specimen->getId()."<br>";
                continue;              
            }
            
        }

        //exit();
        //$em->flush($patient);
        return $patient;
    }

    //filter out duplicate virtual (in form, not in DB) patients
    public function removeDuplicateEntities( $entity ) {

        $patients = $entity->getPatient();

        if( count($patients) == 1 ) {
            return $entity;
        }

        $mrns = array();

        foreach( $patients as $patient ) {

            $mrn = $patient->getMrn();

            if( $mrn != null && $mrn != "" ) {
                if( count($mrns) == 0 || !in_array($mrn, $mrns) ) {
                    $mrns[] = $mrn;
                    //persist the rest of entities, because they will be added to DB.
                    $em = $this->_em;
                    $em->persist($patient);
                } else {
                    //echo "remove pat:".$patient;
                    $entity->removePatient($patient);
                }
            }
        }

        return $entity;
    }

    public function notExists($entity) {
        $id = $entity->getId();
        if( !$id ) {
            return true;
        }      
        $em = $this->_em;
        $found = $em->getRepository('OlegOrderformBundle:Patient')->findOneById($id);       
        if( null === $found ) {
            return true;
        } else {
            return false;
        }
    }

    //check the last NOMRNPROVIDED MRN in DB and construct next available MRN
    public function getNextMrn() {
        $em = $this->_em;
        $dql = "SELECT MAX(p.mrn) as maxmrn FROM OlegOrderformBundle:Patient p WHERE p.mrn LIKE '%NOMRNPROVIDED%'";
        $query = $em->createQuery($dql);
        $lastMrn =  $query->getResult();
        $lastMrnStr = $lastMrn[0]['maxmrn'];
        //echo $lastMrnStr;
        //exit();
        $mrnIndexArr = explode("-",$lastMrnStr);
        //echo "count=".count($mrnIndexArr)."<br>";
        if( count($mrnIndexArr) > 1 ) {
            $mrnIndex = $mrnIndexArr[1];
        } else {
            $mrnIndex = 0;
        }
        $mrnIndex = ltrim($mrnIndex,'0') + 1;
        $paddedmrn = str_pad($mrnIndex,10,'0',STR_PAD_LEFT);
        //echo "paddedmrn=".$paddedmrn."<br>";
        //exit();
        return 'NOMRNPROVIDED-'.$paddedmrn;
    }
    
}
