<?php

namespace Oleg\OrderformBundle\Repository;

use Oleg\OrderformBundle\Form\DataTransformer\MrnTypeTransformer;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends ArrayFieldAbstractRepository
{

    public function changeKeytype( $entity ) {

        $em = $this->_em;

        $key = $entity->obtainValidKeyField();

        if( !$key->getKeytype() || $key->getKeytype() == "" ) {
            //this can happen when accession is generated by a user on the form
            //throw new \Exception( 'Patient does not have a valid keytype. keytype=' . $key->getKeytype() );
            $keytype = $em->getRepository('OlegOrderformBundle:MrnType')->findOneByName("Auto-generated MRN");
            $key->setKeytype($keytype);
        }

        //echo "keytype=".$key->getKeytype()."<br>";
        $newkeytypeid = $this->getCorrectKeytypeId( $key->getKeytype()->getId() );
        //echo "newkeytypeid=".$newkeytypeid."<br>";
        if( $key == "" || $newkeytypeid != $key->getKeytype()->getId() ) {  //$key == "" is the same as $key->getName().""
            $newkeytypeEntity = $em->getRepository('OlegOrderformBundle:MrnType')->findOneByName("Auto-generated MRN");
            $key->setKeytype($newkeytypeEntity);
        }

        //strip zeros and record original
        $originalKey = $key->getField();
        $stripedKey = ltrim($originalKey,'0');
        $key->setField($stripedKey);
        $key->setOriginal($originalKey);

        return $entity;
    }

    public function getCorrectKeytypeId($keytypeid,$user=null) {
        $em = $this->_em;

        if( is_numeric ( $keytypeid ) ) {
            $keytypeEntity = $em->getRepository('OlegOrderformBundle:MrnType')->findOneById($keytypeid);
        } else {
            //create a new MrnType entity
            $mrnTypeTransformer = new MrnTypeTransformer($em,$user);
            $keytypeEntity = $mrnTypeTransformer->createNew($keytypeid);
        }

        if( $keytypeEntity->getName()."" == "Existing Auto-generated MRN" ) {
            $keytypeEntity = $em->getRepository('OlegOrderformBundle:MrnType')->findOneByName("Auto-generated MRN");
        }
        return $keytypeEntity->getId();
    }

    public function getExtraEntityById( $extra ) {
        $em = $this->_em;
        return $em->getRepository('OlegOrderformBundle:MrnType')->findOneById($extra["keytype"]);
    }

    //replace child of patient if duplicated
    //$parent: orderinfo
    public function replaceDuplicateEntities( $parent, $orderinfo ) {

        //echo "Patient replace duplicates:".$parent;

        $children = $parent->getChildren();

        if( !$children ) {
            return $parent;
        }

        $count = 0;
        foreach( $children as $child ) {    //child is Procedure object
            //echo $count.": Testing child(procedure)=".$child."<br>";

            if( count($child->getAccession()) != 1 ) {
                throw new \Exception( 'This entity must have only one child. Number of children=' . count($child->getAccession()) );
            }

            //$sameChild = $this->findSimilarChild($parent,$child->getAccession()->first());
            $em = $this->_em;
            $sameChild = $em->getRepository('OlegOrderformBundle:Procedure')->findSimilarChild( $parent, $child->getAccession()->first() );

            if( $sameChild ) {
                //echo "Found similar child=".$child."<br>";

                $thisChildren = $child->getChildren();
                foreach( $thisChildren as $thisChild ) {
                    $sameChild->addChildren($thisChild);
                }

                //Copy Fields for Procedure
                //echo "<br>######################################## Process similar fields ########################################<br>";
                $sameChild = $this->processFieldArrays($sameChild,$orderinfo,$child);
                //echo "######################################## EOF Process similar fields ########################################<br>";

                //copy parts to the found same accession
                $sameAccession = $sameChild->getAccession()->first();
                $parts = $child->getAccession()->first()->getChildren();
                foreach( $parts as $part ) {
                    $sameAccession->addChildren($part);
                }

                $accession = $child->getAccession()->first();
                $sameAccession = $this->processFieldArrays($sameAccession,$orderinfo,$accession);

                //clear accession
                //echo "Clear Duplicated Accession:".$accession;
                $sameChild->removeAccession($accession);
                $orderinfo->removeAccession($accession);
                $accession->setParent(null);
                $accession->clearOrderinfo();
                //unset($accession);

                //clear procedure
                $parent->removeChildren($child);
                $orderinfo->removeProcedure($child);
                $child->setParent(null);
                $child->clearOrderinfo();
                unset($child);
            }

            $count++;
        }

        return $parent;
    }


    
}
