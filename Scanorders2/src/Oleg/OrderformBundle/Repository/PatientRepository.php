<?php

namespace Oleg\OrderformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Serializer\Exception\LogicException;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends EntityRepository
{
    //make sure the uniqueness entity. Make new or return id of existing.
    public function processEntity( $in_entity ) {

        $em = $this->_em;

        if( strpos( $in_entity->getMrn(), 'NOMRNPROVIDED' ) !== false ) {
            //throw new LogicException('MRN cannot contain NOMRNPROVIDED string');
        }

        //set up unknown patient
        if( $in_entity->getMrn() == "" || $in_entity->getMrn() == null ) {

            //check the last NOMRNPROVIDED MRN in DB
            $dql = "SELECT MAX(p.mrn) as maxmrn FROM OlegOrderformBundle:Patient p WHERE p.mrn LIKE '%NOMRNPROVIDED%'";
            $query = $em->createQuery($dql);

            $lastMrn =  $query->getResult();

            $lastMrnStr = $lastMrn[0]['maxmrn'];

            //echo $lastMrnStr;
            //exit();

            $mrnIndexArr = explode("-",$lastMrnStr);
            //echo "count=".count($mrnIndexArr)."<br>";
            if( count($mrnIndexArr) > 1 ) {
                $mrnIndex = $mrnIndexArr[1];
            } else {
                $mrnIndex = 0;
            }


            $mrnIndex = ltrim($mrnIndex,'0') + 1;

            $paddedmrn = str_pad($mrnIndex,10,'0',STR_PAD_LEFT);

            //echo "paddedmrn=".$paddedmrn."<br>";
            //exit();

            $in_entity->setMrn('NOMRNPROVIDED-'.$paddedmrn);

        }

        //exit();
        
        //$entity = $this->findOneBy(array('mrn' => $in_entity->getMrn()));
        $entity = $this->findOneByMrn($in_entity->getMrn());
        $em = $this->_em;
        //echo "entity=".$entity;

        if( null === $entity ) {        
            //create new
            //echo "new<br>";
            $em->persist($in_entity);                            
            return $in_entity;
        } else {
            //echo "old<br>";
        }

        //copy all children to existing entity
        foreach( $in_entity->getSpecimen() as $specimen ) {
            $entity->addSpecimen( $specimen );
        }

        $em->persist($entity);

        return $entity;
    }

    //remove duplicate entities from persistent, not DB (i.e. user creates two patients with the same MRN in multi form)
    public function removeDuplicateEntities( $patients ) {

        echo "patient count = " . count($patients) . "<br>";

        //return $patients;

        print_r($patients);

        $mrns = array();
        $uniquePatients = array();
        $count = 0;

        foreach( $patients as $patient ) {
            echo $patient;

            $mrn = $patient->getMrn();

            if( $mrn != null && $mrn != "" ) {

                if( count($mrns) == 0 || !in_array($mrn,$mrns) ) {
                    $mrns[] = $mrn;
                    $uniquePatients[] = $patient;
                }

            }

            $count++;

        }

        print_r($uniquePatients);

        return $uniquePatients;

    }
    
}
