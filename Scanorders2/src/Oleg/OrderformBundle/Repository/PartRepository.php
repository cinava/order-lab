<?php

namespace Oleg\OrderformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Oleg\OrderformBundle\Helper\FormHelper;

use Oleg\OrderformBundle\Entity\Part;
use Oleg\OrderformBundle\Entity\PartPartname;

/**
 * PartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PartRepository extends ArrayFieldAbstractRepository
{
    
    //this function will create an entity if it doesn't exist or return the existing entity object
    public function processEntityPart( $part, $accession=null, $orderinfo=null ) {
        
        $em = $this->_em;

        //$part = $em->getRepository('OlegOrderformBundle:Block')->removeDuplicateEntities( $part );
        
//        $helper = new FormHelper();
//        $key = $part->getName();
//        if( isset($key) && $key >= 0 ) {
//            $name = $helper->getPart();
//            $part->setName( $name[$key] );
//        }

//        if( $accession ) {
//            echo "accession yes <br>";
//        } else {
//            echo "accession null <br>";
//        }
        
        if( $accession->getId() == null ) { //by this point, accession object is already created
            echo "Part Case 1: accession id null<br>";
            //$part = $this->findNextPartByAccession( $this->getValidField($accession->getAccession()) );
            $partname = new PartPartname();
            $partname->setField("A");
            $partname->setValidity(1);
            $part->addPartname($partname);

            //$part = $this->createPart();

            $part = $this->setResult( $part, $orderinfo );
            return $part;
        }
        
        //check if accession already has part with the same name.
        $part_found = $em->getRepository('OlegOrderformBundle:Part')->findOneBy( array(
            'accession' => $accession,
            'partname' => $part->getPartname()
        ));//TODO: fix it to field search
        //$part_found = $em->getRepository('OlegOrderformBundle:Part')->findOneByIdJoinedToField($part->getName(),"Part","name");

        if( $part_found == null ) {
            //$em->persist($part);
            //$em->flush();
            //return $part;
            $part = $this->setResult( $part, $orderinfo );
            return $part;
        }
        
        if( $part_found->getName() != $part->getName() ) {
            //$em->persist($part);
            //$em->flush();
            //return $part;
            $part = $this->setResult( $part, $orderinfo );
            return $part;
        }

        //copy all children to existing entity
        foreach( $part->getBlock() as $block ) {
            $part_found->addBlock( $block );
        }
//        foreach( $part->getSlide() as $slide ) {
//            $part_found->addSlide( $slide );
//        }

//        $em->persist($part_found);
//        return $part_found; 
        $part = $this->setResult( $part_found, $orderinfo );
        return $part;
    }
    
    public function setResult( $part, $orderinfo=null, $original=null ) {

        if( $part ) {
            echo "part yes <br>";
        } else {
            echo "part null <br>";
        }

        echo "1 part name partname=".$part->getPartname()->first()."<br>";
        echo "1 part name sourceOrgan=".$part->getSourceOrgan()->first()."<br>";
        echo "1 part name description=".$part->getDescription()->first().",count=".count($part->getDescription())."<br>";
        echo "1 part name Diagnosis count=".count($part->getDiagnosis())."<br>";
        echo "1 part name Diagnosis=".$part->getDiagnosis()[0].",count=".count($part->getDiagnosis())."<br>";
        //echo "1 part name provider=".$part->getPartname()->first()->getProvider()."<br>";
        //echo "1 part name validity=".$part->getPartname()->first()->getValidity()."<br>";
        echo "1 part=".$part."<br>";

        //$part->setDiagnosis(null);  //TODO: fix fields
        //$part->setDiffDiagnoses(null);

        $em = $this->_em;
        $em->persist($part);

        if( $orderinfo == null ) {
            return $part;
        }

        $part = $this->processFieldArrays($part,$orderinfo,$original);

        $blocks = $part->getBlock();    
        
        foreach( $blocks as $block ) {
            if( $em->getRepository('OlegOrderformBundle:Block')->notExists($block) ) {
                $part->removeBlock( $block );
                $block = $em->getRepository('OlegOrderformBundle:Block')->processEntity( $block, $part, $orderinfo );
                $part->addBlock($block);
                $orderinfo->addBlock($block);
            } else {
                continue;
            }
        }      
        
        //$em->flush($part);
        //exit();
        
        return $part;
    }

    //filter out duplicate virtual (in form, not in DB) parts from accession
    //unique part can be identified by the accession and part name => same part has the same accession number and part name;
    //since we check the part for this particular accession, then use just part's name (?!)
    public function removeDuplicateEntities( $accession ) {

        $parts = $accession->getPart();
        //echo "<br>remove duplication: part count=".count($parts)."<br>";

        if( count($parts) == 1 ) {
            return $accession;
        }

        $names = array();

        foreach( $parts as $part ) {

            echo "remove duplication: partname=".$part->getPartname()->first()."<br>";
            $thisName = $this->getValidField($part->getPartname());

            if( count($names) == 0 || !in_array($thisName, $names) ) {
                $names[] = $thisName;
                //persist the rest of entities, because they will be added to DB.
                $em = $this->_em;
                $em->persist($part);
            } else {
                $accession->removePart($part);
            }

        }

        return $accession;
    }

    public function findNextPartByAccession( $accession ) {
        if( !$accession || $accession == "" ) {
            return null;
        }

        $helper = new FormHelper();
        $names = $helper->getPart();

        foreach( $names as $name ) {
            $query = $this->getEntityManager()
                ->createQuery('
            SELECT p FROM OlegOrderformBundle:Part p
            JOIN p.partname pfield
            JOIN p.accession a
            JOIN a.accession aa
            WHERE pfield.field = :field AND aa.field = :accession'
                )->setParameter('field', $name)->setParameter('accession', $accession);

            $part = $query->getResult();

            if( !$part ) {
//                $part = new Part();
//                $part->setStatus(self::STATUS_RESERVED);
//                $partname = new PartPartname();
//                $partname->setField($name);
//                $partname->setValidity(1);
//                $part->addPartname($partname);
                //$this->createPart($name);
                return $this->createPart($name);
            }
        }

        return null;
    }

    public function createPart($name=null) {
        if( !$name ) {
            $name = "A";
        }
        $part = new Part();
        $part->setStatus(self::STATUS_RESERVED);
        $partname = new PartPartname();
        $partname->setField($name);
        $partname->setValidity(1);
        $part->addPartname($partname);
        return $part;
    }

//    public function notExists($entity) {
//        $id = $entity->getId();
//        if( !$id ) {
//            return true;
//        }
//        $em = $this->_em;
//        $found = $em->getRepository('OlegOrderformBundle:Part')->findOneById($id);
//        if( null === $found ) {
//            return true;
//        } else {
//            return false;
//        }
//    }
    
    public function presetEntity( $part ) {

        //$part->setDiseaseType("Non-Neoplastic");

        return $part;

    }

}
