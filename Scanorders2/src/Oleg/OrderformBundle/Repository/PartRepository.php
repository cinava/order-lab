<?php

namespace Oleg\OrderformBundle\Repository;

/**
 * PartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PartRepository extends ArrayFieldAbstractRepository
{

    //override parent method to get next key string
    public function getNextNonProvided($entity, $extra=null) {
        $accession= $entity->getParent();
        $accessionNumber = $accession->getValidKeyfield()."";
        return $this->findNextPartnameByAccession( $accessionNumber );
    }

    public function findNextPartnameByAccession( $accessionNumber ) {
        if( !$accessionNumber || $accessionNumber == "" ) {
            return null;
        }

        //echo "findNextPartnameByAccession: accessionNumber=".$accessionNumber."<br>";
        $name = "NOPARTNAMEPROVIDED";

        $query = $this->getEntityManager()
            ->createQuery('
            SELECT MAX(ppartname.field) as max'.'partname'.' FROM OlegOrderformBundle:Part p
            JOIN p.partname ppartname
            JOIN p.accession a
            JOIN a.accession aa
            WHERE ppartname.field LIKE :name AND aa.field = :accession'
            )->setParameter('name', '%'.$name.'%')->setParameter('accession', $accessionNumber."");

        $lastField = $query->getSingleResult();
        $index = 'max'.'partname';
        $lastFieldStr = $lastField[$index];
        //echo "lastFieldStr=".$lastFieldStr."<br>";

        return $this->getNextByMax($lastFieldStr, $name);
    }

    //create new Part by provided accession number
    public function createPartByAccession( $accessionNumber ) {

        //echo "accessionNumber=".$accessionNumber."<br>";

        if( !$accessionNumber || $accessionNumber == "" ) {
            return null;
        }

        $accessionNumber = $accessionNumber."";

        $em = $this->_em;

        $accessions = $em->getRepository('OlegOrderformBundle:Accession')->findOneByIdJoinedToField($accessionNumber,"Accession","accession",true,false); //find multi: all accessions with given $accessionNumber

        if( count($accessions) > 1 ) {
            throw new \Exception('More than one entity found.');
        }

        if( !$accessions ) {
            //echo "accession is not found in DB, accessionNumber=".$accessionNumber."<br>";
            //1) create Accession if not existed. We must create parent (accession), because we will create part object which must be linked to its parent
            //                                                                     $status, $provider, $className, $fieldName, $parent, $fieldValue
            $accession = $em->getRepository('OlegOrderformBundle:Accession')->createElement(null,null,"Accession","accession",null,$accessionNumber);
        } else {
            $accession = $accessions[0];
            //echo "accession is found in DB, accessionNumber=".$accessionNumber.", id=".$accession->getId()."<br>";
            //echo "accession is found in DB, accessionNumber=".$accessionNumber."<br>";
        }

        //2) find next available part name by accession number
        $partname = $em->getRepository('OlegOrderformBundle:Part')->findNextPartnameByAccession($accessionNumber);
//        $partname = $em->getRepository('OlegOrderformBundle:Part')->getNextNonProvided("NOPARTNAMEPROVIDED", "Part", "partname");
        //echo "next partlist generated=".$partname."<br>";
        //exit();


        //3) before part create: check if part with $partname does not exists in DB
        $partFound = $this->findOnePartByJoinedToField( $accessionNumber, $partname, null );

        if( $partFound ) {
            return $partFound;
        }

        //echo "create part, accession=".$accession->getAccession()->first().", partid=".$accession->getId()."<br>";
        //exit();

        //echo "create part <br>";
        //4) create part object by partname and link it to the parent
        $part = $em->getRepository('OlegOrderformBundle:Part')->createElement(null,null,"Part","partname",$accession,$partname);

        return $part;
    }


    //override parent method to find unique entity in DB
    public function findUniqueByKey($entity) {

        $partname = $entity->getValidKeyfield()."";
        $accession = $entity->getAccession();
        $accessionNumber = $accession->getValidKeyfield()."";

        return $this->findOnePartByJoinedToField( $accessionNumber, $partname, null );
    }

    public function findOneByIdJoinedToField($fieldStr, $className, $fieldName, $validity=null, $single=true, $extra=null ) {

        $accessionNumber = $extra['accession'];

        return $this->findOnePartByJoinedToField( $accessionNumber, $fieldStr, $validity );
    }

    //$accession - Accession number (string)
    //$partname - Part name (string)
    public function findOnePartByJoinedToField( $accession, $partname, $validity=null ) {

        $onlyValid = "";
        if( $validity ) {
            //echo "Part check validity ";
            $onlyValid = " AND pfield.validity=1";
        }

        $query = $this->getEntityManager()
            ->createQuery('
            SELECT p FROM OlegOrderformBundle:Part p
            JOIN p.partname pfield
            JOIN p.accession a
            JOIN a.accession aa
            WHERE pfield.field = :field AND aa.field = :accession'.$onlyValid
            )->setParameter('field', $partname."")->setParameter('accession', $accession."");

        $parts = $query->getResult();

        if( $parts ) {
            //echo "parts count=".count($parts)."<br>";
            return $parts[0];
        } else {
            return null;
        }

    }


    //filter out duplicate virtual (in form, not in DB) parts from accession
    //unique part can be identified by the accession and part name => same part has the same accession number and part name;
    //since we check the part for this particular accession, then use just part's name (?!)
    public function removeDuplicateEntities( $accession ) {

        $parts = $accession->getPart();
        //echo "<br>remove duplication: part count=".count($parts)."<br>";

        if( count($parts) == 1 ) {
            return $accession;
        }

        $names = array();

        foreach( $parts as $part ) {

            echo "remove duplication: partname=".$part->getPartname()->first()."<br>";
            $thisName = $this->getValidField($part->getPartname());

            if( count($names) == 0 || !in_array($thisName, $names) ) {
                $names[] = $thisName;
                //persist the rest of entities, because they will be added to DB.
                $em = $this->_em;
                $em->persist($part);
            } else {
                $accession->removePart($part);
            }

        }

        return $accession;
    }

}
