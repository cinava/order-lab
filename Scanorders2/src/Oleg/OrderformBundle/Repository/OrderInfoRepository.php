<?php

namespace Oleg\OrderformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Oleg\OrderformBundle\Helper\OrderUtil;

/**
 * OrderInfoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderInfoRepository extends ArrayFieldAbstractRepository {
    
    //process orderinfo and all entities
    public function processOrderInfoEntity( $entity, $type=null ) {

        //echo "orderinfo: ".$entity."<br>";
//        echo "patients count=".count($entity->getPatient())."<br>";
//        $this->printTree( $entity->getPatient()->first() );

//        foreach( $entity->getPatient() as $patient ) {
//            echo "patient id=".$patient->getId()."<br>";
//            echo "patient mrn=".$patient->getMrn()->first()."<br>";
//            echo "patient name=".$patient->getName()->first()."<br>";
//            echo "patient oredreinfo count=".count($patient->getOrderinfo())."<br>";
//            echo "patient slide=".$patient->getProcedure()->first()->getAccession()->first()->getPart()->first()->getBlock()->first()->getSlide()->first()."<br>";
//              echo "patient accessions count =".count($patient->getProcedure()->first()->getAccession())."<br>";
//              echo "patient accession=".$patient->getProcedure()->first()->getAccession()->first()."<br>";
//
//            echo "patient count age=".count($patient->getAge())."<br>";
//            foreach( $patient->getAge() as $age ) {
//                echo "age: id=".$age->getId().", field=".$age."<br>";
//            }
//            echo "patient count clinicalHistory=".count($patient->getClinicalHistory())."<br>";
//            foreach( $patient->getClinicalHistory() as $ch ) {
//                echo "ch: id=".$ch->getId().", field=".$ch."<br>";
//            }
//        }
//        exit();

        $em = $this->_em;

        //one way to solev multi duplicate entities to filter the similar entities. But for complex entities such as Specimen or Block it is not easy to filter duplicates out.
        //$entity = $em->getRepository('OlegOrderformBundle:Patient')->removeDuplicateEntities( $entity );

        //set Status with Type and Group
        $status = $em->getRepository('OlegOrderformBundle:Status')->findOneByAction('Submit');
        $entity->setStatus($status);

        if( $type ) {
            $entity->setType($type);
        }

        //return $entity;
        return $this->setOrderInfoResult( $entity );
    }
    
    public function setOrderInfoResult( $entity ) {       

        $em = $this->_em;

        $patients = $entity->getPatient();
        //echo $patients->first();

        //process data quality
        foreach( $entity->getDataquality() as $dataquality) {

            //set correct mrntype
            $mrntype = $em->getRepository('OlegOrderformBundle:MrnType')->findOneById( $dataquality->getMrntype() );
            $dataquality->setMrntype($mrntype);
            $dataquality->setOrderinfo($entity);
            $dataquality->setProvider($entity->getProvider()->first());
            $dataquality->setStatus('active');

//            echo "dataquality: description=".$dataquality->getDescription()."<br>";
//            echo "dataquality: accession=".$dataquality->getAccession()."<br>";
//            echo "dataquality: mrn=".$dataquality->getMrn()."<br>";
//            echo "dataquality: mrn text=".$dataquality->getMrntype()."<br>";

        } //foreach

        //echo "patients count=".count($patients)."<br>";
//        echo "dataquality count=".count($entity->getDataquality())."<br>";
//        if( count($entity->getDataquality()) > 0 ) {
//            echo "dataquality: description=".$entity->getDataquality()->first()->getDescription()."<br>";
//            echo "dataquality: accession=".$entity->getDataquality()->first()->getAccession()."<br>";
//            echo "dataquality: mrn=".$entity->getDataquality()->first()->getMrn()."<br>";
//            echo "dataquality: mrn text=".$entity->getDataquality()->first()->getMrntype()."<br>";
//        }

        foreach( $patients as $patient ) {
            //echo "before patient oredreinfo count=".count($patient->getOrderinfo())."<br>";
            $entity->removePatient($patient);
            $patient = $em->getRepository('OlegOrderformBundle:Patient')->processEntity( $patient, $entity, "Patient", "mrn", "Procedure" );
            $entity->addPatient($patient);
        }
       
        echo "<br><br>final patients count=".count($entity->getPatient())."<br>";
        foreach( $entity->getPatient() as $patient ) {
//            echo 'patient nameCount='.count($patient->getName())." :".$patient->getName()->first().", status=".$patient->getName()->first()->getStatus()."<br>";
//////            echo 'patient orderinfo count='.count($patient->getOrderinfo())."<br>";
//////            //echo 'patient orderinfo='.$patient->getOrderinfo()->first()->getId()."<br>";
//            echo 'orderinfo patient ='.$entity->getPatient()->first()->getName()->first()."<br>";
            //echo $patient;
////            echo "patient accessions count =".count($patient->getProcedure()->first()->getAccession())."<br>";
////            echo "patient parts count =".count($patient->getProcedure()->first()->getAccession()->first()->getPart())."<br>";
////            //echo "patient accession=".$patient->getProcedure()->first()->getAccession()->first()."<br>";
            echo "<br>--------------------------<br>";
            $this->printTree( $patient );
            echo "--------------------------<br>";
        }

        echo $entity;
        echo "count Patient=".count($entity->getPatient())."<br>";
        echo "count Procedure=".count($entity->getProcedure())."<br>";
        foreach( $entity->getProcedure() as $child ) {
            echo $child;
            echo $child->getOrderinfo()->first();
        }

        echo "count Accession=".count($entity->getAccession())."<br>";
        foreach( $entity->getAccession() as $child ) {
            echo $child;
            echo $child->getOrderinfo()->first();
        }

        echo "count Part=".count($entity->getPart())."<br>";
        foreach( $entity->getPart() as $part ) {
            $accession = $part->getAccession();
            echo "acc part count=".count($accession->getPart())."<br>";
            echo $part;
            echo "part's orderinfo count=".count($part->getOrderinfo())."<br>";
            echo $part->getOrderinfo()->first();
        }
        echo "count Block=".count($entity->getBlock())."<br>";
        echo "count Slide=".count($entity->getSlide())."<br>";

        echo "slide=".$entity->getSlide()->first();
        if( count($entity->getSlide()) > 0 ) {
            echo "scan id=".$entity->getSlide()->first()->getScan()->first()->getId()."<br>";
            echo "stain id=".$entity->getSlide()->first()->getStain()->first()->getId()."<br>";
            echo "specialStains id=".$entity->getSlide()->first()->getSpecialStains()->first()->getId()."<br>";
            echo "specialStains Parent id=".$entity->getSlide()->first()->getSpecialStains()->first()->getParent()->getId()."<br>";
            echo "Accession id=".$entity->getAccession()->first()->getAccession()->first()->getId()."<br>";
            echo "Block name id=".$entity->getBlock()->first()->getBlockname()->first()->getId()."<br>";
            echo "Block provider=".$entity->getBlock()->first()->getProvider()."<br>";

            echo "Patient providerCount=".count($entity->getPatient()->first()->getProvider()).", name=".$entity->getPatient()->first()->getProvider().", id=".$entity->getPatient()->first()->getProvider()->getId()."<br>";
            echo "Procedure providerCount=".count($entity->getProcedure()->first()->getProvider()).", name=".$entity->getProcedure()->first()->getProvider().", id=".$entity->getProcedure()->first()->getProvider()->getId()."<br>";
            echo "Accession providerCount=".count($entity->getAccession()->first()->getProvider()).", name=".$entity->getAccession()->first()->getProvider().", id=".$entity->getAccession()->first()->getProvider()->getId()."<br>";
            echo "Part providerCount=".count($entity->getPart()->first()->getProvider()).", name=".$entity->getPart()->first()->getProvider().", id=".$entity->getPart()->first()->getProvider()->getId()."<br>";
            echo "Partname providerCount=".count($entity->getPart()->first()->getPartname()->first()->getProvider()).", name=".$entity->getPart()->first()->getPartname()->first()->getProvider().", id=".$entity->getPart()->first()->getPartname()->first()->getProvider()->getId()."<br>";
            echo "Block providerCount=".count($entity->getBlock()->first()->getProvider()).", name=".$entity->getBlock()->first()->getProvider().", id=".$entity->getBlock()->first()->getProvider()->getId()."<br>";
            echo "Slide providerCount=".count($entity->getSlide()->first()->getProvider()).", name=".$entity->getSlide()->first()->getProvider().", id=".$entity->getSlide()->first()->getProvider()->getId()."<br>";

        }

        //exit('orderinfo repo exit');

        if( $entity->getCicle() == 'amend' ) {
                   
            $originalId = $entity->getOid();
            //echo "originalId=".$originalId."<br>";
            
            $newOrderinfo = clone $entity;
            $newOrderinfo->setCicle('submit');
            $newOrderinfo->setId(null);
            $newOrderinfo->setOid($originalId);
            
            $orderUtil = new OrderUtil($em);
            $message = $orderUtil->changeStatus($originalId, 'Amend');
            
            //$entity->setId(null);
                      
//            echo "orig id=".$entity->getId().",:".$entity."<br>";
//            echo "newOrderinfo id=".$newOrderinfo->getId().",:".$newOrderinfo."<br>";
//            
//            echo "<br><br>final patients count=".count($newOrderinfo->getPatient())."<br>";
//            echo "<br>--------------------------<br>";
//            $this->printTree( $newOrderinfo->getPatient()->first() );
//            echo "--------------------------<br>";

            $entity = $newOrderinfo;
        }

        //create new orderinfo
        $em->persist($entity);
        $em->flush();

        //insert oid to entity
        if( !$entity->getOid() ) {
            $entity->setOid($entity->getId());
            $em->flush();
        }
        
        //clean empty blocks
        //TODO: do it in part repository
        $blocks = $entity->getBlock();
        foreach( $blocks as $block ) {
            if( count($block->getSlide()) == 0 ) {
                //echo "final remove block from orderinfo: ".$block;
                $em->remove($block);
                $em->flush();
            }
        }
        
//        if( $entity->getCicle() == 'amend' ) {
//            echo "update entity with amend=".$entity."<br>";
//            $entity->setId(null);           
//            $entity->setOriginalid($originalId);
//            $em->persist($entity);
//            $em->flush();
//        }

        //$em->clear();
        return $entity;
    }

}
