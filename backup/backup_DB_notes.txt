The folder is mounted on the postgres machine as the following.
The database backup is scheduled as cronjobs to run on 3am daily and hourly,
all backup files are written to /mnt/pathology/view-backup (should see some there now).
The hourly and daily backup files are retained for 5 and 14 days respectively.
daily at 3 am - keep for 14 days (14 files)
hourly - keep for 5 days (24*5 = 120 files)
Total: 134 files
18Oct2022 a2 10:27am: 154 files

Set permission for pg_backup.sh and alert_dba:
chmod 744 pg_backup.sh
chmod 744 alert_dba


//brbpathologyfs.med.cornell.edu/pathology/view-backup is mount on xits-po-order-prd1:/mnt/pathology/view-backup


Hi Oleg,

Please take a look at the cronjobs and let me know if you have any inputs.
Any backup files under xits-po-order-prd1:/mnt/pathology/view-backup can be used to
test database restoration.
The easiest way is probably to clone this postgres server,
then just overwrite the data directory with the backup file to see
if the database instance can be started.
I can certainly assist with this if required.


Thanks
Yan Shi
Senior Database Administrator
Information Technologies and Services
Weill Cornell Medicine
Direct: 212-746-6853 Mobile: 856-467-8080


The cronjobs are scheduled in the postgresql server xits-po-order-prd1.
You would first stop postgres instance in your machine 157.139.226.86,
 then take any of the backup files under here /mnt/pathology/view-backup,
 untar the file to the data directory (remove the existing one)
 and then re-start postges instance.

Replace backup data folder:
/var/lib/pgsql/14/data/
Start/Stop server:
sudo systemctl stop postgresql-14
sudo systemctl start postgresql-14

-bash-4.2$ hostname
xits-po-order-prd1

The cronjobs are under postgres user:
sudo crontab -u postgres -l
0 0-2,4-23 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-backup" "HOURLY" > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-backup" "DAILY" > /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

create crontab: crontab -e -u postgres
0 0-2,4-23 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-test-backup" "HOURLY" "ScanOrder" "symfony"> /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /var/lib/pgsql/dba/bin/pg_backup.sh "/mnt/pathology/view-test-backup" "DAILY" "ScanOrder" "symfony"> /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

0 0-2,4-23 * * * /var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'HOURLY' 'ScanOrder' 'symfony' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1
0 3 * * * /var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'DAILY' 'ScanOrder' 'symfony' > /var/lib/pgsql/dba/logs/pg_backup_daily.sh.log 2>&1

sudo -u postgres /var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'HOURLY' 'ScanOrder' 'symfony' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1


{
"sets" : 
[
{
"idname" : "pg_backup_hourly",
"command" : "/var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'HOURLY' 'dbname' 'dbpass' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1",
"croninterval" : "2h"
},
{
"idname" : "pg_backup_hourly",
"command" : "/var/lib/pgsql/dba/bin/pg_backup.sh '/mnt/pathology/view-test-backup' 'DAILY' 'dbname' 'dbpass' > /var/lib/pgsql/dba/logs/pg_backup_hourly.sh.log 2>&1",
"croninterval" : "1d"
}
]
}


